{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/next/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/next/source/README.mdown","path":"README.mdown","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/css-content-formatting.css","path":"css/css-content-formatting.css","modified":0,"renderable":1},{"_id":"themes/next/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/next/source/css/reset.css","path":"css/reset.css","modified":0,"renderable":1},{"_id":"themes/next/source/css/css-content-formatting.scss","path":"css/css-content-formatting.scss","modified":0,"renderable":1},{"_id":"themes/next/source/css/font-awesome-4.7.0.min.css","path":"css/font-awesome-4.7.0.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/css/tools.css","path":"css/tools.css","modified":0,"renderable":1},{"_id":"themes/next/source/css/resume.css","path":"css/resume.css","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/iconfont.woff2","path":"fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/js/resume.js","path":"js/resume.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/codepen_logo.png","path":"images/codepen_logo.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/edu_logo.jpg","path":"images/edu_logo.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/item_project_01.png","path":"images/item_project_01.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_cheil_pengtai.png","path":"images/logo_cheil_pengtai.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_cheilpengtai.png","path":"images/logo_cheilpengtai.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_paiyue.png","path":"images/logo_paiyue.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_paiyue_system.png","path":"images/logo_paiyue_system.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_learnkpy.png","path":"images/logo_learnkpy.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_pureget_system.png","path":"images/logo_pureget_system.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_siemens_mini.png","path":"images/logo_siemens_mini.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_zyb.png","path":"images/logo_zyb.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_zyb_systems.png","path":"images/logo_zyb_systems.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo_zyb_yike.png","path":"images/logo_zyb_yike.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/qqlogo_2x.png","path":"images/qqlogo_2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/samsung_logo.png","path":"images/samsung_logo.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/tencent_logo.png","path":"images/tencent_logo.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/vue_life_cycle.png","path":"images/vue_life_cycle.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/yahoo_preformance_rules.png","path":"images/yahoo_preformance_rules.png","modified":0,"renderable":1},{"_id":"themes/next/source/resume/project.html","path":"resume/project.html","modified":0,"renderable":1},{"_id":"themes/next/source/resume/index.html","path":"resume/index.html","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/images/my_photo_1.png","path":"images/my_photo_1.png","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/prototype_chain.png","path":"images/prototype_chain.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/CSS3-auxiliary-line.html","path":"some-things-about-css-and-js/css-demo/CSS3-auxiliary-line.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/back-top-up.html","path":"some-things-about-css-and-js/css-demo/back-top-up.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/border-effect.html","path":"some-things-about-css-and-js/css-demo/border-effect.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/calendar.html","path":"some-things-about-css-and-js/css-demo/calendar.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/button.html","path":"some-things-about-css-and-js/css-demo/button.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-counter.html","path":"some-things-about-css-and-js/css-demo/css-counter.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-holy-grail-layout.html","path":"some-things-about-css-and-js/css-demo/css-holy-grail-layout.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-grid-layout.html","path":"some-things-about-css-and-js/css-demo/css-grid-layout.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-horizontal-sliding-navbar.html","path":"some-things-about-css-and-js/css-demo/css-horizontal-sliding-navbar.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-pop-dialog.html","path":"some-things-about-css-and-js/css-demo/css-pop-dialog.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-square-arrangement.html","path":"some-things-about-css-and-js/css-demo/css-square-arrangement.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-streaming-layout.html","path":"some-things-about-css-and-js/css-demo/css-streaming-layout.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-steps.html","path":"some-things-about-css-and-js/css-demo/css-steps.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-three-column- layout.html","path":"some-things-about-css-and-js/css-demo/css-three-column- layout.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-triangle.html","path":"some-things-about-css-and-js/css-demo/css-triangle.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-variable-width-block-element-horizontally-centered-vertically.html","path":"some-things-about-css-and-js/css-demo/css-variable-width-block-element-horizontally-centered-vertically.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-two-column-contour-layout.html","path":"some-things-about-css-and-js/css-demo/css-two-column-contour-layout.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css3-box-layout-column-aliquots.html","path":"some-things-about-css-and-js/css-demo/css3-box-layout-column-aliquots.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/element-horizontal-vertical-center.html","path":"some-things-about-css-and-js/css-demo/element-horizontal-vertical-center.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/fanfou-birthday-cake.html","path":"some-things-about-css-and-js/css-demo/fanfou-birthday-cake.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/hover-effect.html","path":"some-things-about-css-and-js/css-demo/hover-effect.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/fixed-width-elements-horizontally-vertically-centered.html","path":"some-things-about-css-and-js/css-demo/fixed-width-elements-horizontally-vertically-centered.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/hurdling-or-cross-column-layouts.html","path":"some-things-about-css-and-js/css-demo/hurdling-or-cross-column-layouts.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/login-box-model.html","path":"some-things-about-css-and-js/css-demo/login-box-model.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/multiple-solutions-square-arrangement.html","path":"some-things-about-css-and-js/css-demo/multiple-solutions-square-arrangement.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/no-fixed-width-to-achieve-square.html","path":"some-things-about-css-and-js/css-demo/no-fixed-width-to-achieve-square.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/one-element-completes-effect.html","path":"some-things-about-css-and-js/css-demo/one-element-completes-effect.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/pre-loading.html","path":"some-things-about-css-and-js/css-demo/pre-loading.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/spinner-loading.html","path":"some-things-about-css-and-js/css-demo/spinner-loading.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/rgba-opacity.html","path":"some-things-about-css-and-js/css-demo/rgba-opacity.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-3.html","path":"some-things-about-css-and-js/css-demo/sticky-page-footer-layout-3.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-1.html","path":"some-things-about-css-and-js/css-demo/sticky-page-footer-layout-1.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-2.html","path":"some-things-about-css-and-js/css-demo/sticky-page-footer-layout-2.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-4.html","path":"some-things-about-css-and-js/css-demo/sticky-page-footer-layout-4.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/switch-button.html","path":"some-things-about-css-and-js/css-demo/switch-button.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/text-shadow.html","path":"some-things-about-css-and-js/css-demo/text-shadow.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/text-transform.html","path":"some-things-about-css-and-js/css-demo/text-transform.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/text-vertical-centering.html","path":"some-things-about-css-and-js/css-demo/text-vertical-centering.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/two-columns-layout.html","path":"some-things-about-css-and-js/css-demo/two-columns-layout.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/web-site-layout.html","path":"some-things-about-css-and-js/css-demo/web-site-layout.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/js-demo/javascript-on-stack.html","path":"some-things-about-css-and-js/js-demo/javascript-on-stack.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/js-demo/javascript-array-reduce-methods.html","path":"some-things-about-css-and-js/js-demo/javascript-array-reduce-methods.html","modified":0,"renderable":1},{"_id":"themes/next/source/some-things-about-css-and-js/js-demo/javascript-palindrome.html","path":"some-things-about-css-and-js/js-demo/javascript-palindrome.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/jquery-3.1.1.min.js","path":"lib/jquery/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/demo/css/css_specificity/01.html","path":"demo/css/css_specificity/01.html","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/pdf/前端开发工程师-谢长春-13671012707.pdf","path":"pdf/前端开发工程师-谢长春-13671012707.pdf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.DS_Store","hash":"293ccafb9bb8d02dbbc3d564c790d4b03febe3af","modified":1593603924938},{"_id":"themes/next/_config.yml","hash":"b7c3637f79a76302557c0f9f904630c24a093d68","modified":1592566023496},{"_id":"themes/next/CNAME","hash":"9c42067a7f23aae701d2f62f396f3864ed482d90","modified":1574346058000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/404/index.md","hash":"283f5d7d2e947316c080102c3e3b50e445c5c358","modified":1574842862746},{"_id":"source/_posts/2019-11-23-git常用命令操作清单.md","hash":"a629522a80895b2f0a76b275e021f5f605533f90","modified":1593062883420},{"_id":"source/_posts/2019-11-23-git遇到的一些问题.md","hash":"32cf6fdd32303325026a2d20047c6d5816169934","modified":1586346376000},{"_id":"source/_posts/2019-11-23-大话数据结构.md","hash":"c54cbf38168cf8458355edc013677981241cd826","modified":1578966862183},{"_id":"source/_posts/2019-11-25-css-结构和层叠总结.md","hash":"a0e1d084c33bbc7a62b672f30e7825440041d4c2","modified":1578966885432},{"_id":"source/_posts/2019-12-01-javascript-回文函数实现.md","hash":"08481d8b061d91b18a30ac3bbed98c49856cff03","modified":1578966913358},{"_id":"source/_posts/2019-12-06-let和const命令.md","hash":"811ed54b18232a9140c4fc0678c34cc07c589b23","modified":1578966920799},{"_id":"source/_posts/2019-12-16-function.md","hash":"ee231aa557f96d9703dd93fe651167035db0c2a6","modified":1578966927115},{"_id":"source/_posts/2019-12-17-javascript中隐式转换.md","hash":"eacf3ac9374551112292a946293ecb50e2e42589","modified":1576563545740},{"_id":"source/_posts/2019-12-17-javascript检测数据类型.md","hash":"f043bec00510569bbe2fdc056fff854c55e64a24","modified":1576562456208},{"_id":"source/_posts/2019-12-17-javascript阶乘（Factoral）函数实现.md","hash":"ed1dc3b361ba7eafe60a41495154c01d9429f9d5","modified":1576626547693},{"_id":"source/_posts/2019-12-18-如何优雅的在VS-Code刷Leetcode算法题库？.md","hash":"3193124503821608c7a5ae0b208bcdda109b829e","modified":1593170754872},{"_id":"source/_posts/2020-01-08-npm-install安装依赖包超过最大调用堆栈大小的error.md","hash":"226a666955c3d7edf69ceeac6e289679993651fe","modified":1578483301290},{"_id":"source/_posts/2020-01-05-语义化git提交信息.md","hash":"aa6444230a7fb27998e05f264b2c922cd6ee7c6c","modified":1593170771259},{"_id":"source/_posts/2020-01-07-谈谈对javascript中this关键字的理解.md","hash":"861026b3311f193fc8f271496120a59e6c46cd4b","modified":1593482582328},{"_id":"source/_posts/2020-01-12-javascript-iife-immediately-invoked-function-expression-立即执行函数表达式.md","hash":"6e4b36b2a1ab18e7c29a515ab720822333635d2d","modified":1578966969075},{"_id":"source/_posts/2020-02-29-JavaScript长字符串拆分并换行处理.md","hash":"33e94581fb47c18a91fd4433cf6c6393f91ab1a3","modified":1586346476000},{"_id":"source/_posts/2020-04-10-CSS文本换行、不换行、超出部分显示省略号处理.md","hash":"bcdf81c026b78c8c1b16f6fd2e0b1cb23776db12","modified":1593065281779},{"_id":"source/_posts/2020-06-25-ES6箭头函数.md","hash":"97307df3c966df37bfd790c83dc27eb6c92e61b1","modified":1594102189154},{"_id":"source/_posts/2020-06-26-JavaScript实现斐波那契数列的几种方式.md","hash":"0a42fe616c8ad72bb994749a9406b876054beb95","modified":1594102182194},{"_id":"source/_posts/2020-01-13-javascript-执行机制原理.md","hash":"81624e8d2f84d3613f18e30ea3f471fc36fa2e30","modified":1578966979140},{"_id":"source/_posts/2020-06-28-深入理解CSS中BFC（Block-Formatting-Context）块级格式上下文.md","hash":"ef58c0e45dd3487eadeaff3c021b4af7f7fee1c2","modified":1594026366065},{"_id":"source/_posts/2020-04-21-JavaScript-获取当前时间戳的几种方式.md","hash":"e2b3295cc90f03c17bbc3096fb046348884996a8","modified":1588142933539},{"_id":"source/_posts/2020-04-29-Mac-外接显示器不响应问题.md","hash":"51fbe412dec814e284f18c503a06a3a2d109e203","modified":1588144178664},{"_id":"source/_posts/2020-06-29-JavaScript中常用的继承方案.md","hash":"4bd80680cb541ead77cc50e1a60275081e73a70e","modified":1594103245570},{"_id":"source/_posts/2020-07-01-Vue的生命周期过程.md","hash":"a4b28601fc55a232e1c459ecc4d3ab5d46dfec1f","modified":1594118554311},{"_id":"source/_posts/2020-06-29-JavaScript创建对象的几种方式.md","hash":"5ddb57ca555195f8b5d22d6b1772544f12458781","modified":1594102498972},{"_id":"source/_posts/2020-06-30-彻底理解JavaScript函数的调用方式和传参方式.md","hash":"035a6a398418e6704c506955020529da819550ee","modified":1593474584310},{"_id":"source/_posts/2020-07-01-webpack中loader和plugin的区别是什么.md","hash":"f517f905f68989bbe06e8954598ff6379e427828","modified":1594102147995},{"_id":"source/_posts/2020-07-01-git将某分支的某次提交合并到另一个分支.md","hash":"1d0ba94c47ba85ee1fa5f47e9c2837ee525b1baf","modified":1593604892661},{"_id":"source/_posts/2020-07-07-前端性能优化之雅虎军规.md","hash":"f5a07a8960457efa8a28f787493fc281a521a3a8","modified":1594118913796},{"_id":"source/_posts/2020-07-08-MacOS终端的一些常用命令行操作.md","hash":"267120f738584bccb891c9673a215e491c13fff2","modified":1594180551062},{"_id":"source/_posts/2020-07-01-基于Vue-SEO的解决方案.md","hash":"5642ff5269747ede9687bbb999acd8c1937b9c4d","modified":1593605024506},{"_id":"source/_posts/2020-07-01-浏览器跨域的解决方案.md","hash":"ef9ab776383afabb326e964574b7069804b87b02","modified":1593605698263},{"_id":"source/archives/index.md","hash":"83ca11d692692e5af669303dde00c843d169e2de","modified":1574842776527},{"_id":"source/categories/index.md","hash":"d904bcedff9f4abae2472eab7a7347dc45646d7c","modified":1574842792519},{"_id":"source/projects/index.md","hash":"1ee96a241fd85e10094e450912d33460fd4a3e47","modified":1578804239264},{"_id":"source/reading/index.md","hash":"b0ac4fbd666da327851d3ce58cc672d330379f65","modified":1576221548356},{"_id":"source/movies/index.md","hash":"bd363eb2e9af9682b2ad4a9472a08479cb72238b","modified":1581872976248},{"_id":"source/tags/index.md","hash":"8ca0c931e546b3d0bd1156a27a6bf54fe5977105","modified":1574842757744},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"ca737f596d0fce2792fa9a2faf636999a8008b78","modified":1576957020809},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"4b10755d27bd431f3e4c04fa0e352f00c2d0068d","modified":1576957045361},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/source/.DS_Store","hash":"df580b5fca393e9250ee42bc19ff43d21f03d15f","modified":1593603933667},{"_id":"themes/next/source/CNAME","hash":"9c42067a7f23aae701d2f62f396f3864ed482d90","modified":1574346058430},{"_id":"themes/next/source/README.mdown","hash":"86f27ebf7c5f2e10e9189e8e380e049bd4341e0b","modified":1574352457554},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6c17ee7b1f711c1b806787f282f570a5c52174bf","modified":1574784877579},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"54b18b845d8101bb53e80828cd54fb29c342dc99","modified":1574871395345},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/css/css-content-formatting.css","hash":"7fa986f9219f83957e5a197bd4b8fd4c3c343c6e","modified":1592565934824},{"_id":"themes/next/source/css/normalize.css","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1574080948375},{"_id":"themes/next/source/css/reset.css","hash":"084929141e393622150f50ebee6179e19fd8f929","modified":1592565958093},{"_id":"themes/next/source/css/css-content-formatting.scss","hash":"4fc0cb8fa66b9159b9d124b975a83f7cb3444aa9","modified":1592565961784},{"_id":"themes/next/source/css/font-awesome-4.7.0.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1574845716126},{"_id":"themes/next/source/css/tools.css","hash":"d705b4015c5208653db2513e0b147b38a1368f10","modified":1592565947450},{"_id":"themes/next/source/css/resume.css","hash":"0bdf072dc1c33da7b157dc0202d67a58fe871bf8","modified":1593014246424},{"_id":"themes/next/source/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1574230408831},{"_id":"themes/next/source/fonts/iconfont.eot","hash":"2964b7dde5e8f7b36c2f845d04f36288a0bafdcf","modified":1574235054859},{"_id":"themes/next/source/fonts/iconfont.svg","hash":"3423759179fe2b5d00acf5075a0af5767d9080b4","modified":1574235054859},{"_id":"themes/next/source/fonts/iconfont.ttf","hash":"21cca20a2e5f55cff6ea5b2edf3654f19b475061","modified":1574235054860},{"_id":"themes/next/source/fonts/iconfont.woff","hash":"3bdd5855bea2aa82a10385c5e23b9a5b79e66274","modified":1574235054860},{"_id":"themes/next/source/fonts/iconfont.woff2","hash":"ac3038eabf751232c77df63c3b7ffba6c218649b","modified":1574349489162},{"_id":"themes/next/source/js/resume.js","hash":"e4992f8d4c9b3c2d35ce558a37eb4f7b409d11d7","modified":1592565941113},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1574916418436},{"_id":"themes/next/source/images/codepen_logo.png","hash":"7e31bfad580066f96801984b63266a815c3a99e1","modified":1574346058451},{"_id":"themes/next/source/images/edu_logo.jpg","hash":"7fc5b0209e79cd0d72d9751e2376c44a1c5eb02f","modified":1574346058452},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1574916418436},{"_id":"themes/next/source/images/favicon.ico","hash":"0d61e34813f17d7838f63f1998dde83295f25691","modified":1574346058453},{"_id":"themes/next/source/images/item_project_01.png","hash":"043aca0b6c7319991dab751b18eb46a14412c6fe","modified":1574346058453},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/logo_cheil_pengtai.png","hash":"8f96926f87292bf63ebf65cee907f56681dfc693","modified":1574346058454},{"_id":"themes/next/source/images/logo_cheilpengtai.png","hash":"e1a658ea2f73831ed7cf46e50102943375daf7f7","modified":1574346058454},{"_id":"themes/next/source/images/logo_paiyue.png","hash":"420b677ef3ebc1bdba230c885dbd497185bb3b4b","modified":1574346058455},{"_id":"themes/next/source/images/logo_paiyue_system.png","hash":"000896dd6d2faa2c4ee445c3383b2e800f5a546b","modified":1574346058455},{"_id":"themes/next/source/images/logo_learnkpy.png","hash":"5d6f873fe44b9ce50ea9343d1faf5c9e85612692","modified":1592334249851},{"_id":"themes/next/source/images/logo_pureget_system.png","hash":"d358a338195c46f57bc91d8205bbd97d1dfeead6","modified":1574346058456},{"_id":"themes/next/source/images/logo_siemens_mini.png","hash":"42a99d365853041298d1740313df6d19b6469e75","modified":1574346058461},{"_id":"themes/next/source/images/logo_zyb.png","hash":"9a45c1a0dfcc2004498c34df9c72227b9e279235","modified":1574346058461},{"_id":"themes/next/source/images/logo_zyb_systems.png","hash":"517000e43cfac2d55a673da76d407f5b5bcac482","modified":1574346058462},{"_id":"themes/next/source/images/logo_zyb_yike.png","hash":"94794d7be5e31d8d18a003d4ed40cb6e52ace295","modified":1574346058462},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/qqlogo_2x.png","hash":"bc3b065bfa1e060149a8a36f50300a518966acf4","modified":1576197580293},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/samsung_logo.png","hash":"70f954438251e88e231d6f3c0e5cbc7f6100de63","modified":1574346058463},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/source/images/tencent_logo.png","hash":"10c41ecc83f42b67b884589880527c53c9a3f687","modified":1592318247854},{"_id":"themes/next/source/images/vue_life_cycle.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1594114063632},{"_id":"themes/next/source/images/yahoo_preformance_rules.png","hash":"2c6dce46f82f1bc4102d7fb6b5fe63ce85339eea","modified":1594114398077},{"_id":"themes/next/source/resume/project.html","hash":"1a06cc027b2f7c1e620383e3e70d745ea1accc80","modified":1593014272695},{"_id":"themes/next/source/resume/index.html","hash":"89364fe44e7de9100f506c358d11e83f601412bf","modified":1593014325856},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1478185683000},{"_id":"themes/next/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1478185683000},{"_id":"themes/next/source/images/my_photo_1.png","hash":"5a3f68b88c2624d08dcfa0afc875bb97717fe0e1","modified":1574346058463},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"61f3161c228ea50526832f32ad63b1ecea86b320","modified":1574686044545},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1478185683000},{"_id":"themes/next/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1478185683000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/images/prototype_chain.png","hash":"e05130536db1162cc7c39d4d6edad9fe0252d6fa","modified":1593433562477},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/CSS3-auxiliary-line.html","hash":"2c9995408b91f21f186c5b6967b66973a9db598b","modified":1578804116251},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/back-top-up.html","hash":"cf17493327c423baae9e4e4e4fb66bed1a25af84","modified":1574849350205},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/border-effect.html","hash":"569665a82713d8698b0c3498249d307ed19e0df5","modified":1574869445782},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/calendar.html","hash":"49ac62d805e5791e5a7346c276b343912e73c0c2","modified":1574869624624},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/button.html","hash":"ca5bacf4326750ddcd9c144db69ad2c969353d3a","modified":1574869779830},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-counter.html","hash":"5fe5f881a2c77953d19302f54b8c2903d14f90f0","modified":1574869843608},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-holy-grail-layout.html","hash":"70715439b8dae2f75b15c5ffa146935c66c8547d","modified":1574870000454},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-grid-layout.html","hash":"55320b6b8ca26ffb84ad086f6d08b241ac348ce7","modified":1574080948381},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-horizontal-sliding-navbar.html","hash":"75135940d802d6963256610de2f0355535656f30","modified":1574870208568},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-pop-dialog.html","hash":"92e6725fcaaac86595df3f3eaad859337f5e2e8d","modified":1574849538279},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-square-arrangement.html","hash":"bf7f0a93c604303a06511fe42501cfeb8be80680","modified":1574870483284},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-streaming-layout.html","hash":"3c2eab168a297f0fae1b988f36674d0c671ea03d","modified":1574870676380},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-steps.html","hash":"a40010d4b668aa4d7239006fbbcfe37cb8c3e600","modified":1574870549371},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-three-column- layout.html","hash":"6d02b95c2137dee979be3f6d05f85031a32c86ef","modified":1591083994626},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-triangle.html","hash":"29a794219b1313eb51214ca94055e66c5af2d407","modified":1574870942027},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-variable-width-block-element-horizontally-centered-vertically.html","hash":"ba108d4614d1460600c3fdcb6e2f8b9b8d700d63","modified":1578804101833},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css-two-column-contour-layout.html","hash":"bbb081b4dc5d2f98d89e94f6ac1d566bbf11c0cd","modified":1574871825688},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/css3-box-layout-column-aliquots.html","hash":"57800f17694e90b0d4ce609fbfdac1b61e308cd9","modified":1574871966880},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/element-horizontal-vertical-center.html","hash":"1b48410d3431ec6053b1822707343748700330dd","modified":1574872161135},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/fanfou-birthday-cake.html","hash":"6b43060e6b2453ec1c569eef6308b3447c2389d9","modified":1574872310366},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/hover-effect.html","hash":"ad109cf6391931a245af5d96cd8cd09a5a2ecfd5","modified":1574873075711},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/fixed-width-elements-horizontally-vertically-centered.html","hash":"4a2e7b620c44642de87b74fa2138fc8da50cf70e","modified":1574873077883},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/hurdling-or-cross-column-layouts.html","hash":"baa94863f773bf8636fde43d0645a4abb09040cb","modified":1574873315392},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/login-box-model.html","hash":"99db3c19e591af14e69873cdeddd277963a509ce","modified":1574873584131},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/multiple-solutions-square-arrangement.html","hash":"f384ea4691964ddd548e8d2b86f4db50fbf84506","modified":1574873846370},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/no-fixed-width-to-achieve-square.html","hash":"7d245d817995b9fb4064fa6850d5adec0e0cee19","modified":1574873917627},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/one-element-completes-effect.html","hash":"1dd813bbcbdfda9ddc9589db24620e6da1e749bb","modified":1574874127110},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/pre-loading.html","hash":"87d38e44a9f548a0894628eaeca59e265ef297cc","modified":1574874207724},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/spinner-loading.html","hash":"6ea51fb5d599fedcd1540cbfea94649e4ca83700","modified":1574874524110},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/rgba-opacity.html","hash":"c3492efd13009a6339e6f19f1d6b9ff789fd28dd","modified":1574874456276},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-3.html","hash":"8536dbf63f46db4acfb17cb2099e97fb8d94814b","modified":1574080948386},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-1.html","hash":"c181be159cc9143fc7580501cfe7dfe323df3f40","modified":1574875211681},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-2.html","hash":"5ae19375e584b90a7e4a7101cf9753a6c0d4e660","modified":1574080948386},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-4.html","hash":"41e6aa7ecb1ee5f7d15798047d23d72fa78a2a52","modified":1574080948387},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/switch-button.html","hash":"521b53f8c4e2e180748c5e8118b79cb8dc57b8ac","modified":1574875230937},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/text-shadow.html","hash":"e9ec87c48a18e612f4758a1285caa7fe5832584b","modified":1574875265526},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/text-transform.html","hash":"b6565c4df4dfca79bb5656e8a3beb5a564634be7","modified":1574875316299},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/text-vertical-centering.html","hash":"937b7ce389238f7c7e755537609a323d3b918276","modified":1574875564896},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/two-columns-layout.html","hash":"8230f883be1d4dcf821d857cc0f66097f212b422","modified":1574080948389},{"_id":"themes/next/source/some-things-about-css-and-js/css-demo/web-site-layout.html","hash":"e9bf501173a1601421ded38c6127993762c82456","modified":1574080948390},{"_id":"themes/next/source/some-things-about-css-and-js/js-demo/javascript-on-stack.html","hash":"856cbd9b2e65cef617324565f99fbf716f24a53d","modified":1575891294112},{"_id":"themes/next/source/some-things-about-css-and-js/js-demo/javascript-array-reduce-methods.html","hash":"6100ce0a893647493469d8970b47b820ebcc718a","modified":1575891285418},{"_id":"themes/next/source/some-things-about-css-and-js/js-demo/javascript-palindrome.html","hash":"f6457181115f0f158acb00366f077b5b8c370874","modified":1575891290484},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1574848154106},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/.sass-cache/e95e999f1929c5140826e71795f7b88efe5fac42/css-content-formatting.scssc","hash":"351b02f2395908a514c4d3be2c205576bbe8f7fa","modified":1576127641465},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/demo/css/css_specificity/01.html","hash":"5c0c243ca3e1fc5d9313c706f4a927994812a27e","modified":1574685224250},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/pdf/前端开发工程师-谢长春-13671012707.pdf","hash":"eecbfb7636441b355cf7200c08bdfa295bb16d3c","modified":1592564121048},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ce9cb0ae627685ca8c30900c1560e7a01c030d0f","modified":1574538844882},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1478185683000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"public/404/index.html","hash":"14d8eb8b5fb8f4d6e8ec574d87170c4aa09fa49e","modified":1594180597791},{"_id":"public/archives/page/4/index.html","hash":"9a66bc0d8c4d1d44dd908b643218aefcee89350b","modified":1594180597791},{"_id":"public/archives/2019/page/2/index.html","hash":"f3a8c684bc902684ebe975de3c1ebf011afa263b","modified":1594180597791},{"_id":"public/archives/2019/11/index.html","hash":"93fac90481186ed68806b39c53cde9c7135d931f","modified":1594180597791},{"_id":"public/archives/2020/page/3/index.html","hash":"cdbc73b8781c93e613932d0aadfd0abac03a3ed5","modified":1594180597791},{"_id":"public/archives/2020/02/index.html","hash":"248cdbcd8bc6753d5d81950938c7ce6c9323c912","modified":1594180597791},{"_id":"public/archives/2020/04/index.html","hash":"57b6ed662438cd0c4aefe5fcea5a03a868d89aca","modified":1594180597791},{"_id":"public/categories/Git/index.html","hash":"f0959a63317a1c957512cfa055e7ee6b02b8a77b","modified":1594180597791},{"_id":"public/categories/数据结构/index.html","hash":"3405bee6d1e93b56d459b6fd8ea39247edd18cc8","modified":1594180597791},{"_id":"public/categories/读书笔记/index.html","hash":"e3ff50f7e349573454d6a7f5086a855ae921dffd","modified":1594180597791},{"_id":"public/categories/JavaScript/page/2/index.html","hash":"28a79949b763176dd9f51531eeb84ba567bb8b47","modified":1594180597791},{"_id":"public/categories/前端算法/index.html","hash":"7b4ef3614f05ee1317c1b56e5d16a1382856329f","modified":1594180597791},{"_id":"public/categories/npm/index.html","hash":"f9116aeb79612fe6819065090ff2aa52c5d3ecaa","modified":1594180597791},{"_id":"public/categories/CSS/index.html","hash":"ed3f19ba46badd30d4721adda5738e99789e3162","modified":1594180597791},{"_id":"public/categories/Mac/index.html","hash":"fa112dc79734de02b57d614ff913ece46a20ed6c","modified":1594180597791},{"_id":"public/categories/计算机科学/index.html","hash":"da480fccce5816c88891f84919489071d4efae2e","modified":1594180597791},{"_id":"public/categories/Vue/index.html","hash":"6dddd96094bf5d166242d05c4920e67248b685ce","modified":1594180597791},{"_id":"public/categories/Webpack/index.html","hash":"b65289e290468f1a7088abdb47b5854a376c495a","modified":1594180597791},{"_id":"public/categories/Leetcode/index.html","hash":"7dbbf4ea7957708aeaf3eb24dc36b012db4c9421","modified":1594180597791},{"_id":"public/categories/前端性能优化/index.html","hash":"a4c4833082372fa3f517a3a7b1033fe3ab238e5f","modified":1594180597791},{"_id":"public/categories/HHTP/index.html","hash":"fad563c700223ecd137b24f2dbc42fef613e61e2","modified":1594180597791},{"_id":"public/categories/macOS/index.html","hash":"b8199a17a018277c24fcf4f899ca99c5c2936710","modified":1594180597791},{"_id":"public/categories/algorithms/index.html","hash":"59390aac3b1d49a70ab271694a36768c879f3d07","modified":1594180597791},{"_id":"public/categories/前端基础/index.html","hash":"23a4f3ab8521a068387be1e263f387e3e5ea06dd","modified":1594180597791},{"_id":"public/categories/硬件问题/index.html","hash":"299d0b1f866a072076db04e047bdb00b53e7c676","modified":1594180597791},{"_id":"public/categories/VS-Code/index.html","hash":"40942122767555b7b019f178acbf0a109ccd3c23","modified":1594180597791},{"_id":"public/categories/Leetcode-algorithms/index.html","hash":"2a63bb0c38a2bffcf238989301447a66dc1efee4","modified":1594180597791},{"_id":"public/tags/前端开发/page/2/index.html","hash":"5a4b195a9fe7e05bb6530e96ac87a6382ef35290","modified":1594180597791},{"_id":"public/tags/Git相关/index.html","hash":"fcc850d85f6b9de463cdda90c27f977e986831d8","modified":1594180597791},{"_id":"public/tags/数据结构/index.html","hash":"b49894cdc241814e91f11d8fcf6645119a6dca52","modified":1594180597791},{"_id":"public/tags/大话数据结构/index.html","hash":"1233ce7f4c23b81347b2e18204d9aba3cc8baff0","modified":1594180597791},{"_id":"public/tags/计算机科学/index.html","hash":"1f38eaac342ea8b8d59b590a03de4b1a6fec1efb","modified":1594180597791},{"_id":"public/tags/Data-Structure/index.html","hash":"e08b0f65fcb59b01cbc8fb9a88f7e11818fd0182","modified":1594180597791},{"_id":"public/tags/阅读/index.html","hash":"b243ad3010ca4065b51222cdaeed922b053914d2","modified":1594180597791},{"_id":"public/tags/读书笔记/index.html","hash":"11d8c2e8736f0b456b6ff8774cd558c468372300","modified":1594180597791},{"_id":"public/tags/前端算法/index.html","hash":"389c7e537d149d797e1f98c932d004c2a272f7b8","modified":1594180597791},{"_id":"public/tags/前端算法面试题/index.html","hash":"4e3d3bef22765a8fabf862a08816a7800aed283c","modified":1594180597791},{"_id":"public/tags/JavaScript-字符串回文/index.html","hash":"8b4779c4a29af229e614f6579a54058a3c843f78","modified":1594180597791},{"_id":"public/tags/JavaScript-算法/index.html","hash":"93c0f1e82ab814b9baafd103ebacc1a90c1a418f","modified":1594180597791},{"_id":"public/tags/var/index.html","hash":"46bfe7c495f63a11a69dcbb64fcfbf68d2c15bb9","modified":1594180597791},{"_id":"public/tags/let/index.html","hash":"2042433613b764a2c4ceee74c074a3ba10ac6000","modified":1594180597791},{"_id":"public/tags/const/index.html","hash":"5cf8bc70595690b48598ec9185d253caae2b4f24","modified":1594180597791},{"_id":"public/tags/变量作用域/index.html","hash":"0656f5926f56c6ef8857dbd1561648194132d3ab","modified":1594180597791},{"_id":"public/tags/JavaScript变量/index.html","hash":"df1ab92d26e8963c3d5d6346620c36ea082b697e","modified":1594180597791},{"_id":"public/tags/JavaScript-基础知识/index.html","hash":"18207a1ced25a11817bd89251bf70e4943832db4","modified":1594180597791},{"_id":"public/tags/function/index.html","hash":"e12b46a33bcee3dae57f0a626fba059be90f3d55","modified":1594180597791},{"_id":"public/tags/函数/index.html","hash":"6b128efc2762337466437152a379f0f6d2f31f55","modified":1594180597791},{"_id":"public/tags/JavaScript-函数/index.html","hash":"b59a057014ea0891e270b5fa4cd6d57108ffd94b","modified":1594180597791},{"_id":"public/tags/JavaScript-隐式转换/index.html","hash":"f16ce234b0c87f4a2a2995e5a92c0930dadd4457","modified":1594180597791},{"_id":"public/tags/JavaScript-检测数据类型/index.html","hash":"04056303ac922e8b3b1bf6d2563cc601c634f690","modified":1594180597791},{"_id":"public/tags/算法/index.html","hash":"4db75f4c0546c277d3f1ca785f660724eca23c4a","modified":1594180597791},{"_id":"public/tags/算法面试题/index.html","hash":"a97e2bb656d09f9b32f0c324a6513fa5c80b1c21","modified":1594180597791},{"_id":"public/tags/Leetcode/index.html","hash":"4a8db27ae7f7fde5c1604222a82d25d45cfb437d","modified":1594180597791},{"_id":"public/tags/VS-Code/index.html","hash":"d9f9c9a7b50764162575952870466c37ddc6d4a6","modified":1594180597791},{"_id":"public/tags/Visual-Studio-Code/index.html","hash":"ccc233a6c0e5a1ff98c7023be5c874df79b78746","modified":1594180597791},{"_id":"public/tags/algorithms/index.html","hash":"f2f840ef50df2ba2a498a52ccaf22ffcfcc401e4","modified":1594180597791},{"_id":"public/tags/Leetcode算法题/index.html","hash":"edced5a2da207dff75d015eff6c9349a345c7b7d","modified":1594180597791},{"_id":"public/tags/Leetcode-algorithms/index.html","hash":"74059ff8818a60ace1b9440d96b9eaa631d42cf0","modified":1594180597791},{"_id":"public/tags/前端/page/2/index.html","hash":"524025f30a91ff696ebd90e77bf04b5ff7bfb0b9","modified":1594180597791},{"_id":"public/tags/npm/index.html","hash":"33651812721ba3f9870202df1ab945098c0b6ad6","modified":1594180597791},{"_id":"public/tags/node/index.html","hash":"178583cfd4a9df35b76783454e6ac7cba17b3488","modified":1594180597791},{"_id":"public/tags/commits/index.html","hash":"499ee738ca1acc3868733784d5cd809c2669a1af","modified":1594180597791},{"_id":"public/tags/git-commits/index.html","hash":"a9a071222471bdeef74a8e3100389b5c3112c8d3","modified":1594180597791},{"_id":"public/tags/Function/index.html","hash":"50a26fc89b688bf33bfff8bea15a29bfa1babe86","modified":1594180597791},{"_id":"public/tags/IIFE/index.html","hash":"6f168d66a00c74aa1283b35b375d24a4e93ab789","modified":1594180597791},{"_id":"public/tags/立即执行函数/index.html","hash":"b8c593cbc6ec3e36af7101b9c498ccec13ad8446","modified":1594180597791},{"_id":"public/tags/JavaScript-函数作用域/index.html","hash":"52a4efa675321b24e2df6c073c6d872fc8a37684","modified":1594180597791},{"_id":"public/tags/CSS/index.html","hash":"dbb1ded40f9d53b8809875351ffaa5aa92d29d31","modified":1594180597791},{"_id":"public/tags/CSS-文本换行/index.html","hash":"fc4a0962541c65020d36b3f24a611cef33f24f9d","modified":1594180597791},{"_id":"public/tags/CSS-不换行/index.html","hash":"269ff8668a101116e984bd32f9b5c634400f19da","modified":1594180597791},{"_id":"public/tags/CSS-超出部分显示省略号/index.html","hash":"eeddf89f9dd397ad5c6aaad8cdb89674fcc80aed","modified":1594180597791},{"_id":"public/tags/前端基础/index.html","hash":"923b4a226f307431d74244549e6ef5c0ebbbbab1","modified":1594180597791},{"_id":"public/tags/JavaScript-基础/index.html","hash":"8571f4a62e5998efd5161fcdd02ba7eb305c28cd","modified":1594180597791},{"_id":"public/tags/ES6/index.html","hash":"521622bcd37cae085d32d1557f1723346fc1af85","modified":1594180597791},{"_id":"public/tags/arrow-function-expressions/index.html","hash":"746ac3e4906bafa9ad175e2b7e73f64bccae8b5b","modified":1594180597791},{"_id":"public/tags/JavaScript-执行机制/index.html","hash":"192f721fc90b61618a28d3ab7df4ed76ee14418e","modified":1594180597791},{"_id":"public/tags/JavaScript-event-loop/index.html","hash":"f281f6a2409ee72353a05c910080415dd55aec1c","modified":1594180597791},{"_id":"public/tags/CSS-BFC/index.html","hash":"f1f57805a472f62d89b02ad56fff51e5e1527554","modified":1594180597791},{"_id":"public/tags/CSS-Layout/index.html","hash":"746599964fd000d5153acbb704e871e505b69ab9","modified":1594180597791},{"_id":"public/tags/CSS-布局/index.html","hash":"42222c101a7bafe8fc2cded277c5a3559ffa29e2","modified":1594180597791},{"_id":"public/tags/CSS-块级格式上下文/index.html","hash":"56969724ce982005e13031a894e6a1359f0ef872","modified":1594180597791},{"_id":"public/tags/JavaScript-时间戳/index.html","hash":"432dfd6f7796d84419293cad157d6208e5d6236c","modified":1594180597791},{"_id":"public/tags/Mac/index.html","hash":"35ca11c4890da2363cdf6af7f12937506c563acb","modified":1594180597791},{"_id":"public/tags/MacBook-Pro/index.html","hash":"25085b8ce4efb6bb8a32c91a959d300b74bc85a5","modified":1594180597791},{"_id":"public/tags/macOS-Catalina/index.html","hash":"8eb2d48f78f0f6d97828602ead82161fa6a12911","modified":1594180597791},{"_id":"public/tags/Vue/index.html","hash":"d1e1df05cff2de8a7a05759f55cd180c415da818","modified":1594180597791},{"_id":"public/tags/Vue生命周期/index.html","hash":"546bf1a920b237c28829ca7d1e86dde8dfbb9c94","modified":1594180597791},{"_id":"public/tags/VueLifeClcle/index.html","hash":"8571f0180866cc1840c199b777565675a8e30261","modified":1594180597791},{"_id":"public/tags/Object/index.html","hash":"f7b7463892b51eefeea9107232151a80d367ce46","modified":1594180597791},{"_id":"public/tags/Create-object/index.html","hash":"cbc53a523ddcf833605eb5d7a77cdec800528128","modified":1594180597791},{"_id":"public/tags/JavaScript-object/index.html","hash":"ed1ad41e917f9a7e2346774d0f4ba2aefee5065e","modified":1594180597791},{"_id":"public/tags/创建对象/index.html","hash":"63d96e84cf4adaba3a044920bdb0ae9bbf4f7d8e","modified":1594180597791},{"_id":"public/tags/Terminal/index.html","hash":"1b10221183023f2dd5e7ef3980971159d36f8168","modified":1594180597791},{"_id":"public/tags/跨域/index.html","hash":"cdcdfe6386179b773a625c2d7d8d97f1f00213ed","modified":1594180597791},{"_id":"public/tags/浏览器跨域/index.html","hash":"2da45b092bd19890b25f6d63562d58c2e9f0dc71","modified":1594180597791},{"_id":"public/tags/CORS/index.html","hash":"ed1c083e19abdb98ae94cb70b26bedd4e1f59fe3","modified":1594180597791},{"_id":"public/tags/CSS-特殊性/index.html","hash":"e3e9da38b299da2a116a2d9b8b44ef79e5e5dc8c","modified":1594180597791},{"_id":"public/tags/CSS-继承/index.html","hash":"c54b59c7c7be1c535cdb2ffadc665eedfc0fc411","modified":1594180597791},{"_id":"public/tags/CSS-层叠/index.html","hash":"75e4b1cecd3eba8ccb6ad8cb38a4e663b3d9b900","modified":1594180597791},{"_id":"public/tags/CSS-结构/index.html","hash":"6ef85e51ae9f4c23342a86f69c64d6b7d137407d","modified":1594180597791},{"_id":"public/tags/CSS-特殊性计算/index.html","hash":"d37e123b26d9449028d17f7e1def66fc94f3cf82","modified":1594180597791},{"_id":"public/tags/CSS-Specificity/index.html","hash":"83dcd2a85e5adcd1ef3fae0120d645c44e66d073","modified":1594180597791},{"_id":"public/tags/CSS-Inheritance/index.html","hash":"a3609aebb412a7f02315ea88844710884ba1fa45","modified":1594180597791},{"_id":"public/tags/CSS-Cascading/index.html","hash":"e4f556e876c355ba424ad7745a3914c5d0c63ba5","modified":1594180597791},{"_id":"public/tags/CSS-Structure/index.html","hash":"6f92111af53e483a15b2a1659ed14401d8647542","modified":1594180597791},{"_id":"public/tags/JavaScript-this/index.html","hash":"c7c1a16037c2950e09786c998e8720fd27af3daa","modified":1594180597791},{"_id":"public/tags/JavaScript-作用域问题/index.html","hash":"0a718e79ff7b8e8ffda4cd363bf2df88d2623e86","modified":1594180597791},{"_id":"public/archives/index.html","hash":"05f72852a0ec8b53a102f873d06309cc99e8e021","modified":1594180597791},{"_id":"public/categories/index.html","hash":"ee094a3885a458f6798e189aefb5ae68b1141e2b","modified":1594180597791},{"_id":"public/projects/index.html","hash":"bacddb13737799c07e27ad4cf496029809b0d94b","modified":1594180597791},{"_id":"public/reading/index.html","hash":"46a22fdf70042bfccd179ffde36c9f6ccf13ae82","modified":1594180597791},{"_id":"public/tags/index.html","hash":"9412936663ccc9561872c102749100c6aece976a","modified":1594180597791},{"_id":"public/movies/index.html","hash":"36895eaea3703cc58b0026831cfc9677a3f942d2","modified":1594180597791},{"_id":"public/2020/07/08/JavaScript创建对象的几种方式/index.html","hash":"7d091b06a92a8a23cbaa43a048d01d970cf11922","modified":1594180597791},{"_id":"public/2020/07/08/MacOS终端的一些常用命令行操作/index.html","hash":"c88cacc8a3e028b167009fa50279b13bc4ff47cd","modified":1594180597791},{"_id":"public/2020/07/07/前端性能优化之雅虎军规/index.html","hash":"786b2ad909118a36200b0193f4cd47cca109085d","modified":1594180597791},{"_id":"public/2020/07/01/基于Vue-SEO的解决方案/index.html","hash":"bc3df28edd885331dfcbb2ab4e68969ac801d903","modified":1594180597791},{"_id":"public/2020/07/01/git将某分支的某次提交合并到另一个分支/index.html","hash":"0c94a38c392f9c72b7b0c2ba669f9d3c0e7139b4","modified":1594180597791},{"_id":"public/2020/07/01/浏览器跨域的解决方案/index.html","hash":"752fadb25cc89c3d015c0665957b50022dc4837a","modified":1594180597791},{"_id":"public/2020/07/01/Vue的生命周期过程/index.html","hash":"60bdd746aa73e8ecc3e495e80e2253c4052b917f","modified":1594180597791},{"_id":"public/2020/07/01/webpack中loader和plugin的区别是什么/index.html","hash":"057b3898489918763c1900e95c223a11fab8a404","modified":1594180597791},{"_id":"public/2020/06/30/彻底理解JavaScript函数的调用方式和传参方式/index.html","hash":"90aeec43e3d2bb1ad6704b15a444c9ac8b05bcd3","modified":1594180597791},{"_id":"public/2020/06/29/JavaScript中常用的继承方案/index.html","hash":"1a57bbdab26952efddfb3b3b5e0a3e474df3324e","modified":1594180597791},{"_id":"public/2020/06/28/深入理解CSS中BFC（Block-Formatting-Context）块级格式上下文/index.html","hash":"5ecc75b2429a7d5a3b236b89a94af18d60aa88ac","modified":1594180597791},{"_id":"public/2020/06/26/JavaScript实现斐波那契数列的几种方式/index.html","hash":"1f43a53d198d0af6378ae146c1b40d440a67b78f","modified":1594180597791},{"_id":"public/2020/06/25/ES6箭头函数/index.html","hash":"0ba4c8c9c89741bc5d4785f703f1558937edbcd6","modified":1594180597791},{"_id":"public/2020/04/29/Mac-外接显示器不响应问题/index.html","hash":"843ee83fae0600360f67be5e3a231436dc9c5e16","modified":1594180597791},{"_id":"public/2020/04/21/JavaScript-获取当前时间戳的几种方式/index.html","hash":"09fbd91f2688ceed3da24ea8ae18f64eda341797","modified":1594180597791},{"_id":"public/2020/04/10/CSS文本换行、不换行、超出部分显示省略号处理/index.html","hash":"fb4ac84b0146a8ab7df144cdb8bc8bb808ca0bef","modified":1594180597791},{"_id":"public/2020/02/29/JavaScript长字符串拆分并换行处理/index.html","hash":"4b033cd2d7871a1c2e551638ae50b95e8887d5f2","modified":1594180597791},{"_id":"public/2020/01/13/javascript-执行机制原理/index.html","hash":"6ee2e5da53ee0040b9dc4129c6be7b8d60403ad8","modified":1594180597791},{"_id":"public/2020/01/12/javascript-iife-immediately-invoked-function-expression-立即执行函数表达式/index.html","hash":"3a6cd8d293e100d8512cd07d56e43009cad6aea3","modified":1594180597791},{"_id":"public/2020/01/08/npm-install安装依赖包超过最大调用堆栈大小的error/index.html","hash":"a2fb61959861a4c2f070476c269fdca87ededaad","modified":1594180597791},{"_id":"public/2020/01/07/谈谈对javascript中this关键字的理解/index.html","hash":"a4ddeeb96ab73ccd628d6d9312e8ccd64e1cc40c","modified":1594180597791},{"_id":"public/2020/01/05/语义化git提交信息/index.html","hash":"a1d086203495e76ec2bd6f989c849a403c0178d1","modified":1594180597791},{"_id":"public/2019/12/18/如何优雅的在VS-Code刷Leetcode算法题库？/index.html","hash":"dc09a60411197f058ba2cf4469f06009ec501403","modified":1594180597791},{"_id":"public/2019/12/17/javascript阶乘（Factoral）函数实现/index.html","hash":"e2ae7cfe11111e52f156946e6eb5d891ec5e6f2a","modified":1594180597791},{"_id":"public/2019/12/17/javascript检测数据类型/index.html","hash":"5e8bb763739c1f1507cdc3b76f85f4e0ae0d31d6","modified":1594180597791},{"_id":"public/2019/12/17/javascript中隐式转换/index.html","hash":"326ed3b6602fb5422c07735bd002c17b8c720014","modified":1594180597791},{"_id":"public/2019/12/16/function/index.html","hash":"56fac1f29e425f08e73df062075cee6d5a3ca07a","modified":1594180597791},{"_id":"public/2019/12/06/let和const命令/index.html","hash":"5b20b61f3b303c541e2f83d846bf25e304f95538","modified":1594180597791},{"_id":"public/2019/12/01/javascript-回文函数实现/index.html","hash":"2d450d173f5b48f7546bd65bded662f5b4a8dc14","modified":1594180597791},{"_id":"public/2019/11/25/css-结构和层叠总结/index.html","hash":"7bc4b1026b007443c9e0ed883c3ddbd09882badd","modified":1594180597791},{"_id":"public/2019/11/23/git常用命令操作清单/index.html","hash":"a4ae2198e91618bf7592e0efcfb08f2e849ebff4","modified":1594180597791},{"_id":"public/2019/11/23/大话数据结构/index.html","hash":"17f8fbf4fe0679bc709a2c6a429dbbaf8fcddaa5","modified":1594180597791},{"_id":"public/2019/11/23/git遇到的一些问题/index.html","hash":"967533607b827dfc8ddd4a7f09e867d7b37fde15","modified":1594180597791},{"_id":"public/archives/page/2/index.html","hash":"21aab3761e36d6be722f25de9cbc923562c1923f","modified":1594180597791},{"_id":"public/archives/page/3/index.html","hash":"6ef9fb9f52861abdad05f8370814f9b7d0c569d2","modified":1594180597791},{"_id":"public/archives/2019/index.html","hash":"df16b98cf44f678f2f4978e34737445839cce333","modified":1594180597791},{"_id":"public/archives/2019/12/index.html","hash":"fe6792cd4a67f999148b8c135df3cf3f3f1d0464","modified":1594180597791},{"_id":"public/archives/2020/index.html","hash":"3f73f502684b689fdf21dae02e574de3a915356e","modified":1594180597791},{"_id":"public/archives/2020/page/2/index.html","hash":"79b4f73329310a88c4332d736297e466009d303a","modified":1594180597791},{"_id":"public/archives/2020/01/index.html","hash":"f30e09cbd5c321ed63b8da0ed4891c9b39a116fe","modified":1594180597791},{"_id":"public/archives/2020/06/index.html","hash":"085e1e1d7f08fdae2ef1cc1972a6ead248b59a4f","modified":1594180597791},{"_id":"public/archives/2020/07/index.html","hash":"7e0c527d676ec730136496744315f7f42cf1d6a0","modified":1594180597791},{"_id":"public/categories/前端/index.html","hash":"dd6402a48d663ead6658035b39876cab9e9537ac","modified":1594180597791},{"_id":"public/categories/前端/page/2/index.html","hash":"f963d405d4fa65d87d68842d99220a3d8579b27c","modified":1594180597791},{"_id":"public/categories/JavaScript/index.html","hash":"103a30e7775df707932dc26f5b0cc90ceca4c111","modified":1594180597791},{"_id":"public/index.html","hash":"eba6a211ed2b7f0785b5ca8b821b25c18569d215","modified":1594180597791},{"_id":"public/page/2/index.html","hash":"a5843496661bc0b7ce368b70734aec89a4958f06","modified":1594180597791},{"_id":"public/page/3/index.html","hash":"4d619c7a06612d0cd43ddab7ca7ce480f1c80f33","modified":1594180597791},{"_id":"public/page/4/index.html","hash":"9efb6df2f9d79ddf4b6363d883d76e7ed96182dd","modified":1594180597791},{"_id":"public/tags/前端开发/index.html","hash":"17caf79b6fb3540f8731b8f4242341a063474522","modified":1594180597791},{"_id":"public/tags/前端面试题/index.html","hash":"5cf4b56577e06d3ad2839f93ed0b4044b2eed5df","modified":1594180597791},{"_id":"public/tags/JavaScript/index.html","hash":"5e8ca88de6a3e39f910bb3392cf010e10f9a105c","modified":1594180597791},{"_id":"public/tags/前端/index.html","hash":"6e868a64eb8418a503bd704581db9a2cc0d6f84e","modified":1594180597791},{"_id":"public/css/css-content-formatting.scss","hash":"4fc0cb8fa66b9159b9d124b975a83f7cb3444aa9","modified":1594180597791},{"_id":"public/README.mdown","hash":"86f27ebf7c5f2e10e9189e8e380e049bd4341e0b","modified":1594180597791},{"_id":"public/CNAME","hash":"9c42067a7f23aae701d2f62f396f3864ed482d90","modified":1594180597791},{"_id":"public/fonts/iconfont.ttf","hash":"21cca20a2e5f55cff6ea5b2edf3654f19b475061","modified":1594180597791},{"_id":"public/fonts/iconfont.eot","hash":"2964b7dde5e8f7b36c2f845d04f36288a0bafdcf","modified":1594180597791},{"_id":"public/fonts/iconfont.svg","hash":"3423759179fe2b5d00acf5075a0af5767d9080b4","modified":1594180597791},{"_id":"public/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1594180597791},{"_id":"public/fonts/iconfont.woff","hash":"3bdd5855bea2aa82a10385c5e23b9a5b79e66274","modified":1594180597791},{"_id":"public/fonts/iconfont.woff2","hash":"ac3038eabf751232c77df63c3b7ffba6c218649b","modified":1594180597791},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1594180597791},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1594180597791},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1594180597791},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1594180597791},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1594180597791},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1594180597791},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1594180597791},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1594180597791},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1594180597791},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1594180597791},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1594180597791},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1594180597791},{"_id":"public/images/codepen_logo.png","hash":"7e31bfad580066f96801984b63266a815c3a99e1","modified":1594180597791},{"_id":"public/images/edu_logo.jpg","hash":"7fc5b0209e79cd0d72d9751e2376c44a1c5eb02f","modified":1594180597791},{"_id":"public/images/favicon.ico","hash":"0d61e34813f17d7838f63f1998dde83295f25691","modified":1594180597791},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1594180597791},{"_id":"public/images/item_project_01.png","hash":"043aca0b6c7319991dab751b18eb46a14412c6fe","modified":1594180597791},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1594180597791},{"_id":"public/images/logo_cheilpengtai.png","hash":"e1a658ea2f73831ed7cf46e50102943375daf7f7","modified":1594180597791},{"_id":"public/images/logo_paiyue_system.png","hash":"000896dd6d2faa2c4ee445c3383b2e800f5a546b","modified":1594180597791},{"_id":"public/images/logo_cheil_pengtai.png","hash":"8f96926f87292bf63ebf65cee907f56681dfc693","modified":1594180597791},{"_id":"public/images/logo_paiyue.png","hash":"420b677ef3ebc1bdba230c885dbd497185bb3b4b","modified":1594180597791},{"_id":"public/images/logo_learnkpy.png","hash":"5d6f873fe44b9ce50ea9343d1faf5c9e85612692","modified":1594180597791},{"_id":"public/images/logo_siemens_mini.png","hash":"42a99d365853041298d1740313df6d19b6469e75","modified":1594180597791},{"_id":"public/images/logo_pureget_system.png","hash":"d358a338195c46f57bc91d8205bbd97d1dfeead6","modified":1594180597791},{"_id":"public/images/logo_zyb.png","hash":"9a45c1a0dfcc2004498c34df9c72227b9e279235","modified":1594180597791},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1594180597791},{"_id":"public/images/logo_zyb_systems.png","hash":"517000e43cfac2d55a673da76d407f5b5bcac482","modified":1594180597791},{"_id":"public/images/logo_zyb_yike.png","hash":"94794d7be5e31d8d18a003d4ed40cb6e52ace295","modified":1594180597791},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1594180597791},{"_id":"public/images/samsung_logo.png","hash":"70f954438251e88e231d6f3c0e5cbc7f6100de63","modified":1594180597791},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1594180597791},{"_id":"public/images/qqlogo_2x.png","hash":"bc3b065bfa1e060149a8a36f50300a518966acf4","modified":1594180597791},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1594180597791},{"_id":"public/images/tencent_logo.png","hash":"10c41ecc83f42b67b884589880527c53c9a3f687","modified":1594180597791},{"_id":"public/images/yahoo_preformance_rules.png","hash":"2c6dce46f82f1bc4102d7fb6b5fe63ce85339eea","modified":1594180597791},{"_id":"public/images/vue_life_cycle.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1594180597791},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1594180597791},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1594180597791},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1594180597791},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1594180597791},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1594180597791},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1594180597791},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1594180597791},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1594180597791},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1594180597791},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1594180597791},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1594180597791},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1594180597791},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1594180597791},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1594180597791},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1594180597791},{"_id":"public/images/my_photo_1.png","hash":"5a3f68b88c2624d08dcfa0afc875bb97717fe0e1","modified":1594180597791},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1594180597791},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1594180597791},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1594180597791},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1594180597791},{"_id":"public/css/css-content-formatting.css","hash":"7fa986f9219f83957e5a197bd4b8fd4c3c343c6e","modified":1594180597791},{"_id":"public/css/reset.css","hash":"084929141e393622150f50ebee6179e19fd8f929","modified":1594180597791},{"_id":"public/css/tools.css","hash":"d705b4015c5208653db2513e0b147b38a1368f10","modified":1594180597791},{"_id":"public/css/normalize.css","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1594180597791},{"_id":"public/js/resume.js","hash":"e4992f8d4c9b3c2d35ce558a37eb4f7b409d11d7","modified":1594180597791},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1594180597791},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1594180597791},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1594180597791},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1594180597791},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1594180597791},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1594180597791},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1594180597791},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1594180597791},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1594180597791},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1594180597791},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1594180597791},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1594180597791},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1594180597791},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1594180597791},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1594180597791},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1594180597791},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1594180597791},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1594180597791},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1594180597791},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1594180597791},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1594180597791},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1594180597791},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1594180597791},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1594180597791},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1594180597791},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1594180597791},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1594180597791},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1594180597791},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/CSS3-auxiliary-line.html","hash":"2c9995408b91f21f186c5b6967b66973a9db598b","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/back-top-up.html","hash":"cf17493327c423baae9e4e4e4fb66bed1a25af84","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/calendar.html","hash":"49ac62d805e5791e5a7346c276b343912e73c0c2","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/border-effect.html","hash":"569665a82713d8698b0c3498249d307ed19e0df5","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/button.html","hash":"ca5bacf4326750ddcd9c144db69ad2c969353d3a","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-holy-grail-layout.html","hash":"70715439b8dae2f75b15c5ffa146935c66c8547d","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-counter.html","hash":"5fe5f881a2c77953d19302f54b8c2903d14f90f0","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-grid-layout.html","hash":"55320b6b8ca26ffb84ad086f6d08b241ac348ce7","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-horizontal-sliding-navbar.html","hash":"4f5edd2ea77529a0afc50acdc8e1947c2069e65b","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-square-arrangement.html","hash":"bf7f0a93c604303a06511fe42501cfeb8be80680","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-streaming-layout.html","hash":"3c2eab168a297f0fae1b988f36674d0c671ea03d","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-steps.html","hash":"a40010d4b668aa4d7239006fbbcfe37cb8c3e600","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-three-column- layout.html","hash":"6d02b95c2137dee979be3f6d05f85031a32c86ef","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-pop-dialog.html","hash":"92e6725fcaaac86595df3f3eaad859337f5e2e8d","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-variable-width-block-element-horizontally-centered-vertically.html","hash":"ba108d4614d1460600c3fdcb6e2f8b9b8d700d63","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-triangle.html","hash":"29a794219b1313eb51214ca94055e66c5af2d407","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css3-box-layout-column-aliquots.html","hash":"57800f17694e90b0d4ce609fbfdac1b61e308cd9","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/element-horizontal-vertical-center.html","hash":"1b48410d3431ec6053b1822707343748700330dd","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/css-two-column-contour-layout.html","hash":"bbb081b4dc5d2f98d89e94f6ac1d566bbf11c0cd","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/fixed-width-elements-horizontally-vertically-centered.html","hash":"4a2e7b620c44642de87b74fa2138fc8da50cf70e","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/hurdling-or-cross-column-layouts.html","hash":"baa94863f773bf8636fde43d0645a4abb09040cb","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/fanfou-birthday-cake.html","hash":"6b43060e6b2453ec1c569eef6308b3447c2389d9","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/multiple-solutions-square-arrangement.html","hash":"f384ea4691964ddd548e8d2b86f4db50fbf84506","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/hover-effect.html","hash":"ad109cf6391931a245af5d96cd8cd09a5a2ecfd5","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/no-fixed-width-to-achieve-square.html","hash":"7d245d817995b9fb4064fa6850d5adec0e0cee19","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/login-box-model.html","hash":"99db3c19e591af14e69873cdeddd277963a509ce","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/one-element-completes-effect.html","hash":"1dd813bbcbdfda9ddc9589db24620e6da1e749bb","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/spinner-loading.html","hash":"6ea51fb5d599fedcd1540cbfea94649e4ca83700","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/pre-loading.html","hash":"87d38e44a9f548a0894628eaeca59e265ef297cc","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/rgba-opacity.html","hash":"c3492efd13009a6339e6f19f1d6b9ff789fd28dd","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-3.html","hash":"8536dbf63f46db4acfb17cb2099e97fb8d94814b","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-1.html","hash":"c181be159cc9143fc7580501cfe7dfe323df3f40","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-2.html","hash":"5ae19375e584b90a7e4a7101cf9753a6c0d4e660","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/sticky-page-footer-layout-4.html","hash":"41e6aa7ecb1ee5f7d15798047d23d72fa78a2a52","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/text-shadow.html","hash":"e9ec87c48a18e612f4758a1285caa7fe5832584b","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/text-transform.html","hash":"b6565c4df4dfca79bb5656e8a3beb5a564634be7","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/text-vertical-centering.html","hash":"937b7ce389238f7c7e755537609a323d3b918276","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/two-columns-layout.html","hash":"8230f883be1d4dcf821d857cc0f66097f212b422","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/web-site-layout.html","hash":"e9bf501173a1601421ded38c6127993762c82456","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/js-demo/javascript-palindrome.html","hash":"f6457181115f0f158acb00366f077b5b8c370874","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/js-demo/javascript-on-stack.html","hash":"856cbd9b2e65cef617324565f99fbf716f24a53d","modified":1594180597791},{"_id":"public/demo/css/css_specificity/01.html","hash":"5c0c243ca3e1fc5d9313c706f4a927994812a27e","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/css-demo/switch-button.html","hash":"521b53f8c4e2e180748c5e8118b79cb8dc57b8ac","modified":1594180597791},{"_id":"public/some-things-about-css-and-js/js-demo/javascript-array-reduce-methods.html","hash":"6100ce0a893647493469d8970b47b820ebcc718a","modified":1594180597791},{"_id":"public/css/main.css","hash":"472ded41f4fa6f996fb47da37bb5ef6925a62545","modified":1594180597791},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1594180597791},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1594180597791},{"_id":"public/images/prototype_chain.png","hash":"e05130536db1162cc7c39d4d6edad9fe0252d6fa","modified":1594180597791},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1594180597791},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1594180597791},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1594180597791},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1594180597791},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1594180597791},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1594180597791},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1594180597791},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1594180597791},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1594180597791},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1594180597791},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1594180597791},{"_id":"public/resume/project.html","hash":"4514a8b96ddfcdab73483c0eed169f79bdfc9dac","modified":1594180597791},{"_id":"public/css/resume.css","hash":"0bdf072dc1c33da7b157dc0202d67a58fe871bf8","modified":1594180597791},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1594180597791},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1594180597791},{"_id":"public/resume/index.html","hash":"e1a4f36e74561acaa650be18af9730ba2e418722","modified":1594180597791},{"_id":"public/css/font-awesome-4.7.0.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1594180597791},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1594180597791},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1594180597791},{"_id":"public/pdf/前端开发工程师-谢长春-13671012707.pdf","hash":"eecbfb7636441b355cf7200c08bdfa295bb16d3c","modified":1594180597791},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1594180597791},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1594180597791},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1594180597791},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1594180597791},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1594180597791},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1594180597791},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1594180597791},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1594180597791},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1594180597791},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1594180597791},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1594180597791},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1594180597791},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1594180597791},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1594180597791},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1594180597791},{"_id":"public/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1594180597791},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1594180597791},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1594180597791},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1594180597791}],"Category":[{"name":"Git","_id":"ckcctyvsm0007m5sngoe82plg"},{"name":"数据结构","_id":"ckcctyvtl000dm5sn8s1e3du4"},{"name":"前端","_id":"ckcctyvtw000im5sn8mnt72zw"},{"name":"读书笔记","_id":"ckcctyvv50015m5sne2a021od"},{"name":"JavaScript","_id":"ckcctyvvk001am5sn65b0fz8e"},{"name":"前端算法","_id":"ckcctyvw1001mm5sn51tg7yed"},{"name":"npm","_id":"ckcctyvwc001um5sngfe811lg"},{"name":"CSS","_id":"ckcctyvxc002fm5snde1ucoc2"},{"name":"Mac","_id":"ckcctyvy9003em5sn4ac42ft6"},{"name":"计算机科学","_id":"ckcctyvyd003km5sn7qrngvtk"},{"name":"Vue","_id":"ckcctyvyg003qm5sn10k58xrq"},{"name":"Webpack","_id":"ckcctyvyj003xm5sn77jjhogi"},{"name":"Leetcode","_id":"ckcctyvyn0043m5sndvq9b4mu"},{"name":"前端性能优化","_id":"ckcctyvyq0048m5sn830jhsi6"},{"name":"HHTP","_id":"ckcctyvyy004gm5sncnu1ff1k"},{"name":"macOS","_id":"ckcctyvz2004lm5sn1rjq5gmr"},{"name":"algorithms","_id":"ckcctyvz6004qm5sn5ui8bmou"},{"name":"前端基础","_id":"ckcctyvzc004ym5sn9iaw8sho"},{"name":"硬件问题","_id":"ckcctyvzf0051m5sn84du1zjx"},{"name":"VS Code","_id":"ckcctyvzi0057m5sn883uccr4"},{"name":"Leetcode-algorithms","_id":"ckcctyvzu005gm5sn59z2a6tf"}],"Data":[],"Page":[{"title":"404 Not Found Page","date":"2019-11-23T17:35:39.000Z","type":404,"layout":"404","_content":"","source":"404/index.md","raw":"---\ntitle: 404 Not Found Page\ndate: 2019-11-24 01:35:39\ntype: 404\nlayout: \"404\"\n---\n","updated":"2019-11-27T08:21:02.746Z","path":"404/index.html","comments":1,"_id":"ckcctyvrj0000m5sngqsg1azw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"The Archives Page","date":"2019-11-26T13:11:12.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: The Archives Page\ndate: 2019-11-26 21:11:12\ntype: archives\nlayout: \"archives\"\n---","updated":"2019-11-27T08:19:36.527Z","path":"archives/index.html","comments":1,"_id":"ckcctyvs30002m5sn57v3eee2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"The Categories Page","date":"2019-11-23T17:35:25.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: The Categories Page\ndate: 2019-11-24 01:35:25\ntype: categories\nlayout: \"categories\"\n---\n","updated":"2019-11-27T08:19:52.519Z","path":"categories/index.html","comments":1,"_id":"ckcctyvsg0005m5sngul04fz2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"The Projects Page","date":"2019-11-27T08:14:50.000Z","type":"projects","category":"projects","layout":"projects","_content":"\n## CSS\n\n### CSS Demo\n\n**一些Codepen Demo效果，及常见的CSS布局解决方案**\n+ [*CSS 一个简单的Pop Model效果*](../some-things-about-css-and-js/css-demo/css-pop-dialog.html)\n+ [*返回顶部按钮效果*](../some-things-about-css-and-js/css-demo/back-top-up.html)\n+ [*一个元素不同方案实现边框效果*](../some-things-about-css-and-js/css-demo/border-effect.html)\n+ [*一个元素实现button*](../some-things-about-css-and-js/css-demo/button.html)\n+ [*用表格画一个CSS Calendar*](../some-things-about-css-and-js/css-demo/calendar.html)\n+ [*CSS Counter 计数器*](../some-things-about-css-and-js/css-demo/css-counter.html)\n+ [*CSS Holy Grail Layout 圣杯布局*](../some-things-about-css-and-js/css-demo/css-holy-grail-layout.html)\n+ [*移动端水平滑动导航条*](../some-things-about-css-and-js/css-demo/css-horizontal-sliding-navbar.html)\n+ [*容器内等比例分配正方形*](../some-things-about-css-and-js/css-demo/css-square-arrangement.html)\n+ [*`text-align:justify`实现步骤列*](../some-things-about-css-and-js/css-demo/css-steps.html)\n+ [*CSS 流式布局*](../some-things-about-css-and-js/css-demo/css-streaming-layout.html)\n+ [*用一个元素画三角形*](../some-things-about-css-and-js/css-demo/css-triangle.html)\n+ [*左右两栏布局，左边固定宽度，右边自适应*](../some-things-about-css-and-js/css-demo/css-two-column-contour-layout.html)\n+ [*简单的CSS3 Box-Layout 弹性盒模型布局*](../some-things-about-css-and-js/css-demo/css3-box-layout-column-aliquots.html)\n+ [*CSS3 \b画网格线*](../some-things-about-css-and-js/css-demo/CSS3-auxiliary-line.html)\n+ [*让一个不定宽高元素水平垂直居中*](../some-things-about-css-and-js/css-demo/element-horizontal-vertical-center.html)\n+ [*多种方案实现不定宽高元素水平垂直都居中*](../some-things-about-css-and-js/css-demo/css-variable-width-block-element-horizontally-centered-vertically.html)\n+ [*多种方案实现定宽高元素水平垂直都居中*](../some-things-about-css-and-js/css-demo/fixed-width-elements-horizontally-vertically-centered.html)\n+ [*饭否十周年生日蛋糕*](../some-things-about-css-and-js/css-demo/fanfou-birthday-cake.html)\n+ [*一个hover动画的Button*](../some-things-about-css-and-js/css-demo/hover-effect.html)\n+ [*多种方案实现跨栏或跨列布局*](../some-things-about-css-and-js/css-demo/hurdling-or-cross-column-layouts.html)\n+ [*一个简单的Login Model登陆模态框*](../some-things-about-css-and-js/css-demo/login-box-model.html)\n+ [*多种方案实现在规定容器内等比例排列元素*](../some-things-about-css-and-js/css-demo/multiple-solutions-square-arrangement.html)\n+ [*不定宽高实现等比例正方形排列*](../some-things-about-css-and-js/css-demo/no-fixed-width-to-achieve-square.html)\n+ [*一个元素实现的效果*](../some-things-about-css-and-js/css-demo/one-element-completes-effect.html)\n+ [*RGBA和Opacity的区别*](../some-things-about-css-and-js/css-demo/rgba-opacity.html)\n+ [*Preloader Loading进度效果*](../some-things-about-css-and-js/css-demo/pre-loading.html)\n+ [*Spinner Loading进度效果*](../some-things-about-css-and-js/css-demo/spinner-loading.html)\n+ [*CSS 实现iPhone Switch 开关按钮*](../some-things-about-css-and-js/css-demo/switch-button.html)\n+ [*CSS3 Text-Shadow 实现字体集效果*](../some-things-about-css-and-js/css-demo/text-shadow.html)\n+ [*text-transform 属性*](../some-things-about-css-and-js/css-demo/text-transform.html)\n+ [*多行文本水平垂直居中效果*](../some-things-about-css-and-js/css-demo/text-vertical-centering.html)\n+ [*多种方案实现两栏布局，左侧固定列，右侧自适应*](../some-things-about-css-and-js/css-demo/two-columns-layout.html)\n+ [*常见的网站页面结构*](../some-things-about-css-and-js/css-demo/web-site-layout.html)\n+ [*粘性页脚（页脚始终保持在底部）01*](../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-1.html)\n+ [*粘性页脚（页脚始终保持在底部）02*](../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-2.html)\n+ [*粘性页脚（页脚始终保持在底部）03*](../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-3.html)\n+ [*粘性页脚（页脚始终保持在底部）04*](../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-4.html)\n\n## JavaScript\n\n### 常见的一些JavaScript算法Demo\n\n+ [*JavaScript 字符串回文实现*](../some-things-about-css-and-js/js-demo/javascript-palindrome.html)\n","source":"projects/index.md","raw":"---\ntitle: The Projects Page\ndate: 2019-11-27 16:14:50\ntype: projects\ncategory: projects\nlayout: \"projects\"\n---\n\n## CSS\n\n### CSS Demo\n\n**一些Codepen Demo效果，及常见的CSS布局解决方案**\n+ [*CSS 一个简单的Pop Model效果*](../some-things-about-css-and-js/css-demo/css-pop-dialog.html)\n+ [*返回顶部按钮效果*](../some-things-about-css-and-js/css-demo/back-top-up.html)\n+ [*一个元素不同方案实现边框效果*](../some-things-about-css-and-js/css-demo/border-effect.html)\n+ [*一个元素实现button*](../some-things-about-css-and-js/css-demo/button.html)\n+ [*用表格画一个CSS Calendar*](../some-things-about-css-and-js/css-demo/calendar.html)\n+ [*CSS Counter 计数器*](../some-things-about-css-and-js/css-demo/css-counter.html)\n+ [*CSS Holy Grail Layout 圣杯布局*](../some-things-about-css-and-js/css-demo/css-holy-grail-layout.html)\n+ [*移动端水平滑动导航条*](../some-things-about-css-and-js/css-demo/css-horizontal-sliding-navbar.html)\n+ [*容器内等比例分配正方形*](../some-things-about-css-and-js/css-demo/css-square-arrangement.html)\n+ [*`text-align:justify`实现步骤列*](../some-things-about-css-and-js/css-demo/css-steps.html)\n+ [*CSS 流式布局*](../some-things-about-css-and-js/css-demo/css-streaming-layout.html)\n+ [*用一个元素画三角形*](../some-things-about-css-and-js/css-demo/css-triangle.html)\n+ [*左右两栏布局，左边固定宽度，右边自适应*](../some-things-about-css-and-js/css-demo/css-two-column-contour-layout.html)\n+ [*简单的CSS3 Box-Layout 弹性盒模型布局*](../some-things-about-css-and-js/css-demo/css3-box-layout-column-aliquots.html)\n+ [*CSS3 \b画网格线*](../some-things-about-css-and-js/css-demo/CSS3-auxiliary-line.html)\n+ [*让一个不定宽高元素水平垂直居中*](../some-things-about-css-and-js/css-demo/element-horizontal-vertical-center.html)\n+ [*多种方案实现不定宽高元素水平垂直都居中*](../some-things-about-css-and-js/css-demo/css-variable-width-block-element-horizontally-centered-vertically.html)\n+ [*多种方案实现定宽高元素水平垂直都居中*](../some-things-about-css-and-js/css-demo/fixed-width-elements-horizontally-vertically-centered.html)\n+ [*饭否十周年生日蛋糕*](../some-things-about-css-and-js/css-demo/fanfou-birthday-cake.html)\n+ [*一个hover动画的Button*](../some-things-about-css-and-js/css-demo/hover-effect.html)\n+ [*多种方案实现跨栏或跨列布局*](../some-things-about-css-and-js/css-demo/hurdling-or-cross-column-layouts.html)\n+ [*一个简单的Login Model登陆模态框*](../some-things-about-css-and-js/css-demo/login-box-model.html)\n+ [*多种方案实现在规定容器内等比例排列元素*](../some-things-about-css-and-js/css-demo/multiple-solutions-square-arrangement.html)\n+ [*不定宽高实现等比例正方形排列*](../some-things-about-css-and-js/css-demo/no-fixed-width-to-achieve-square.html)\n+ [*一个元素实现的效果*](../some-things-about-css-and-js/css-demo/one-element-completes-effect.html)\n+ [*RGBA和Opacity的区别*](../some-things-about-css-and-js/css-demo/rgba-opacity.html)\n+ [*Preloader Loading进度效果*](../some-things-about-css-and-js/css-demo/pre-loading.html)\n+ [*Spinner Loading进度效果*](../some-things-about-css-and-js/css-demo/spinner-loading.html)\n+ [*CSS 实现iPhone Switch 开关按钮*](../some-things-about-css-and-js/css-demo/switch-button.html)\n+ [*CSS3 Text-Shadow 实现字体集效果*](../some-things-about-css-and-js/css-demo/text-shadow.html)\n+ [*text-transform 属性*](../some-things-about-css-and-js/css-demo/text-transform.html)\n+ [*多行文本水平垂直居中效果*](../some-things-about-css-and-js/css-demo/text-vertical-centering.html)\n+ [*多种方案实现两栏布局，左侧固定列，右侧自适应*](../some-things-about-css-and-js/css-demo/two-columns-layout.html)\n+ [*常见的网站页面结构*](../some-things-about-css-and-js/css-demo/web-site-layout.html)\n+ [*粘性页脚（页脚始终保持在底部）01*](../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-1.html)\n+ [*粘性页脚（页脚始终保持在底部）02*](../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-2.html)\n+ [*粘性页脚（页脚始终保持在底部）03*](../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-3.html)\n+ [*粘性页脚（页脚始终保持在底部）04*](../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-4.html)\n\n## JavaScript\n\n### 常见的一些JavaScript算法Demo\n\n+ [*JavaScript 字符串回文实现*](../some-things-about-css-and-js/js-demo/javascript-palindrome.html)\n","updated":"2020-01-12T04:43:59.264Z","path":"projects/index.html","comments":1,"_id":"ckcctyvsq0008m5snetjyg0s1","content":"<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS-Demo\"><a href=\"#CSS-Demo\" class=\"headerlink\" title=\"CSS Demo\"></a>CSS Demo</h3><p><strong>一些Codepen Demo效果，及常见的CSS布局解决方案</strong></p>\n<ul>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-pop-dialog.html\"><em>CSS 一个简单的Pop Model效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/back-top-up.html\"><em>返回顶部按钮效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/border-effect.html\"><em>一个元素不同方案实现边框效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/button.html\"><em>一个元素实现button</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/calendar.html\"><em>用表格画一个CSS Calendar</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-counter.html\"><em>CSS Counter 计数器</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-holy-grail-layout.html\"><em>CSS Holy Grail Layout 圣杯布局</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-horizontal-sliding-navbar.html\"><em>移动端水平滑动导航条</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-square-arrangement.html\"><em>容器内等比例分配正方形</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-steps.html\"><em><code>text-align:justify</code>实现步骤列</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-streaming-layout.html\"><em>CSS 流式布局</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-triangle.html\"><em>用一个元素画三角形</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-two-column-contour-layout.html\"><em>左右两栏布局，左边固定宽度，右边自适应</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css3-box-layout-column-aliquots.html\"><em>简单的CSS3 Box-Layout 弹性盒模型布局</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/CSS3-auxiliary-line.html\"><em>CSS3 \b画网格线</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/element-horizontal-vertical-center.html\"><em>让一个不定宽高元素水平垂直居中</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-variable-width-block-element-horizontally-centered-vertically.html\"><em>多种方案实现不定宽高元素水平垂直都居中</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/fixed-width-elements-horizontally-vertically-centered.html\"><em>多种方案实现定宽高元素水平垂直都居中</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/fanfou-birthday-cake.html\"><em>饭否十周年生日蛋糕</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/hover-effect.html\"><em>一个hover动画的Button</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/hurdling-or-cross-column-layouts.html\"><em>多种方案实现跨栏或跨列布局</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/login-box-model.html\"><em>一个简单的Login Model登陆模态框</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/multiple-solutions-square-arrangement.html\"><em>多种方案实现在规定容器内等比例排列元素</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/no-fixed-width-to-achieve-square.html\"><em>不定宽高实现等比例正方形排列</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/one-element-completes-effect.html\"><em>一个元素实现的效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/rgba-opacity.html\"><em>RGBA和Opacity的区别</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/pre-loading.html\"><em>Preloader Loading进度效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/spinner-loading.html\"><em>Spinner Loading进度效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/switch-button.html\"><em>CSS 实现iPhone Switch 开关按钮</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/text-shadow.html\"><em>CSS3 Text-Shadow 实现字体集效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/text-transform.html\"><em>text-transform 属性</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/text-vertical-centering.html\"><em>多行文本水平垂直居中效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/two-columns-layout.html\"><em>多种方案实现两栏布局，左侧固定列，右侧自适应</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/web-site-layout.html\"><em>常见的网站页面结构</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-1.html\"><em>粘性页脚（页脚始终保持在底部）01</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-2.html\"><em>粘性页脚（页脚始终保持在底部）02</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-3.html\"><em>粘性页脚（页脚始终保持在底部）03</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-4.html\"><em>粘性页脚（页脚始终保持在底部）04</em></a></li>\n</ul>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"常见的一些JavaScript算法Demo\"><a href=\"#常见的一些JavaScript算法Demo\" class=\"headerlink\" title=\"常见的一些JavaScript算法Demo\"></a>常见的一些JavaScript算法Demo</h3><ul>\n<li><a href=\"../some-things-about-css-and-js/js-demo/javascript-palindrome.html\"><em>JavaScript 字符串回文实现</em></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"CSS-Demo\"><a href=\"#CSS-Demo\" class=\"headerlink\" title=\"CSS Demo\"></a>CSS Demo</h3><p><strong>一些Codepen Demo效果，及常见的CSS布局解决方案</strong></p>\n<ul>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-pop-dialog.html\"><em>CSS 一个简单的Pop Model效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/back-top-up.html\"><em>返回顶部按钮效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/border-effect.html\"><em>一个元素不同方案实现边框效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/button.html\"><em>一个元素实现button</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/calendar.html\"><em>用表格画一个CSS Calendar</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-counter.html\"><em>CSS Counter 计数器</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-holy-grail-layout.html\"><em>CSS Holy Grail Layout 圣杯布局</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-horizontal-sliding-navbar.html\"><em>移动端水平滑动导航条</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-square-arrangement.html\"><em>容器内等比例分配正方形</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-steps.html\"><em><code>text-align:justify</code>实现步骤列</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-streaming-layout.html\"><em>CSS 流式布局</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-triangle.html\"><em>用一个元素画三角形</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-two-column-contour-layout.html\"><em>左右两栏布局，左边固定宽度，右边自适应</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css3-box-layout-column-aliquots.html\"><em>简单的CSS3 Box-Layout 弹性盒模型布局</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/CSS3-auxiliary-line.html\"><em>CSS3 \b画网格线</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/element-horizontal-vertical-center.html\"><em>让一个不定宽高元素水平垂直居中</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/css-variable-width-block-element-horizontally-centered-vertically.html\"><em>多种方案实现不定宽高元素水平垂直都居中</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/fixed-width-elements-horizontally-vertically-centered.html\"><em>多种方案实现定宽高元素水平垂直都居中</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/fanfou-birthday-cake.html\"><em>饭否十周年生日蛋糕</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/hover-effect.html\"><em>一个hover动画的Button</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/hurdling-or-cross-column-layouts.html\"><em>多种方案实现跨栏或跨列布局</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/login-box-model.html\"><em>一个简单的Login Model登陆模态框</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/multiple-solutions-square-arrangement.html\"><em>多种方案实现在规定容器内等比例排列元素</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/no-fixed-width-to-achieve-square.html\"><em>不定宽高实现等比例正方形排列</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/one-element-completes-effect.html\"><em>一个元素实现的效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/rgba-opacity.html\"><em>RGBA和Opacity的区别</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/pre-loading.html\"><em>Preloader Loading进度效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/spinner-loading.html\"><em>Spinner Loading进度效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/switch-button.html\"><em>CSS 实现iPhone Switch 开关按钮</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/text-shadow.html\"><em>CSS3 Text-Shadow 实现字体集效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/text-transform.html\"><em>text-transform 属性</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/text-vertical-centering.html\"><em>多行文本水平垂直居中效果</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/two-columns-layout.html\"><em>多种方案实现两栏布局，左侧固定列，右侧自适应</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/web-site-layout.html\"><em>常见的网站页面结构</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-1.html\"><em>粘性页脚（页脚始终保持在底部）01</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-2.html\"><em>粘性页脚（页脚始终保持在底部）02</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-3.html\"><em>粘性页脚（页脚始终保持在底部）03</em></a></li>\n<li><a href=\"../some-things-about-css-and-js/css-demo/sticky-page-footer-layout-4.html\"><em>粘性页脚（页脚始终保持在底部）04</em></a></li>\n</ul>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h3 id=\"常见的一些JavaScript算法Demo\"><a href=\"#常见的一些JavaScript算法Demo\" class=\"headerlink\" title=\"常见的一些JavaScript算法Demo\"></a>常见的一些JavaScript算法Demo</h3><ul>\n<li><a href=\"../some-things-about-css-and-js/js-demo/javascript-palindrome.html\"><em>JavaScript 字符串回文实现</em></a></li>\n</ul>\n"},{"title":"","date":"2019-11-23T19:21:54.000Z","type":"reading","category":"reading","layout":"reading","_content":"\n\n\n## Literary / 文学\n---\n\n**[《北野武的小酒馆》/ 北野武](https://book.douban.com/subject/27174130/)**\n\n> *「 “多美啊，要是我能像那颗星星一般闪闪发光就好了。” 仰望星空的人或许会这么说，但那颗星星却在那里痛苦不堪。要知道，它正以几亿度的热量在燃烧啊。而且，它必须一直这么光辉下去，直至热量全部燃尽。」 ———— [《北野武的小酒馆》/ 北野武](https://book.douban.com/subject/27174130/)*\n\n**[《繁花》/ 金宇澄](https://book.douban.com/subject/22714154/)**\n\n> *「独上阁楼，最好是夜里。《阿飞正传》结尾，梁朝伟骑马觅马，英雄暗老，电灯下面数钞票，数清一沓，放进西装内袋，再数一沓，拿出一副扑克牌，撵开细看，再摸出一副。接下来梳头，三七分头，对镜子梳齐，全身笔挺，骨子里疏慢，最后，关灯。否极泰来，这半分钟，是上海味道。」 ———— [《繁花》/ 金宇澄](https://book.douban.com/subject/22714154/)*\n\n---\n\n\n## Booklist / 书单\n---\n\n**Bill Gates(比尔·盖茨)在他的个人网站[*Gates Notes*](https://www.gatesnotes.com/About-Bill-Gates/Holiday-Books-2019?WT.mc_id=20191210192113_EOYBooks2019_BG-LI&WT.tsrc=BGLI&linkId=78697290)上分享了五本书来享受这个冬天。**\n\n+ [*《An American Marriage, by Tayari Jones》*](https://book.douban.com/subject/27145297/)\n+ [*《These Truths, by Jill Lepores》*](https://book.douban.com/subject/30326555/)\n+ [*《Growth, by Vaclav Smil》*](https://book.douban.com/subject/34835317/)\n+ [*《Prepared, by Diane Tavenner》*](https://book.douban.com/subject/34864978/)\n+ [*《Why We Sleep, by Matthew Walker》*](https://book.douban.com/subject/30443263/)","source":"reading/index.md","raw":"---\ntitle: ''\ndate: 2019-11-24 03:21:54\ntype: reading\ncategory: reading\nlayout: \"reading\"\n---\n\n\n\n## Literary / 文学\n---\n\n**[《北野武的小酒馆》/ 北野武](https://book.douban.com/subject/27174130/)**\n\n> *「 “多美啊，要是我能像那颗星星一般闪闪发光就好了。” 仰望星空的人或许会这么说，但那颗星星却在那里痛苦不堪。要知道，它正以几亿度的热量在燃烧啊。而且，它必须一直这么光辉下去，直至热量全部燃尽。」 ———— [《北野武的小酒馆》/ 北野武](https://book.douban.com/subject/27174130/)*\n\n**[《繁花》/ 金宇澄](https://book.douban.com/subject/22714154/)**\n\n> *「独上阁楼，最好是夜里。《阿飞正传》结尾，梁朝伟骑马觅马，英雄暗老，电灯下面数钞票，数清一沓，放进西装内袋，再数一沓，拿出一副扑克牌，撵开细看，再摸出一副。接下来梳头，三七分头，对镜子梳齐，全身笔挺，骨子里疏慢，最后，关灯。否极泰来，这半分钟，是上海味道。」 ———— [《繁花》/ 金宇澄](https://book.douban.com/subject/22714154/)*\n\n---\n\n\n## Booklist / 书单\n---\n\n**Bill Gates(比尔·盖茨)在他的个人网站[*Gates Notes*](https://www.gatesnotes.com/About-Bill-Gates/Holiday-Books-2019?WT.mc_id=20191210192113_EOYBooks2019_BG-LI&WT.tsrc=BGLI&linkId=78697290)上分享了五本书来享受这个冬天。**\n\n+ [*《An American Marriage, by Tayari Jones》*](https://book.douban.com/subject/27145297/)\n+ [*《These Truths, by Jill Lepores》*](https://book.douban.com/subject/30326555/)\n+ [*《Growth, by Vaclav Smil》*](https://book.douban.com/subject/34835317/)\n+ [*《Prepared, by Diane Tavenner》*](https://book.douban.com/subject/34864978/)\n+ [*《Why We Sleep, by Matthew Walker》*](https://book.douban.com/subject/30443263/)","updated":"2019-12-13T07:19:08.356Z","path":"reading/index.html","comments":1,"_id":"ckcctyvtb000am5sne0fs5b0o","content":"<h2 id=\"Literary-文学\"><a href=\"#Literary-文学\" class=\"headerlink\" title=\"Literary / 文学\"></a>Literary / 文学</h2><hr>\n<p><strong><a href=\"https://book.douban.com/subject/27174130/\" target=\"_blank\" rel=\"noopener\">《北野武的小酒馆》/ 北野武</a></strong></p>\n<blockquote>\n<p><em>「 “多美啊，要是我能像那颗星星一般闪闪发光就好了。” 仰望星空的人或许会这么说，但那颗星星却在那里痛苦不堪。要知道，它正以几亿度的热量在燃烧啊。而且，它必须一直这么光辉下去，直至热量全部燃尽。」 ———— <a href=\"https://book.douban.com/subject/27174130/\" target=\"_blank\" rel=\"noopener\">《北野武的小酒馆》/ 北野武</a></em></p>\n</blockquote>\n<p><strong><a href=\"https://book.douban.com/subject/22714154/\" target=\"_blank\" rel=\"noopener\">《繁花》/ 金宇澄</a></strong></p>\n<blockquote>\n<p><em>「独上阁楼，最好是夜里。《阿飞正传》结尾，梁朝伟骑马觅马，英雄暗老，电灯下面数钞票，数清一沓，放进西装内袋，再数一沓，拿出一副扑克牌，撵开细看，再摸出一副。接下来梳头，三七分头，对镜子梳齐，全身笔挺，骨子里疏慢，最后，关灯。否极泰来，这半分钟，是上海味道。」 ———— <a href=\"https://book.douban.com/subject/22714154/\" target=\"_blank\" rel=\"noopener\">《繁花》/ 金宇澄</a></em></p>\n</blockquote>\n<hr>\n<h2 id=\"Booklist-书单\"><a href=\"#Booklist-书单\" class=\"headerlink\" title=\"Booklist / 书单\"></a>Booklist / 书单</h2><hr>\n<p><strong>Bill Gates(比尔·盖茨)在他的个人网站<a href=\"https://www.gatesnotes.com/About-Bill-Gates/Holiday-Books-2019?WT.mc_id=20191210192113_EOYBooks2019_BG-LI&WT.tsrc=BGLI&linkId=78697290\" target=\"_blank\" rel=\"noopener\"><em>Gates Notes</em></a>上分享了五本书来享受这个冬天。</strong></p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/27145297/\" target=\"_blank\" rel=\"noopener\"><em>《An American Marriage, by Tayari Jones》</em></a></li>\n<li><a href=\"https://book.douban.com/subject/30326555/\" target=\"_blank\" rel=\"noopener\"><em>《These Truths, by Jill Lepores》</em></a></li>\n<li><a href=\"https://book.douban.com/subject/34835317/\" target=\"_blank\" rel=\"noopener\"><em>《Growth, by Vaclav Smil》</em></a></li>\n<li><a href=\"https://book.douban.com/subject/34864978/\" target=\"_blank\" rel=\"noopener\"><em>《Prepared, by Diane Tavenner》</em></a></li>\n<li><a href=\"https://book.douban.com/subject/30443263/\" target=\"_blank\" rel=\"noopener\"><em>《Why We Sleep, by Matthew Walker》</em></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Literary-文学\"><a href=\"#Literary-文学\" class=\"headerlink\" title=\"Literary / 文学\"></a>Literary / 文学</h2><hr>\n<p><strong><a href=\"https://book.douban.com/subject/27174130/\" target=\"_blank\" rel=\"noopener\">《北野武的小酒馆》/ 北野武</a></strong></p>\n<blockquote>\n<p><em>「 “多美啊，要是我能像那颗星星一般闪闪发光就好了。” 仰望星空的人或许会这么说，但那颗星星却在那里痛苦不堪。要知道，它正以几亿度的热量在燃烧啊。而且，它必须一直这么光辉下去，直至热量全部燃尽。」 ———— <a href=\"https://book.douban.com/subject/27174130/\" target=\"_blank\" rel=\"noopener\">《北野武的小酒馆》/ 北野武</a></em></p>\n</blockquote>\n<p><strong><a href=\"https://book.douban.com/subject/22714154/\" target=\"_blank\" rel=\"noopener\">《繁花》/ 金宇澄</a></strong></p>\n<blockquote>\n<p><em>「独上阁楼，最好是夜里。《阿飞正传》结尾，梁朝伟骑马觅马，英雄暗老，电灯下面数钞票，数清一沓，放进西装内袋，再数一沓，拿出一副扑克牌，撵开细看，再摸出一副。接下来梳头，三七分头，对镜子梳齐，全身笔挺，骨子里疏慢，最后，关灯。否极泰来，这半分钟，是上海味道。」 ———— <a href=\"https://book.douban.com/subject/22714154/\" target=\"_blank\" rel=\"noopener\">《繁花》/ 金宇澄</a></em></p>\n</blockquote>\n<hr>\n<h2 id=\"Booklist-书单\"><a href=\"#Booklist-书单\" class=\"headerlink\" title=\"Booklist / 书单\"></a>Booklist / 书单</h2><hr>\n<p><strong>Bill Gates(比尔·盖茨)在他的个人网站<a href=\"https://www.gatesnotes.com/About-Bill-Gates/Holiday-Books-2019?WT.mc_id=20191210192113_EOYBooks2019_BG-LI&WT.tsrc=BGLI&linkId=78697290\" target=\"_blank\" rel=\"noopener\"><em>Gates Notes</em></a>上分享了五本书来享受这个冬天。</strong></p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/27145297/\" target=\"_blank\" rel=\"noopener\"><em>《An American Marriage, by Tayari Jones》</em></a></li>\n<li><a href=\"https://book.douban.com/subject/30326555/\" target=\"_blank\" rel=\"noopener\"><em>《These Truths, by Jill Lepores》</em></a></li>\n<li><a href=\"https://book.douban.com/subject/34835317/\" target=\"_blank\" rel=\"noopener\"><em>《Growth, by Vaclav Smil》</em></a></li>\n<li><a href=\"https://book.douban.com/subject/34864978/\" target=\"_blank\" rel=\"noopener\"><em>《Prepared, by Diane Tavenner》</em></a></li>\n<li><a href=\"https://book.douban.com/subject/30443263/\" target=\"_blank\" rel=\"noopener\"><em>《Why We Sleep, by Matthew Walker》</em></a></li>\n</ul>\n"},{"title":"The Tags Page","date":"2019-11-23T17:35:10.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: The Tags Page\ndate: 2019-11-24 01:35:10\ntype: tags\nlayout: \"tags\"\n---\n","updated":"2019-11-27T08:19:17.744Z","path":"tags/index.html","comments":1,"_id":"ckcctyvtm000em5snbcofb7la","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Live in the moments","date":"2019-11-30T07:29:10.000Z","tags":"movies","category":"movies","layout":"movies","_content":"\n---\n## 二零二零 / 2020\n\n### 一月 / January\n\n**2020-02-18**\n> *「给亲戚看见我一个人食吉野家，差点想讲句你认错人吧，但我已经懂得怎么说些客套话。」*\n> *————《给亲戚看见我一个人食吉野家》/ 林阿P*\n\n**2020-02-17**\n> *「所有的人，都是两面兽，一面是仁义道德、三纲五常；一面是男盗女娼、嗜血纵欲。」*\n> *———— [《檀香木》/ 莫言](https://book.douban.com/subject/1043485/)*\n\n**2020-02-16**\n> *「谁都可以过这种生活，但首先要能够知道弃绝另外一种人生。」*\n> *———— [《遇见野兔的那一年》/ 阿托·帕西林纳](https://book.douban.com/subject/26983143/)*\n\n**2020-02-15**\n> *「这道菜肴的名称叫“柠檬抱子甘蓝”。请大家记录！配料是给四个人吃的：八百克抱子甘蓝，一个柠檬的汁和未儿，一个洋葱头，一束欧芹，四十克黄油，黑胡椒粉和盐。」*\n> *———— [《2666》/ 罗贝托·波拉尼奥](https://book.douban.com/subject/6800379/)*\n\n**2020-02-14**\n> *「烦恼片刻，陪伴是成年人的私藏安慰剂。」*\n\n**2020-02-13**\n> *「那时的感情，确像一江春水，一树桃花，一朵早霞，一声云雀。它的感想是无私的，放射的，是无所不想拥抱，无所不想窥探的。」*\n> *———— [《故事和书》/ 孙犁](https://book.douban.com/subject/4238141/)*\n\n**2020-02-12**\n> *「人世间所谓的生活是由大哭、抽泣、破涕为笑组合而成的，而在这之中抽泣占据了绝大部分。」*\n> *———— [《麦琪的礼物》/ 欧·亨利](https://book.douban.com/subject/1051193/)*\n\n**2020-02-11**\n> *「月亮下的细语都睡着，都睡着；我的茉莉也睡了，也睡了。寄给她一份美梦，好让她不忘记我。」*\n> *———— 《小茉莉》/ 邱晨*\n\n**2020-02-10**\n> *「我理解的孤独并不是指悲惨的情境，而是隐秘的主宰力量、深刻的不可交流性，对一种无懈可击的独特性的朦胧的认识。」*\n> *———— [《贾科梅蒂的画家》/ 让·热内](https://book.douban.com/subject/11533606/)*\n\n**2020-02-09**\n> *「他很吃惊：为什么他们能过得这么悠闲？他压根没有觉察到，自己对待时间和守财奴对待金钱如出一辙。」*\n> *———— [《路边草》/ 夏目漱石](https://book.douban.com/subject/21322405/)*\n\n**2020-02-08**\n> *「人类和睦且世界和平的关键就在于父母对孩子的爱，就在于我们所说的家庭温暖。」*\n> *———— 《温暖的巢穴：动物如何解决家庭问题》/ 动物行为学家，维托斯·德吕舍尔*\n\n**2020-02-07**\n> *「这些忽隐忽现的火花*\n> *最终渐渐消退、慢慢熄灭*\n> *————清醒生活的最后几粒*\n> *真正的火星儿从某个夜晚*\n> *才收到的馅饼摊或烤土豆摊飘落*\n> *————伦敦市就会随之沉入梦乡。」*\n> *———— [《伦敦夜行记》/ 查尔斯·狄更斯](https://book.douban.com/subject/21324344/)*\n\n**2020-02-06**\n> *「如果神是宇宙的恒古寂静，那么人就是赋予这个寂静以意义的那一声哭啼。」*\n> *———— [《谎言的年代：萨拉马戈杂文集》/ ](https://book.douban.com/subject/25768864/)*\n\n**2020-02-05**\n> *「在地铁这块画布上，我们每个人都像杂耍演员，默默参与这一切的演出，一起建立一套属于公共场所的人类行为法则。」*\n> *———— [《巴黎地铁上的人类学家》/ 马克·奥热](https://book.douban.com/subject/30394844/)*\n\n**2020-02-04**\n> *「而我的身世，已经早春；弃于某片荒芜，你经过我。」*\n> *———— 《早春的树》/ 唐映枫*\n\n**2020-02-03**\n> *「他没有看见过海，也不希望看。世界的中心是北平。」*\n> *———— [《离婚》/ ](https://book.douban.com/subject/2031604/)*\n\n**2020-02-02**\n> *「我不怕孤独，我不怕被遗弃，我不怕丢掉我必须丢掉的一切，我不怕犯错误，甚至大错误，一生的遗恨，也许就像永恒一样悠远的错误。」*\n> *———— [《一个青年艺术家的画像》/ 詹姆斯·乔伊斯](https://book.douban.com/subject/3898308/)*\n\n**2020-02-01**\n> *「无论什么人见到她，都会觉得她是那么超凡脱俗、绝对是上天赐予人间的小天使，因为她的脸上带着一种神圣的烙印。」*\n> *———— [《科学怪人》/ 玛丽·雪莱](https://book.douban.com/subject/4886141/)*\n\n**2020-01-31**\n> *「\b\b社会当然存在无数无意义的工作，从来没有一个物种达到人类这样的过剩而不愿意死去，并且有如此多的方法苟且活着。」*\n> *———— [《巴黎伦敦落魄记》/ 乔治·奥威尔](https://book.douban.com/subject/1607478/)*\n\n**2020-01-30**\n> *「如今，明天直瞪瞪地啾着我，我却没有勇气直视明天。」*\n> *———— [《远大前程》/ 查尔斯·狄更斯](https://book.douban.com/subject/6313476/)*\n\n**2020-01-29**\n> *「我想，人天生就喜欢躲藏，渴望消失，这是一点都不奇怪的事；何况，在我们来到这个世界之前，我们不就是躲得好好的，好到连我们自己都想不起来曾经藏身何处？」*\n> *———— [《寂寞的游戏》/ 袁哲生](https://book.douban.com/subject/27104286/)*\n\n**2020-01-28**\n> *「一个人唯一可以用来对时间的工具，是记忆。」*\n> *———— [《小于一》/ 约瑟夫·布罗茨基](https://book.douban.com/subject/26053771/)*\n\n**2020-01-27**\n> *「人群就是共用一个影子的人们，就是不能共用一张嘴的人们，就是多数时喜气洋洋，穷开心，并且一开玩笑就过火的人们。」*\n> *———— [《够一梦》/ 西川](https://book.douban.com/subject/19964269/)*\n\n**2020-01-26**\n> *「\b你一定瑶尝尝这个味道！」*\n> *「\b这是······有点烧烤味，有丰润多汁，不像完全烟熏的味道，有点像······」*\n> *「就像“砰”那种味道，你认为呢？」*\n> *———— [《美食总动员》/ 布拉德·伯德 / 简·皮克瓦](https://movie.douban.com/subject/1793491/)*\n\n**2020-01-25**\n> *「每一英里、每一年、每一个人的每一滴泪，我无法解释，亲爱的，我甚至不会去尝试。我仅仅知道一件事，翅膀载爱而归。」*\n> *———— 《To Be By Your Side》 / 尼克·凯夫*\n\n\n**2020-01-24**\n> *「跟什么人一起玩才是最最关键的。」*\n> *———— [《少爷》](https://book.douban.com/subject/26933790/)*\n\n**2020-01-23**\n> *「我离开了那所房子，哭着跑回家，像个诗人一样，看到什么都想哭。」*\n> *———— [《米格尔街》/ 维迪亚达·奈保尔](https://book.douban.com/subject/21346008/)*\n\n**2020-01-22**\n> *「正由于我抱着与你相见的希望，我才永远认为最崎岖的路是最好的路。」*\n> *———— [《窄门》/ 安德丽·纪德](https://book.douban.com/subject/4246979/)*\n\n**2020-01-21**\n> *「当你为马忙碌的时候，人们可以看到你在忙碌；但当你忙着写诗的时候，你看上去好像无所事事。」*\n> *———— [《亲爱的生活》/ 艾丽丝·门罗](https://book.douban.com/subject/25870629/)*\n\n**2020-01-20**\n> *「暴力的终极弱点在于它恰好产生它试图摧毁的东西。」*\n> *———— [《马丁·路德：金自传》/ 马丁·路德：金](https://book.douban.com/subject/3711441/)*\n\n\n**2020-01-19**\n> *「在澄明的夜空下，银河倾斜到清晨。松鸦啼搅，咖啡煮沸。」*\n> *———— [《砌石与寒山诗》/ 加里·斯奈德](https://book.douban.com/subject/30217925/)*\n\n**2020-01-18**\n> *「于是我说：我在观察青蛙。接着，我又毫无说服力地补充说：“这项工作很重要。”」*\n> *————《观察青蛙的女人》/ 南希·克雷斯*\n\n**2020-01-17**\n> *「旧时创痕，最好是不要去剃它，要是剥着，依然会流血的。」*\n> *———— [《死水微澜》/ 李劼人](https://book.douban.com/subject/1394402/)*\n\n**2020-01-16**\n> *「坐在屋里，我的面前是一整块干干净净、纯纯粹粹的时间，它庞大得像一只大狗熊，一屁股坐在我身上不挪窝，直到父母亲再一次回来。」*\n> *———— [《山中的糖果》/ 邓安庆](https://book.douban.com/subject/26791998/)*\n\n**2020-01-15**\n> *「受欢迎本身也丝毫不能打动他，不过，随之而来的实际好处可以。」*\n> *———— 《朱莉亚·拉扎里》/ 威廉·毛姆*\n\n**2020-01-14**\n> *「我们都会怀念史努比，就像上个世纪的人怀念19世纪的单纯一样。」*\n> *———— [《那些忧伤的年轻人》](https://book.douban.com/subject/5321895/)*\n**2020-01-13**\n> *「所谓“希望”，就是付出努力有可能比完全放弃强一点点。」*\n> *———— [《遥远的向日葵地》](https://book.douban.com/subject/27184303/)*\n\n**2020-01-12**\n> *「穿运动鞋；」*\n> *「每月去一次理发店」*\n> *「（不是美容院）;」*\n> *「不一一自我辩解。」*\n> *「这就是对我而言的“男孩”形象。」*\n> *———— [《终究悲哀的外国语》](https://book.douban.com/subject/5366434/)*\n\n**2020-01-11**\n> *「他们之所以暂时停下」*\n> *「脚步仅仅是因为身体里的」*\n> *「潮汐出现了某种」*\n> *「懈怠，那是由于上午和下午两股势力在旋涡中相会所致」*\n> *———— [《达洛维夫人》/ 弗吉尼亚·伍尔夫](https://book.douban.com/subject/26312708/)*\n\n**2020-01-10**\n> *「\b梦是一座没有城墙的城。」*\n> *「梦是星星笔底下的素描。」*\n> *「梦是神话的儿子」*\n> *「梦是幻想的碎片」*\n> *「梦是虚妄」*\n> *———— [《酒徒》/ 刘以鬯](https://book.douban.com/subject/6127284/)*\n\n**2020-01-09**\n>*「我身上发生了什么事？」*\n>*「可到底事什么事呢？」*\n>*———— [《恋爱中的波伏瓦》/ 伊蕾娜·弗兰](https://book.douban.com/subject/26357036/)*\n\n**2020-01-08**\n> *「在水鸟梦中的一片银月下，我听见了你提问以后的寂静，那些问题今夜多老。」*\n> *———— 《给苏东坡的一封信》/ W.S 默温*\n\n**2020-01-07**\n> *「我终于意识到，被突然切断的，其实并不是返乡之路，而是对于生命之根的所有幻觉和记忆。」*\n> *———— [《望春风》/ 格非](https://book.douban.com/subject/26757657/)*\n\n**2020-01-06**\n> *「连离我最近的那座山都下起了雪。那不是皑皑的、沧桑的面貌，或者确切说是玲珑的、写意的初老。」*\n> *———— [《樱桃青衣》/ 张怡微](https://book.douban.com/subject/27081783/)*\n\n**2020-01-05**\n> *「我平生对患有各种偏执狂的人、一个心眼儿到底的人最有兴趣，因为一个人知识面越是有限，他离无限就越近。」*\n> *———— [《象棋的故事》/ 斯蒂芬·茨威格](https://book.douban.com/subject/2158684/)*\n\n**2020-01-04**\n> *「时间总要在人们的打算与结果之间创造出一些花样，即可教育当事人自己，也好让邻居为之开心。」*\n> *———— [《曼斯菲尔德庄园》/ 简·奥斯丁](https://book.douban.com/subject/1427784/)*\n\n**2020-01-03**\n> *「在我们称之为一年的周而复始的季节周期当中，臭鼬留下的足迹可以说是一年之始的标志事件之一。」*\n> *———— [《沙乡年鉴》/ 奥尔多·利奥波德](https://book.douban.com/subject/1398925/)*\n\n**2020-01-02**\n> *「你不喜欢这份未来？把它关掉。另点一份。把这一份还给寄件人。」*\n> *————《硬球》/ 玛格丽特·阿特伍德*\n\n**2020-01-01**\n> *「我是个诗人，没有能力直接抵达任何东西。」*\n> *———— [《奥古斯都》/ 约翰·威廉斯](https://book.douban.com/subject/27180479/)*\n\n---\n## 二零一九\n\n### 十二月 / December\n\n**2019-12-31**\n> *「昨天是历史，明天是未知，只有今天才是天赐的礼物。」*\n> *「Yesterday is history, tomorrow is a mystery, but today is a gift, that is why it is called Present.」*\n> *———— [《功夫熊猫》](https://movie.douban.com/subject/1783457/)*\n\n**2019-12-30**\n> *「他出现，又消失。一如日升日落，抑或任何转瞬即逝的事物，就像我们的生活。我们出现，然后我们又消失。我们对一些人而言是如此重要，但我们只是过客。」*\n> *———— [《爱在午夜降临前》](https://movie.douban.com/subject/10808442/)*\n\n**2019-12-29**\n> *「我从不相信好的神话，对那些坏的深化却深信不疑。」*\n> *———— [《潜行者》](https://movie.douban.com/subject/1295656/)*\n\n**2019-12-28**\n> *「电影发明以后，人类的生命比起以前延长了至少三倍。」 ———— 杨德昌*\n> *———— [《火车进站》](https://movie.douban.com/subject/1867742/)*\n\n**2019-12-27**\n> *「为什么你不把我带到其他回忆的地方去？到一个没有我的回忆里。我们藏在哪里，直到明早。」*\n> *「该死，我不记得任何没有你的回忆」*\n> *———— [《暖暖内含光》](https://movie.douban.com/subject/1308777/)*\n\n**2019-12-26**\n> *「朋友考试不及格，你感觉很糟；朋友考试考第一，你感觉更糟。」*\n> *———— [《三傻大闹宝莱坞》](https://movie.douban.com/subject/3793023/)*\n\n**2019-12-25**\n> *「铃声每响一次，就有一个天使获得了翅膀。」*\n> *「\bEvery time a bel rings, an angel gets his wings.」*\n> *———— [《生活多美好》](https://movie.douban.com/subject/1293749/)*\n\n**2019-12-24**\n> *「如果用心寻找，你能发现，其实爱无处不在。」*\n> *「If you look for it, I've got a sneaky feeling you'll find that love actually is all around.」*\n> *———— [《真爱至上》](https://movie.douban.com/subject/1292401/)*\n\n**2019-12-23**\n> *「虽然天气寒冷令人头疼，但是有些食物在天冷的时候才能做，寒冷也是很重要的调味料。」*\n> *———— [《小森林 冬春篇》](https://movie.douban.com/subject/25814707/)*\n\n**2019-12-22**\n> *「冬天是十一月 十二月」*\n> *「一月 二月 三月 四月」*\n> *「当我的光曝在你身上」*\n> *「重逢就是一间暗室」*\n> *--《无题》/ 毕赣--*\n> *———— [《路边野餐》](https://movie.douban.com/subject/26337866/)*\n\n**2019-12-21**\n> *「我们总是喜欢得不到的东西。但是人啊，总是要经历点什么，才会知道自己真正要的是什么。」*\n> *———— [《契克》](https://movie.douban.com/subject/26586432/)*\n\n**2019-12-20**\n> *「我们虽然笑着说很快再见，但内心知道，可能后会无期。」*\n> *———— [《海上钢琴师》](https://movie.douban.com/subject/1292001/)*\n\n**2019-12-19**\n> *「当你越了解你是谁、你想要什么时，你就越不容易感到沮丧。」*\n> *「The more you know who you are and what you want, the less you let things upset you.」*\n> *———— [《迷失东京》](https://movie.douban.com/subject/1291835/)*\n\n**2019-12-18**\n> *「谢谢你玩我的游戏。」*\n> *「Thanks for playing my game.」*\n> *———— [《头号玩家》](https://movie.douban.com/subject/4920389/)*\n\n**2019-12-17**\n> *「世界充满了恶意，但如果我们相互理解支持，恶意就会消散。」*\n> *「The world is full of wickedness. But if we support each other,it will eventually go away.」*\n> *———— [《狩猎》](https://movie.douban.com/subject/6985810/)*\n\n**2019-12-16**\n> *「我没有朋友，身边只有你。」*\n> *「I don't have friends. I've just got one.」*\n> *———— [《神探夏洛克 第一季》](https://movie.douban.com/subject/3986493/)*\n\n**2019-12-15**\n> *「我让魔鬼进入了我的身体，现在我无法摆脱他了。我用火、用刀都不能把他驱赶出来，为什么？他或许不想无家可归吧。」*\n> *「\b\bI let the Devill in, Now I can't get him out. I tried... burning him out and cutting him out. He don't take no notice. Why should he? He don't wanna be homeless.」*\n> *———— [《斯图尔特：倒带人生》](https://movie.douban.com/subject/2133337/)*\n\n**2019-12-14**\n> *「当我还是孩子的时候，妈妈带着我去看《白雪公主》。人人都爱上了白雪公主，而我偏偏爱上了那个邪恶的皇后。」*\n> *「When my mother took me to see Snow White, everyone fell in love with Snow White. I immediately fell for the Wicked Queen.」*\n> *———— [《安妮·霍尔》](https://movie.douban.com/subject/1296987/)」*\n\n**2019-12-13**\n> *「爱与恨，她们比我们任何一个都了解爱与恨。」*\n> *———— [《金陵十三钗》](https://movie.douban.com/subject/3649049/)*\n\n**2019-12-12**\n> *「东京那么大，如果不小心走散了，可能一辈子也见不到了。」*\n> *———— [《东京物语》](https://movie.douban.com/subject/1291568/)*\n\n**2019-12-11**\n> *「我总是在想酒是如何不断地成熟变化的，就好比今天我如果打开了一瓶酒，它的味道一定和其他任何一天打开的时候有所不同。因为酒是有生命的，它在不断地变化并且越来越复杂。」*\n> *———— [《杯酒人生》](https://movie.douban.com/subject/1291833/)*\n\n**2019-12-10**\n> *「铺好这张宽大的床*\n> *让它令人敬畏————*\n> *躺在床上等待审判日破晓*\n> *美妙而公正*\n> \n> *把它的床垫摆得笔直*\n> *把它的枕头拍圆*\n> *别让日出时黄色的噪音*\n> *打扰这块土地」*\n> ———— 《铺好这张宽大的床》/ 艾米丽·狄金森\n> *-国际人权日-*\n> *———— [《苏菲的抉择》](https://movie.douban.com/subject/1293077/)*\n\n**2019-12-09**\n> *「很难讲清楚我们生活的这个世界，到底是真实，还是梦境。」*\n> *———— [《空房间》](https://movie.douban.com/subject/1308833/)*\n\n**2019-12-08**\n> *「她怎么去世的？」*\n> *「某天照镜子被自己吓死的。」*\n> *———— [《内布拉斯加》](https://movie.douban.com/subject/6538833/)*\n\n**2019-12-07**\n> *「你永远也不晓得自己有多喜欢一个人，除非你看见他和别人在一起。」*\n> *———— [《天使爱美丽》](https://movie.douban.com/subject/1292215/)*\n\n**2019-12-06**\n> *「美丽的梭罗河 / 我为你歌唱 / 你的光荣历史 / 我永远记在心上 / 旱季来临 / 你轻轻流淌 / 雨季时波涛滚滚 / 你流向远方。」*\n> *———— [《太阳照常升起》](https://movie.douban.com/subject/1766086/)*\n\n**2019-12-05**\n> *「当你认为生活已经糟糕得不可能再糟糕了得时候，它居然真的更糟糕了。」*\n> *———— [《银河系漫游指南》](https://movie.douban.com/subject/1292267/)*\n\n**2019-12-04**\n> *「友情提示，为保证没有看过这部电影的朋友有机会获得更大的观影乐趣，请您不要向任何人透露《控方证人》的结局。」*\n> *———— [《控方证人》](https://movie.douban.com/subject/1296141/)*\n\n**2019-12-03**\n> *「我们是由梦构成的，而梦是由我们构成的。」*\n> *———— [《狂人皮埃罗》](https://movie.douban.com/subject/1292533/)*\n\n**2019-12-02**\n> *「你知道吗？唯一能赋予我人生价值的事，就是为数不多的、能够真正和另一个人心灵相契的几个瞬间。」*\n> *———— [《单身男子》](https://movie.douban.com/subject/3275168/)*\n\n**2019-12-01**\n> *「我们都害怕死亡，并质疑自己在宇宙中的位置。艺术家的使命不是向绝望屈服，而是找到一方解药，来对抗存在的虚无。」*\n> *———— [《午夜巴黎》](https://movie.douban.com/subject/4319218/)*\n\n---\n\n### 十一月 / November\n\n**2019-11-30**\n> *「我见过你们人类无法置信的事物。我目睹战舰在猎户星座的端沿起火燃烧，我看着C射线在唐怀瑟之门附近的黑暗中闪耀。但所有这些时刻，终将随着时间消逝，一如眼泪消失在雨中。」*\n> *———— [《银翼杀手》](https://movie.douban.com/subject/1291839/)*\n\n**2019-11-29**\n> *「我不喜欢葡萄干，它们以前饱满多汁，现在它们被扭曲了，就像它们的生命被窃取了一样。它们吃起来很甜，但是真的，它们只是被羞辱了的葡萄。」*\n> *———— [《邦尼和琼》](https://movie.douban.com/subject/1308314/)*\n\n**2019-11-28**\n> *「过去唯一的用处，就是让我不再想回到过去。」*\n> *———— [《如果\b·爱》](https://movie.douban.com/subject/1418070/)*\n\n**2019-11-27**\n> *「如果你对一个人说话，那人没有反应，那么你能坚持多久，一天？一个月？还是四年？如果你爱一个人，那人没有反应，那么你能坚持多久，三个月？五年？还是一生？」*\n> *———— [《对她说》](https://movie.douban.com/subject/1292211/)*\n\n**2019-11-26**\n> *「地球上不会有这样一片净土。」*\n> *———— [《与狼共舞》](https://movie.douban.com/subject/1293764/)*\n\n**2019-11-25**\n> *「医生们说咱俩没事儿。」*\n> *———— [《嘉年华》](https://movie.douban.com/subject/27019527/)*\n\n**2019-11-24**\n> *「我不知道你的故事是如何结束的，但如果你觉得那是真爱，那么它永远不会太晚。但如果那是真爱，为什么现在不是呢？你需要的只是尊从内心的勇气。」*\n> *———— [《给朱丽叶的信》](https://movie.douban.com/subject/3346464/)*\n\n**2019-11-23**\n> *「你不是唯一的受害者，我也是受害者，我是自己本能的受害者。」*\n> *———— [《游客》](https://movie.douban.com/subject/7155005/)*\n\n**2019-11-22**\n> *「我爱她并不是因为她适合我，我只是爱她。」*\n> *———— [《马语者》](https://movie.douban.com/subject/1297769/)*\n\n**2019-11-21**\n> *「你像是从宇宙中飞来，我的天使。」*\n> *———— [《卡罗尔》](https://movie.douban.com/subject/10757577/)*\n\n**2019-11-20**\n> *「我原来就坐在那儿，我曾是中国的皇帝。」*\n> *———— [《末代皇帝》](https://movie.douban.com/subject/1293172/)*\n\n**2019-11-19**\n> *「某个人想遗忘的，可能是其他人忘不了的。」*\n> *———— [《神秘肌肤》](https://movie.douban.com/subject/1309210/)*\n\n**2019-11-18**\n> *「世上有千千万万的人和你一样不快乐。」*\n> *———— [《艺术家》](https://movie.douban.com/subject/6097775/)*\n\n**2019-11-17**\n> *「对你的爱会持续多久？只要你头顶的星星依旧闪烁。」*\n> *———— [《时空恋旅人》](https://movie.douban.com/subject/10577869/))*\n\n**2019-11-16**\n> *「做你想做的，其他的都滚蛋。」*\n> *———— [《阳光小美女》](https://movie.douban.com/subject/1777612/)*\n\n**2019-11-15**\n> *「查理，有遗言吗？」*\n> *「别把钱只用在一个地方。」*\n> *———— [《微不足道》](https://movie.douban.com/subject/1937257/)*\n\n**2019-11-14**\n> *「当两个人相爱，但无法幸福，这才是真正的悲剧。」*\n> *———— [《消失的爱人》](https://movie.douban.com/subject/21318488/)*\n\n**2019-11-13**\n> *「虽然我对他很生气，但是他对我还是有吸引力的。为什么我要将他拱手让人？谁说一定是她赢？」*\n> *———— [《好家伙》](https://movie.douban.com/subject/1292268/)*\n\n**2019-11-12**\n> *「致怀抱梦想的傻瓜们，哪怕他们看来疯癫不羁；致那些支离破碎的心；致我们闯下的祸。」*\n> *———— [《爱乐之城》](https://movie.douban.com/subject/25934014/)*\n\n**2019-11-11**\n> *「所有的光鲜亮丽都敌不过时间，并且一去不复返。」*\n> *———— [《了不起的盖茨比》](https://movie.douban.com/subject/3364223/)*\n\n**2019-11-10**\n> *「找到了！*\n> *什么？永恒*\n> *那是太阳与海*\n> *交相辉映*\n> \n> *我永恒的灵魂*\n> *注视着你的心*\n> *纵然黑夜孤寂*\n> *白昼如焚」*\n> ————《永恒》/ 阿蒂尔·兰波\n> *-兰波逝世128周年-*\n> *———— [《心之全蚀》](https://movie.douban.com/subject/1297233/)*\n\n**2019-11-09**\n> *「不要温顺地走进这个良夜，激情不能被消沉的暮色淹没；咆哮吧，咆哮，痛斥那光的退缩。」*\n> *———— [《星际穿越》](https://movie.douban.com/subject/1889243/)*\n\n**2019-11-08**\n> *「一切都还顺利，但若想更进一步，我就得抢先对手一步，并承担起风险。」*\n> *———— [《夜行者》](https://movie.douban.com/subject/25750969/)*\n\n**2019-11-07**\n> *「你大概是我现在每天醒来的唯一动力了。」*\n> *———— [《遇见你之前》](https://movie.douban.com/subject/25929151/)*\n\n**2019-11-06**\n> *「本来以为，我再活一次的话，也许会有什么不一样。结果还是差不多，没什么不同。只是突然觉得，再活一次的话，好像，真的没那个必要。」*\n> *———— [《一一》](https://movie.douban.com/subject/1292434/)*\n\n**2019-11-05**\n> *「人们总梦想上天摘星，结局却和鱼缸里的金鱼一样。我觉得从一开始就让孩子明白人生是荒谬的，事情就简单多了。」*\n> *———— [《刺猬的优雅》](https://movie.douban.com/subject/3824274/)*\n\n**2019-11-04**\n> *「没人不希望恶有恶报，但又没人愿意脏了自己的手。」*\n> *———— [《荒蛮故事》](https://movie.douban.com/subject/24750126/)*\n\n**2019-11-03**\n> *「当你有任何烦恼和不开心时，只需大声叫出——Hakuna Matata!」*\n> *———— [《狮子王》](https://movie.douban.com/subject/1301753/)*\n\n**2019-11-02**\n> *「花太多时间去想所剩下的生命，反而忘了好好地生活。」*\n> *———— [《万能钥匙》](https://movie.douban.com/subject/1418752/)*\n\n**2019-11-01**\n> *「若你在逗留期间没有找到伴侣，就会变成一种动物。你曾想过自己会变成什么吗？大部分人会想到狗，所以世上才有那么多狗。」*\n> *———— [《龙虾》](https://movie.douban.com/subject/20514947/)*\n\n---\n\n### 十月 / October\n\n**2019-10-31**\n> *「爱意味着永远用不着说对不起。」*\n> *———— [《人鬼情未了》](https://movie.douban.com/subject/1293203/)*\n\n**2019-10-30**\n> *「对我来说，走进这间屋子，比回我自己家容易。」*\n> *———— [《小丑回魂》](https://movie.douban.com/subject/3604148/)*\n\n**2019-10-29**\n> *「你一直戴着它？」*\n> *「是的，傻瓜。我一直戴着它，一直戴着。我一直爱着你。」*\n> *———— [《英国病人》](https://movie.douban.com/subject/1291853/)*\n\n**2019-10-28**\n> *「我的爸爸曾对我说过他的致富经历：有一天，它捡到一个苹果并把它卖了，赚了一法郎。他用赚的一法郎买了两个苹果，并以两法郎的价格卖出了两个苹果……再后来，他继承了他叔叔的遗产。」*\n> *———— [《巴黎淘气帮》](https://movie.douban.com/subject/3157605/)*\n\n**2019-10-27**\n> *「我们离开这里好不好？」*\n> *「我们能去哪里？」*\n> *「我也不知道。」*\n> *———— [《青少年哪吒》](https://movie.douban.com/subject/1307561/)*\n\n**2019-10-26**\n> *「事物总是会变化的，这是自然法则。大多数人害怕变化，但如果你把它看成是某种你总是可以依赖的东西的话，那它就能成为一种安慰。」*\n> *———— [《廊桥遗梦》](https://movie.douban.com/subject/1293929/)*\n\n**2019-10-25**\n> *「沉沉闷闷，*\n> *迷迷蒙蒙，*\n> *钟声荡起。*\n> *往事如烟，*\n> *在眼前重现，*\n> *我落泪如雨。*\n> \n> *我走了，*\n> *恶风卷着我，*\n> *东飘西零。*\n> *飘呵，飘呵，*\n> *宛如那，*\n> *枯叶飘零。」*\n> ————《秋之歌》/ 保尔·魏尔伦\n> *———— [《弗兰兹》](https://movie.douban.com/subject/26616719/)*\n\n**2019-10-24**\n> *「机器不同于人，所以他们以不同的方式思考。有趣的问题是，只因为某样东西与你思考的方式不同，就意味着它不思考吗？我们允许人与人之间存在诸多差异，你喜欢草莓，我讨厌溜冰，你看悲剧电影会哭，我对花粉过敏。若不是表明我们的大脑以不同的方式工作、以不同的方式思考，那么不同的品味、不同的喜好，有什么意义呢？」*\n> *———— [《模仿游戏》](https://movie.douban.com/subject/10463953/)*\n\n**2019-10-23**\n> *「多希望我能知道该如何戒掉你。」*\n> *———— [《断背山》](https://movie.douban.com/subject/1418834/)*\n\n**2019-10-22**\n> *「当你可以跟一个人不说话，分享片刻寂静，且不会觉得尴尬时，那一刻你就会知道，你遇到了对的人。」*\n> *———— [《低俗小说》](https://movie.douban.com/subject/1291832/)*\n\n**2019-10-21**\n> *「三个女人一台戏，八个女人一台自嗨的舞台剧。」*\n> *———— [《八美图》](https://movie.douban.com/subject/1299292/)*\n\n**2019-10-20**\n> *「不是谁都能成为伟大的艺术家，但伟大的艺术家可能来自任何地方。」*\n> *———— [《美食总动员》](https://movie.douban.com/subject/1793491/)*\n\n**2019-10-19**\n> *「每一天，都将是我们余下生命之中的每一天。」*\n> *———— [《美国丽人》](https://movie.douban.com/subject/1292062/)*\n\n**2019-10-18**\n> *「不管怎样，我的心已经支离破碎，永远都无法愈合。我知道你的心也碎了，但我不需要背负。」*\n> *———— [《海边的曼彻斯特》](https://movie.douban.com/subject/25980443/)*\n\n**2019-10-17**\n> *「当有一天我们回首往事，会知道拯救大兵肖恩是我们在战火纷飞的年代里，完成的一件杰作。」*\n> *———— [《拯救大兵肖恩》](https://movie.douban.com/subject/1292849/)*\n\n**2019-10-16**\n> *「我会把仪表一直开着，你会回来的，对吗？」*\n> *———— [《恐怖游轮》](https://movie.douban.com/subject/3011051/)*\n\n**2019-10-15**\n> *「有时候，一个梦想可以点亮整片天空。」*\n> *———— [《十月的天空》](https://movie.douban.com/subject/1293753/)*\n\n**2019-10-14**\n> *「打起精神来！打起精神来！」*\n> *———— [《蜡笔小新》](https://movie.douban.com/subject/1431683/)*\n\n**2019-10-13**\n> *「你还能哭，这说明你还有救。」*\n> *———— [《办公室的故事》](https://movie.douban.com/subject/1302205/)*\n\n**2019-10-12**\n> *「探戈里无所谓错步，不像人生。它简单，所以才棒，要是踏错步或绊倒了，继续跳就好！」*\n> *———— [《闻香识女人》](https://movie.douban.com/subject/1298624/)*\n\n**2019-10-11**\n> *「无论你剩下的光阴是五分钟还是五十年，如果不是今天，如果不是你，我永远不会了解爱。谢谢你成为那个教会我去爱和被爱的人。」*\n> *———— [《爱再来一次》](https://movie.douban.com/subject/1440703/)*\n\n**2019-10-10**\n> *「我知道自己是什么，也知道自己会变成什么。我看见一切，别人却视而不见。」*\n> *———— [《黑暗中的舞者》](https://movie.douban.com/subject/1291562/)*\n\n**2019-10-09**\n> *「如果我什么都没有，那我也就什么都不会失去了。」*\n> *———— [《蓝白红三部曲之蓝》](https://movie.douban.com/subject/1292048/)*\n\n**2019-10-08**\n> *「你师父平时都买八十只螃蟹，他三十，我五十，你这点儿够谁吃。」*\n> *———— [《师父》](https://movie.douban.com/subject/25919910/)」*\n\n**2019-10-07**\n> *「外婆，如果你病了，就发个空信，我就会知道是你，我会尽快来，好吗？」*\n> *「Grandma, if you get sick, just send a blank letter. Then I'll know it's you, and I'll come fast.」*\n> *———— [《爱·回家》](https://movie.douban.com/subject/1299361/)*\n\n**2019-10-06**\n> *「阿高，我觉得这是你应得的（金胡萝卜奖），为这个漂亮美好的西瓜，我们有很多地方要谢谢你。」*\n> *「Well, I think you deserve this, Gromit. For a brave and splendid melon. We've all got a lot to thank you for.」*\n> *「人人皆有得意之时。」*\n> *「Every dog has his day.」*\n> *———— [《超级无敌掌门狗：人兔的诅咒》](https://movie.douban.com/subject/1419901/)*\n\n**2019-10-05**\n> *「维斯帕：密码多少？」*\n> *「Vesper: 'The password, please.'」*\n> *「邦德：你的名字。」*\n> *「Bond: 'V-E-S-P-E-R.'」*\n> *———— [《007：大战皇家赌场》](https://movie.douban.com/subject/1418190/)*\n\n**2019-10-04**\n> *「只要人类不出现，一切都是美好和感人的。」*\n> *———— [《丛林赤子心》](https://movie.douban.com/subject/1473562/)*\n\n**2019-10-03**\n> *「我不在乎你是否完全属于我，我只要我爱的人一直在我身旁，即使他爱的是别人。」*\n> *———— [《隐藏的恋情》](https://movie.douban.com/subject/1946786/)*\n\n**2019-10-02**\n> *「你有五分钟沉迷在迷人的伤痛中，享受它，拥抱它，抛弃它……继续前进。」*\n> *「You have five minutes to wallow in the delicious misery. Enjoy it, embrace it, discard it...and proceed.」*\n> *———— [《伊丽莎白镇》](https://movie.douban.com/subject/1419933/)*\n\n**2019-10-01**\n> *「这是盐的味道，山的味道，风的味道，阳光的味道，也是时间的味道，人情的味道。这些味道，已经在漫长的时光中和故土、乡亲、念旧、勤俭、坚忍等等情感和信念混合在一起，才下舌尖，又上心间。」*\n> *———— [《舌尖上的中国 第一季》](https://movie.douban.com/subject/10606004/)*\n\n---\n\n### 九月 / September\n\n**2019-09-30**\n> *「永远给自己一个梦想，即使它很远。」*\n> *———— [《小鞋子》](https://movie.douban.com/subject/1303021/)*\n\n**2019-09-29**\n> *「在某个时刻，我们掌握了真实，但真实往往稍纵即逝。」*\n> *「Hence there's a moment in which we grasp reality, but then the moment passes.」*\n> *———— [《放大》](https://movie.douban.com/subject/1310176/)*\n\n**2019-09-28**\n> *「那天早上我还没有变成吸血鬼，我最后一次看了日出。我完全记得它的细节，但是我已忘记之前的每个日出。我最后一次欣赏这壮观的景色，就好像我是第一次看一样，然后我就对阳光永别了，变成了我现在的这个样子。」*\n> *「That morning, I was not yet a vampire and I saw my last sunrise. I remember it completely and yet I can't recall any sunrise before it. I watched the whole magnificence of the dawn for the last time as if it were the first. And then I said farewell to sunlight and set out to become.」*\n> *———— [《夜访吸血鬼》](https://movie.douban.com/subject/1299327/)*\n\n**2019-09-27**\n> *「你我犹如隔镜视物，所见无非虚幻迷蒙。」*\n> *———— [《攻壳机动队》](https://movie.douban.com/subject/1291936/)*\n\n**2019-09-26**\n> *「眼睛不在这里*\n> *在这星星即将死去的山谷*\n> *在这空心的山谷里*\n> *在我们这已经失去的破碎的王国*\n> *这里没有眼睛*\n> \n> *在这最后的相会处*\n> *我们在一起摸索*\n> *避免语言*\n> *在这条肿胀的河滩头聚会」*\n> ———— 《空心人》T.S. 艾略特\n> *-艾略特诞辰131周年-*\n> *———— [《现代启示录》](https://movie.douban.com/subject/1292260/)*\n\n**2019-09-25**\n> *「\b这些年轻人一点意志力也没有。」*\n> *「These young people have no willpower!」*\n> *———— [《充气娃娃之恋》](https://movie.douban.com/subject/1855834/)*\n\n**2019-09-24**\n> *「喝了咱的酒 / 一人敢走青刹口」*\n> *「喝了咱的酒 / 见了皇帝不磕头」*\n> *———— [《红高粱》](https://movie.douban.com/subject/1306505/)*\n\n**2019-09-23**\n> *「你不知道一支好曲子是会怎样地支配你。」*\n> *———— [《捕鼠者》](https://movie.douban.com/subject/1322674/)*\n\n**2019-09-22**\n> *「欢迎来到现实世界，它糟糕的要命，但你会爱上它的。」*\n> *「Welcome to the real world. It sucks. You're gonna love it.」*\n> *———— [《老友记 第一季》](https://movie.douban.com/subject/1393859/)*\n\n**2019-09-21**\n> *「或许我们需要一段时间独处，才能感触彼此灵魂的深处。当第一次在中央车站楼梯口相逢时，我们伫立良久，却未曾想过，会迎来这场命运的交集。」*\n> *———— [《中央车站》](https://movie.douban.com/subject/1292218/)*\n\n**2019-09-20**\n> *「如果有一天我忍不住问你，你一定要骗我。就算你心里多不情愿，也不要告诉我，你最爱的人不是我。」*\n> *「If I ever ask you this question, Please lie. No matter how your heart rebels, Please tell me I'm the one you love the most.」*\n> *———— [《东邪西毒》](https://movie.douban.com/subject/1292328/)*\n\n**2019-09-19**\n> *「深夜吃东西的魅力就是那一抹罪恶感。」*\n> *———— [《深夜食堂》](https://movie.douban.com/subject/3991933/)*\n\n**2019-09-18**\n> *「文明应该被尊重，*\n> *那么生命呢，*\n> *生命应该被尊重吗？*\n> *文明是人类创造出来的，*\n> *如果没有人类，*\n> *文明从何谈起？」*\n> \n> *-九一八事变88周年-*\n> *———— [《东京审判》](https://movie.douban.com/subject/1949812/)*\n\n**2019-09-17**\n> *「将近二十年了，我生活在一个大谎言里面，生活里面有好多的感受，痛苦的、快乐的、我好想跟你们分享，可是我不能。有时候我忍不住想干脆跟你们坦白算了，可是又不忍心把扛了这么多年的担子，再放到你们的肩膀上。」*\n> *「It's been 20 years. I've been living a big lie. There has been so much pain and joy...I've wanted to share with you, but I couldn't. Sometimes I wanted to tell you everything...but I couldn't burden you with what has been with me so long.」*\n> *———— [《\b喜宴》](https://movie.douban.com/subject/1303037/)*\n\n**2019-09-16**\n> *「我有充分的理由回家，但只有一个理由留下来。」*\n> *「什么理由？」*\n> *「你。」*\n> *「I've been thinking about it, and there's a million reasons for me to go home...but there's only one reason for me to stay.」*\n> *「What reason is that?」*\n> *「Well, you.」*\n> *———— [《长大》](https://movie.douban.com/subject/1293212/)*\n\n\n**2019-09-15**\n> *「可怜的盖斯帕德。」*\n> *「Poor Gaspard.」*\n> *--雅克·贝克诞辰113周年--*\n> *———— [《洞》](https://movie.douban.com/subject/1424334/)*\n\n**2019-09-14**\n> *「唯一会改变的事情就是，你会变得更加混蛋。」*\n> *「The only thing that's gonna change is you're gonna become an even bigger cunt.」*\n> *———— [《杀手没有假期》](https://movie.douban.com/subject/2044089/)*\n\n**2019-09-13**\n> *「适逢三五便团圆，满把晴光护玉栏。天上一轮才捧出，人间万姓仰头看。」 ————《对月寓怀》 / 曹雪芹*\n> *———— [《红楼梦》](https://movie.douban.com/subject/1864810/)*\n\n**2019-09-12**\n> *「我们不能在一起，但并不代表我不爱你。」*\n> *「I think it’s over between you and me.」*\n> *———— [《爱在暹罗》](https://movie.douban.com/subject/2365260/)*\n\n**2019-09-11**\n> *「宝贝，我向你保证，如果我能平安回来，明天就辞职。」*\n> *「But, baby, I promise you, if I get out of this, I'm quitting tomorrow.」*\n> *「当天四架遭到劫持的飞机，只有联航93没有撞向最终目标。它与10时03芬坠毁在滨州杉克谷镇附近，机上人员全部遇难。」 ———— 记9.11事件*\n> *———— [《93航班》](https://movie.douban.com/subject/1588945/)*\n\n**2019-09-10**\n> *「这是一首爱之歌，我知道你们会分享此爱，我祈求你们永远不会让它逝去。」*\n> *「I would like to sing for you now a love song. I know you share this love. I pray that you will never let it die.」*\n> *———— [《音乐之声》](https://movie.douban.com/subject/1294408/)*\n\n**2019-09-09**\n> *「别把生命中的敌人当成一种诅咒，它也可能是上天的恩赐。智者从敌人身上学到的，比愚者从朋友身上学到的还要多。」*\n> *「Stop thinking of it as a curse to have been given an enemy in life. It can be blessing too. A wise man gets more from his enemies than a fool from his friends.」*\n> *———— [《极速风流》](https://movie.douban.com/subject/6803494/)*\n","source":"movies/index.md","raw":"---\ntitle: Live in the moments\ndate: 2019-11-30 15:29:10\ntags: movies\ncategory: movies\nlayout: \"movies\"\n---\n\n---\n## 二零二零 / 2020\n\n### 一月 / January\n\n**2020-02-18**\n> *「给亲戚看见我一个人食吉野家，差点想讲句你认错人吧，但我已经懂得怎么说些客套话。」*\n> *————《给亲戚看见我一个人食吉野家》/ 林阿P*\n\n**2020-02-17**\n> *「所有的人，都是两面兽，一面是仁义道德、三纲五常；一面是男盗女娼、嗜血纵欲。」*\n> *———— [《檀香木》/ 莫言](https://book.douban.com/subject/1043485/)*\n\n**2020-02-16**\n> *「谁都可以过这种生活，但首先要能够知道弃绝另外一种人生。」*\n> *———— [《遇见野兔的那一年》/ 阿托·帕西林纳](https://book.douban.com/subject/26983143/)*\n\n**2020-02-15**\n> *「这道菜肴的名称叫“柠檬抱子甘蓝”。请大家记录！配料是给四个人吃的：八百克抱子甘蓝，一个柠檬的汁和未儿，一个洋葱头，一束欧芹，四十克黄油，黑胡椒粉和盐。」*\n> *———— [《2666》/ 罗贝托·波拉尼奥](https://book.douban.com/subject/6800379/)*\n\n**2020-02-14**\n> *「烦恼片刻，陪伴是成年人的私藏安慰剂。」*\n\n**2020-02-13**\n> *「那时的感情，确像一江春水，一树桃花，一朵早霞，一声云雀。它的感想是无私的，放射的，是无所不想拥抱，无所不想窥探的。」*\n> *———— [《故事和书》/ 孙犁](https://book.douban.com/subject/4238141/)*\n\n**2020-02-12**\n> *「人世间所谓的生活是由大哭、抽泣、破涕为笑组合而成的，而在这之中抽泣占据了绝大部分。」*\n> *———— [《麦琪的礼物》/ 欧·亨利](https://book.douban.com/subject/1051193/)*\n\n**2020-02-11**\n> *「月亮下的细语都睡着，都睡着；我的茉莉也睡了，也睡了。寄给她一份美梦，好让她不忘记我。」*\n> *———— 《小茉莉》/ 邱晨*\n\n**2020-02-10**\n> *「我理解的孤独并不是指悲惨的情境，而是隐秘的主宰力量、深刻的不可交流性，对一种无懈可击的独特性的朦胧的认识。」*\n> *———— [《贾科梅蒂的画家》/ 让·热内](https://book.douban.com/subject/11533606/)*\n\n**2020-02-09**\n> *「他很吃惊：为什么他们能过得这么悠闲？他压根没有觉察到，自己对待时间和守财奴对待金钱如出一辙。」*\n> *———— [《路边草》/ 夏目漱石](https://book.douban.com/subject/21322405/)*\n\n**2020-02-08**\n> *「人类和睦且世界和平的关键就在于父母对孩子的爱，就在于我们所说的家庭温暖。」*\n> *———— 《温暖的巢穴：动物如何解决家庭问题》/ 动物行为学家，维托斯·德吕舍尔*\n\n**2020-02-07**\n> *「这些忽隐忽现的火花*\n> *最终渐渐消退、慢慢熄灭*\n> *————清醒生活的最后几粒*\n> *真正的火星儿从某个夜晚*\n> *才收到的馅饼摊或烤土豆摊飘落*\n> *————伦敦市就会随之沉入梦乡。」*\n> *———— [《伦敦夜行记》/ 查尔斯·狄更斯](https://book.douban.com/subject/21324344/)*\n\n**2020-02-06**\n> *「如果神是宇宙的恒古寂静，那么人就是赋予这个寂静以意义的那一声哭啼。」*\n> *———— [《谎言的年代：萨拉马戈杂文集》/ ](https://book.douban.com/subject/25768864/)*\n\n**2020-02-05**\n> *「在地铁这块画布上，我们每个人都像杂耍演员，默默参与这一切的演出，一起建立一套属于公共场所的人类行为法则。」*\n> *———— [《巴黎地铁上的人类学家》/ 马克·奥热](https://book.douban.com/subject/30394844/)*\n\n**2020-02-04**\n> *「而我的身世，已经早春；弃于某片荒芜，你经过我。」*\n> *———— 《早春的树》/ 唐映枫*\n\n**2020-02-03**\n> *「他没有看见过海，也不希望看。世界的中心是北平。」*\n> *———— [《离婚》/ ](https://book.douban.com/subject/2031604/)*\n\n**2020-02-02**\n> *「我不怕孤独，我不怕被遗弃，我不怕丢掉我必须丢掉的一切，我不怕犯错误，甚至大错误，一生的遗恨，也许就像永恒一样悠远的错误。」*\n> *———— [《一个青年艺术家的画像》/ 詹姆斯·乔伊斯](https://book.douban.com/subject/3898308/)*\n\n**2020-02-01**\n> *「无论什么人见到她，都会觉得她是那么超凡脱俗、绝对是上天赐予人间的小天使，因为她的脸上带着一种神圣的烙印。」*\n> *———— [《科学怪人》/ 玛丽·雪莱](https://book.douban.com/subject/4886141/)*\n\n**2020-01-31**\n> *「\b\b社会当然存在无数无意义的工作，从来没有一个物种达到人类这样的过剩而不愿意死去，并且有如此多的方法苟且活着。」*\n> *———— [《巴黎伦敦落魄记》/ 乔治·奥威尔](https://book.douban.com/subject/1607478/)*\n\n**2020-01-30**\n> *「如今，明天直瞪瞪地啾着我，我却没有勇气直视明天。」*\n> *———— [《远大前程》/ 查尔斯·狄更斯](https://book.douban.com/subject/6313476/)*\n\n**2020-01-29**\n> *「我想，人天生就喜欢躲藏，渴望消失，这是一点都不奇怪的事；何况，在我们来到这个世界之前，我们不就是躲得好好的，好到连我们自己都想不起来曾经藏身何处？」*\n> *———— [《寂寞的游戏》/ 袁哲生](https://book.douban.com/subject/27104286/)*\n\n**2020-01-28**\n> *「一个人唯一可以用来对时间的工具，是记忆。」*\n> *———— [《小于一》/ 约瑟夫·布罗茨基](https://book.douban.com/subject/26053771/)*\n\n**2020-01-27**\n> *「人群就是共用一个影子的人们，就是不能共用一张嘴的人们，就是多数时喜气洋洋，穷开心，并且一开玩笑就过火的人们。」*\n> *———— [《够一梦》/ 西川](https://book.douban.com/subject/19964269/)*\n\n**2020-01-26**\n> *「\b你一定瑶尝尝这个味道！」*\n> *「\b这是······有点烧烤味，有丰润多汁，不像完全烟熏的味道，有点像······」*\n> *「就像“砰”那种味道，你认为呢？」*\n> *———— [《美食总动员》/ 布拉德·伯德 / 简·皮克瓦](https://movie.douban.com/subject/1793491/)*\n\n**2020-01-25**\n> *「每一英里、每一年、每一个人的每一滴泪，我无法解释，亲爱的，我甚至不会去尝试。我仅仅知道一件事，翅膀载爱而归。」*\n> *———— 《To Be By Your Side》 / 尼克·凯夫*\n\n\n**2020-01-24**\n> *「跟什么人一起玩才是最最关键的。」*\n> *———— [《少爷》](https://book.douban.com/subject/26933790/)*\n\n**2020-01-23**\n> *「我离开了那所房子，哭着跑回家，像个诗人一样，看到什么都想哭。」*\n> *———— [《米格尔街》/ 维迪亚达·奈保尔](https://book.douban.com/subject/21346008/)*\n\n**2020-01-22**\n> *「正由于我抱着与你相见的希望，我才永远认为最崎岖的路是最好的路。」*\n> *———— [《窄门》/ 安德丽·纪德](https://book.douban.com/subject/4246979/)*\n\n**2020-01-21**\n> *「当你为马忙碌的时候，人们可以看到你在忙碌；但当你忙着写诗的时候，你看上去好像无所事事。」*\n> *———— [《亲爱的生活》/ 艾丽丝·门罗](https://book.douban.com/subject/25870629/)*\n\n**2020-01-20**\n> *「暴力的终极弱点在于它恰好产生它试图摧毁的东西。」*\n> *———— [《马丁·路德：金自传》/ 马丁·路德：金](https://book.douban.com/subject/3711441/)*\n\n\n**2020-01-19**\n> *「在澄明的夜空下，银河倾斜到清晨。松鸦啼搅，咖啡煮沸。」*\n> *———— [《砌石与寒山诗》/ 加里·斯奈德](https://book.douban.com/subject/30217925/)*\n\n**2020-01-18**\n> *「于是我说：我在观察青蛙。接着，我又毫无说服力地补充说：“这项工作很重要。”」*\n> *————《观察青蛙的女人》/ 南希·克雷斯*\n\n**2020-01-17**\n> *「旧时创痕，最好是不要去剃它，要是剥着，依然会流血的。」*\n> *———— [《死水微澜》/ 李劼人](https://book.douban.com/subject/1394402/)*\n\n**2020-01-16**\n> *「坐在屋里，我的面前是一整块干干净净、纯纯粹粹的时间，它庞大得像一只大狗熊，一屁股坐在我身上不挪窝，直到父母亲再一次回来。」*\n> *———— [《山中的糖果》/ 邓安庆](https://book.douban.com/subject/26791998/)*\n\n**2020-01-15**\n> *「受欢迎本身也丝毫不能打动他，不过，随之而来的实际好处可以。」*\n> *———— 《朱莉亚·拉扎里》/ 威廉·毛姆*\n\n**2020-01-14**\n> *「我们都会怀念史努比，就像上个世纪的人怀念19世纪的单纯一样。」*\n> *———— [《那些忧伤的年轻人》](https://book.douban.com/subject/5321895/)*\n**2020-01-13**\n> *「所谓“希望”，就是付出努力有可能比完全放弃强一点点。」*\n> *———— [《遥远的向日葵地》](https://book.douban.com/subject/27184303/)*\n\n**2020-01-12**\n> *「穿运动鞋；」*\n> *「每月去一次理发店」*\n> *「（不是美容院）;」*\n> *「不一一自我辩解。」*\n> *「这就是对我而言的“男孩”形象。」*\n> *———— [《终究悲哀的外国语》](https://book.douban.com/subject/5366434/)*\n\n**2020-01-11**\n> *「他们之所以暂时停下」*\n> *「脚步仅仅是因为身体里的」*\n> *「潮汐出现了某种」*\n> *「懈怠，那是由于上午和下午两股势力在旋涡中相会所致」*\n> *———— [《达洛维夫人》/ 弗吉尼亚·伍尔夫](https://book.douban.com/subject/26312708/)*\n\n**2020-01-10**\n> *「\b梦是一座没有城墙的城。」*\n> *「梦是星星笔底下的素描。」*\n> *「梦是神话的儿子」*\n> *「梦是幻想的碎片」*\n> *「梦是虚妄」*\n> *———— [《酒徒》/ 刘以鬯](https://book.douban.com/subject/6127284/)*\n\n**2020-01-09**\n>*「我身上发生了什么事？」*\n>*「可到底事什么事呢？」*\n>*———— [《恋爱中的波伏瓦》/ 伊蕾娜·弗兰](https://book.douban.com/subject/26357036/)*\n\n**2020-01-08**\n> *「在水鸟梦中的一片银月下，我听见了你提问以后的寂静，那些问题今夜多老。」*\n> *———— 《给苏东坡的一封信》/ W.S 默温*\n\n**2020-01-07**\n> *「我终于意识到，被突然切断的，其实并不是返乡之路，而是对于生命之根的所有幻觉和记忆。」*\n> *———— [《望春风》/ 格非](https://book.douban.com/subject/26757657/)*\n\n**2020-01-06**\n> *「连离我最近的那座山都下起了雪。那不是皑皑的、沧桑的面貌，或者确切说是玲珑的、写意的初老。」*\n> *———— [《樱桃青衣》/ 张怡微](https://book.douban.com/subject/27081783/)*\n\n**2020-01-05**\n> *「我平生对患有各种偏执狂的人、一个心眼儿到底的人最有兴趣，因为一个人知识面越是有限，他离无限就越近。」*\n> *———— [《象棋的故事》/ 斯蒂芬·茨威格](https://book.douban.com/subject/2158684/)*\n\n**2020-01-04**\n> *「时间总要在人们的打算与结果之间创造出一些花样，即可教育当事人自己，也好让邻居为之开心。」*\n> *———— [《曼斯菲尔德庄园》/ 简·奥斯丁](https://book.douban.com/subject/1427784/)*\n\n**2020-01-03**\n> *「在我们称之为一年的周而复始的季节周期当中，臭鼬留下的足迹可以说是一年之始的标志事件之一。」*\n> *———— [《沙乡年鉴》/ 奥尔多·利奥波德](https://book.douban.com/subject/1398925/)*\n\n**2020-01-02**\n> *「你不喜欢这份未来？把它关掉。另点一份。把这一份还给寄件人。」*\n> *————《硬球》/ 玛格丽特·阿特伍德*\n\n**2020-01-01**\n> *「我是个诗人，没有能力直接抵达任何东西。」*\n> *———— [《奥古斯都》/ 约翰·威廉斯](https://book.douban.com/subject/27180479/)*\n\n---\n## 二零一九\n\n### 十二月 / December\n\n**2019-12-31**\n> *「昨天是历史，明天是未知，只有今天才是天赐的礼物。」*\n> *「Yesterday is history, tomorrow is a mystery, but today is a gift, that is why it is called Present.」*\n> *———— [《功夫熊猫》](https://movie.douban.com/subject/1783457/)*\n\n**2019-12-30**\n> *「他出现，又消失。一如日升日落，抑或任何转瞬即逝的事物，就像我们的生活。我们出现，然后我们又消失。我们对一些人而言是如此重要，但我们只是过客。」*\n> *———— [《爱在午夜降临前》](https://movie.douban.com/subject/10808442/)*\n\n**2019-12-29**\n> *「我从不相信好的神话，对那些坏的深化却深信不疑。」*\n> *———— [《潜行者》](https://movie.douban.com/subject/1295656/)*\n\n**2019-12-28**\n> *「电影发明以后，人类的生命比起以前延长了至少三倍。」 ———— 杨德昌*\n> *———— [《火车进站》](https://movie.douban.com/subject/1867742/)*\n\n**2019-12-27**\n> *「为什么你不把我带到其他回忆的地方去？到一个没有我的回忆里。我们藏在哪里，直到明早。」*\n> *「该死，我不记得任何没有你的回忆」*\n> *———— [《暖暖内含光》](https://movie.douban.com/subject/1308777/)*\n\n**2019-12-26**\n> *「朋友考试不及格，你感觉很糟；朋友考试考第一，你感觉更糟。」*\n> *———— [《三傻大闹宝莱坞》](https://movie.douban.com/subject/3793023/)*\n\n**2019-12-25**\n> *「铃声每响一次，就有一个天使获得了翅膀。」*\n> *「\bEvery time a bel rings, an angel gets his wings.」*\n> *———— [《生活多美好》](https://movie.douban.com/subject/1293749/)*\n\n**2019-12-24**\n> *「如果用心寻找，你能发现，其实爱无处不在。」*\n> *「If you look for it, I've got a sneaky feeling you'll find that love actually is all around.」*\n> *———— [《真爱至上》](https://movie.douban.com/subject/1292401/)*\n\n**2019-12-23**\n> *「虽然天气寒冷令人头疼，但是有些食物在天冷的时候才能做，寒冷也是很重要的调味料。」*\n> *———— [《小森林 冬春篇》](https://movie.douban.com/subject/25814707/)*\n\n**2019-12-22**\n> *「冬天是十一月 十二月」*\n> *「一月 二月 三月 四月」*\n> *「当我的光曝在你身上」*\n> *「重逢就是一间暗室」*\n> *--《无题》/ 毕赣--*\n> *———— [《路边野餐》](https://movie.douban.com/subject/26337866/)*\n\n**2019-12-21**\n> *「我们总是喜欢得不到的东西。但是人啊，总是要经历点什么，才会知道自己真正要的是什么。」*\n> *———— [《契克》](https://movie.douban.com/subject/26586432/)*\n\n**2019-12-20**\n> *「我们虽然笑着说很快再见，但内心知道，可能后会无期。」*\n> *———— [《海上钢琴师》](https://movie.douban.com/subject/1292001/)*\n\n**2019-12-19**\n> *「当你越了解你是谁、你想要什么时，你就越不容易感到沮丧。」*\n> *「The more you know who you are and what you want, the less you let things upset you.」*\n> *———— [《迷失东京》](https://movie.douban.com/subject/1291835/)*\n\n**2019-12-18**\n> *「谢谢你玩我的游戏。」*\n> *「Thanks for playing my game.」*\n> *———— [《头号玩家》](https://movie.douban.com/subject/4920389/)*\n\n**2019-12-17**\n> *「世界充满了恶意，但如果我们相互理解支持，恶意就会消散。」*\n> *「The world is full of wickedness. But if we support each other,it will eventually go away.」*\n> *———— [《狩猎》](https://movie.douban.com/subject/6985810/)*\n\n**2019-12-16**\n> *「我没有朋友，身边只有你。」*\n> *「I don't have friends. I've just got one.」*\n> *———— [《神探夏洛克 第一季》](https://movie.douban.com/subject/3986493/)*\n\n**2019-12-15**\n> *「我让魔鬼进入了我的身体，现在我无法摆脱他了。我用火、用刀都不能把他驱赶出来，为什么？他或许不想无家可归吧。」*\n> *「\b\bI let the Devill in, Now I can't get him out. I tried... burning him out and cutting him out. He don't take no notice. Why should he? He don't wanna be homeless.」*\n> *———— [《斯图尔特：倒带人生》](https://movie.douban.com/subject/2133337/)*\n\n**2019-12-14**\n> *「当我还是孩子的时候，妈妈带着我去看《白雪公主》。人人都爱上了白雪公主，而我偏偏爱上了那个邪恶的皇后。」*\n> *「When my mother took me to see Snow White, everyone fell in love with Snow White. I immediately fell for the Wicked Queen.」*\n> *———— [《安妮·霍尔》](https://movie.douban.com/subject/1296987/)」*\n\n**2019-12-13**\n> *「爱与恨，她们比我们任何一个都了解爱与恨。」*\n> *———— [《金陵十三钗》](https://movie.douban.com/subject/3649049/)*\n\n**2019-12-12**\n> *「东京那么大，如果不小心走散了，可能一辈子也见不到了。」*\n> *———— [《东京物语》](https://movie.douban.com/subject/1291568/)*\n\n**2019-12-11**\n> *「我总是在想酒是如何不断地成熟变化的，就好比今天我如果打开了一瓶酒，它的味道一定和其他任何一天打开的时候有所不同。因为酒是有生命的，它在不断地变化并且越来越复杂。」*\n> *———— [《杯酒人生》](https://movie.douban.com/subject/1291833/)*\n\n**2019-12-10**\n> *「铺好这张宽大的床*\n> *让它令人敬畏————*\n> *躺在床上等待审判日破晓*\n> *美妙而公正*\n> \n> *把它的床垫摆得笔直*\n> *把它的枕头拍圆*\n> *别让日出时黄色的噪音*\n> *打扰这块土地」*\n> ———— 《铺好这张宽大的床》/ 艾米丽·狄金森\n> *-国际人权日-*\n> *———— [《苏菲的抉择》](https://movie.douban.com/subject/1293077/)*\n\n**2019-12-09**\n> *「很难讲清楚我们生活的这个世界，到底是真实，还是梦境。」*\n> *———— [《空房间》](https://movie.douban.com/subject/1308833/)*\n\n**2019-12-08**\n> *「她怎么去世的？」*\n> *「某天照镜子被自己吓死的。」*\n> *———— [《内布拉斯加》](https://movie.douban.com/subject/6538833/)*\n\n**2019-12-07**\n> *「你永远也不晓得自己有多喜欢一个人，除非你看见他和别人在一起。」*\n> *———— [《天使爱美丽》](https://movie.douban.com/subject/1292215/)*\n\n**2019-12-06**\n> *「美丽的梭罗河 / 我为你歌唱 / 你的光荣历史 / 我永远记在心上 / 旱季来临 / 你轻轻流淌 / 雨季时波涛滚滚 / 你流向远方。」*\n> *———— [《太阳照常升起》](https://movie.douban.com/subject/1766086/)*\n\n**2019-12-05**\n> *「当你认为生活已经糟糕得不可能再糟糕了得时候，它居然真的更糟糕了。」*\n> *———— [《银河系漫游指南》](https://movie.douban.com/subject/1292267/)*\n\n**2019-12-04**\n> *「友情提示，为保证没有看过这部电影的朋友有机会获得更大的观影乐趣，请您不要向任何人透露《控方证人》的结局。」*\n> *———— [《控方证人》](https://movie.douban.com/subject/1296141/)*\n\n**2019-12-03**\n> *「我们是由梦构成的，而梦是由我们构成的。」*\n> *———— [《狂人皮埃罗》](https://movie.douban.com/subject/1292533/)*\n\n**2019-12-02**\n> *「你知道吗？唯一能赋予我人生价值的事，就是为数不多的、能够真正和另一个人心灵相契的几个瞬间。」*\n> *———— [《单身男子》](https://movie.douban.com/subject/3275168/)*\n\n**2019-12-01**\n> *「我们都害怕死亡，并质疑自己在宇宙中的位置。艺术家的使命不是向绝望屈服，而是找到一方解药，来对抗存在的虚无。」*\n> *———— [《午夜巴黎》](https://movie.douban.com/subject/4319218/)*\n\n---\n\n### 十一月 / November\n\n**2019-11-30**\n> *「我见过你们人类无法置信的事物。我目睹战舰在猎户星座的端沿起火燃烧，我看着C射线在唐怀瑟之门附近的黑暗中闪耀。但所有这些时刻，终将随着时间消逝，一如眼泪消失在雨中。」*\n> *———— [《银翼杀手》](https://movie.douban.com/subject/1291839/)*\n\n**2019-11-29**\n> *「我不喜欢葡萄干，它们以前饱满多汁，现在它们被扭曲了，就像它们的生命被窃取了一样。它们吃起来很甜，但是真的，它们只是被羞辱了的葡萄。」*\n> *———— [《邦尼和琼》](https://movie.douban.com/subject/1308314/)*\n\n**2019-11-28**\n> *「过去唯一的用处，就是让我不再想回到过去。」*\n> *———— [《如果\b·爱》](https://movie.douban.com/subject/1418070/)*\n\n**2019-11-27**\n> *「如果你对一个人说话，那人没有反应，那么你能坚持多久，一天？一个月？还是四年？如果你爱一个人，那人没有反应，那么你能坚持多久，三个月？五年？还是一生？」*\n> *———— [《对她说》](https://movie.douban.com/subject/1292211/)*\n\n**2019-11-26**\n> *「地球上不会有这样一片净土。」*\n> *———— [《与狼共舞》](https://movie.douban.com/subject/1293764/)*\n\n**2019-11-25**\n> *「医生们说咱俩没事儿。」*\n> *———— [《嘉年华》](https://movie.douban.com/subject/27019527/)*\n\n**2019-11-24**\n> *「我不知道你的故事是如何结束的，但如果你觉得那是真爱，那么它永远不会太晚。但如果那是真爱，为什么现在不是呢？你需要的只是尊从内心的勇气。」*\n> *———— [《给朱丽叶的信》](https://movie.douban.com/subject/3346464/)*\n\n**2019-11-23**\n> *「你不是唯一的受害者，我也是受害者，我是自己本能的受害者。」*\n> *———— [《游客》](https://movie.douban.com/subject/7155005/)*\n\n**2019-11-22**\n> *「我爱她并不是因为她适合我，我只是爱她。」*\n> *———— [《马语者》](https://movie.douban.com/subject/1297769/)*\n\n**2019-11-21**\n> *「你像是从宇宙中飞来，我的天使。」*\n> *———— [《卡罗尔》](https://movie.douban.com/subject/10757577/)*\n\n**2019-11-20**\n> *「我原来就坐在那儿，我曾是中国的皇帝。」*\n> *———— [《末代皇帝》](https://movie.douban.com/subject/1293172/)*\n\n**2019-11-19**\n> *「某个人想遗忘的，可能是其他人忘不了的。」*\n> *———— [《神秘肌肤》](https://movie.douban.com/subject/1309210/)*\n\n**2019-11-18**\n> *「世上有千千万万的人和你一样不快乐。」*\n> *———— [《艺术家》](https://movie.douban.com/subject/6097775/)*\n\n**2019-11-17**\n> *「对你的爱会持续多久？只要你头顶的星星依旧闪烁。」*\n> *———— [《时空恋旅人》](https://movie.douban.com/subject/10577869/))*\n\n**2019-11-16**\n> *「做你想做的，其他的都滚蛋。」*\n> *———— [《阳光小美女》](https://movie.douban.com/subject/1777612/)*\n\n**2019-11-15**\n> *「查理，有遗言吗？」*\n> *「别把钱只用在一个地方。」*\n> *———— [《微不足道》](https://movie.douban.com/subject/1937257/)*\n\n**2019-11-14**\n> *「当两个人相爱，但无法幸福，这才是真正的悲剧。」*\n> *———— [《消失的爱人》](https://movie.douban.com/subject/21318488/)*\n\n**2019-11-13**\n> *「虽然我对他很生气，但是他对我还是有吸引力的。为什么我要将他拱手让人？谁说一定是她赢？」*\n> *———— [《好家伙》](https://movie.douban.com/subject/1292268/)*\n\n**2019-11-12**\n> *「致怀抱梦想的傻瓜们，哪怕他们看来疯癫不羁；致那些支离破碎的心；致我们闯下的祸。」*\n> *———— [《爱乐之城》](https://movie.douban.com/subject/25934014/)*\n\n**2019-11-11**\n> *「所有的光鲜亮丽都敌不过时间，并且一去不复返。」*\n> *———— [《了不起的盖茨比》](https://movie.douban.com/subject/3364223/)*\n\n**2019-11-10**\n> *「找到了！*\n> *什么？永恒*\n> *那是太阳与海*\n> *交相辉映*\n> \n> *我永恒的灵魂*\n> *注视着你的心*\n> *纵然黑夜孤寂*\n> *白昼如焚」*\n> ————《永恒》/ 阿蒂尔·兰波\n> *-兰波逝世128周年-*\n> *———— [《心之全蚀》](https://movie.douban.com/subject/1297233/)*\n\n**2019-11-09**\n> *「不要温顺地走进这个良夜，激情不能被消沉的暮色淹没；咆哮吧，咆哮，痛斥那光的退缩。」*\n> *———— [《星际穿越》](https://movie.douban.com/subject/1889243/)*\n\n**2019-11-08**\n> *「一切都还顺利，但若想更进一步，我就得抢先对手一步，并承担起风险。」*\n> *———— [《夜行者》](https://movie.douban.com/subject/25750969/)*\n\n**2019-11-07**\n> *「你大概是我现在每天醒来的唯一动力了。」*\n> *———— [《遇见你之前》](https://movie.douban.com/subject/25929151/)*\n\n**2019-11-06**\n> *「本来以为，我再活一次的话，也许会有什么不一样。结果还是差不多，没什么不同。只是突然觉得，再活一次的话，好像，真的没那个必要。」*\n> *———— [《一一》](https://movie.douban.com/subject/1292434/)*\n\n**2019-11-05**\n> *「人们总梦想上天摘星，结局却和鱼缸里的金鱼一样。我觉得从一开始就让孩子明白人生是荒谬的，事情就简单多了。」*\n> *———— [《刺猬的优雅》](https://movie.douban.com/subject/3824274/)*\n\n**2019-11-04**\n> *「没人不希望恶有恶报，但又没人愿意脏了自己的手。」*\n> *———— [《荒蛮故事》](https://movie.douban.com/subject/24750126/)*\n\n**2019-11-03**\n> *「当你有任何烦恼和不开心时，只需大声叫出——Hakuna Matata!」*\n> *———— [《狮子王》](https://movie.douban.com/subject/1301753/)*\n\n**2019-11-02**\n> *「花太多时间去想所剩下的生命，反而忘了好好地生活。」*\n> *———— [《万能钥匙》](https://movie.douban.com/subject/1418752/)*\n\n**2019-11-01**\n> *「若你在逗留期间没有找到伴侣，就会变成一种动物。你曾想过自己会变成什么吗？大部分人会想到狗，所以世上才有那么多狗。」*\n> *———— [《龙虾》](https://movie.douban.com/subject/20514947/)*\n\n---\n\n### 十月 / October\n\n**2019-10-31**\n> *「爱意味着永远用不着说对不起。」*\n> *———— [《人鬼情未了》](https://movie.douban.com/subject/1293203/)*\n\n**2019-10-30**\n> *「对我来说，走进这间屋子，比回我自己家容易。」*\n> *———— [《小丑回魂》](https://movie.douban.com/subject/3604148/)*\n\n**2019-10-29**\n> *「你一直戴着它？」*\n> *「是的，傻瓜。我一直戴着它，一直戴着。我一直爱着你。」*\n> *———— [《英国病人》](https://movie.douban.com/subject/1291853/)*\n\n**2019-10-28**\n> *「我的爸爸曾对我说过他的致富经历：有一天，它捡到一个苹果并把它卖了，赚了一法郎。他用赚的一法郎买了两个苹果，并以两法郎的价格卖出了两个苹果……再后来，他继承了他叔叔的遗产。」*\n> *———— [《巴黎淘气帮》](https://movie.douban.com/subject/3157605/)*\n\n**2019-10-27**\n> *「我们离开这里好不好？」*\n> *「我们能去哪里？」*\n> *「我也不知道。」*\n> *———— [《青少年哪吒》](https://movie.douban.com/subject/1307561/)*\n\n**2019-10-26**\n> *「事物总是会变化的，这是自然法则。大多数人害怕变化，但如果你把它看成是某种你总是可以依赖的东西的话，那它就能成为一种安慰。」*\n> *———— [《廊桥遗梦》](https://movie.douban.com/subject/1293929/)*\n\n**2019-10-25**\n> *「沉沉闷闷，*\n> *迷迷蒙蒙，*\n> *钟声荡起。*\n> *往事如烟，*\n> *在眼前重现，*\n> *我落泪如雨。*\n> \n> *我走了，*\n> *恶风卷着我，*\n> *东飘西零。*\n> *飘呵，飘呵，*\n> *宛如那，*\n> *枯叶飘零。」*\n> ————《秋之歌》/ 保尔·魏尔伦\n> *———— [《弗兰兹》](https://movie.douban.com/subject/26616719/)*\n\n**2019-10-24**\n> *「机器不同于人，所以他们以不同的方式思考。有趣的问题是，只因为某样东西与你思考的方式不同，就意味着它不思考吗？我们允许人与人之间存在诸多差异，你喜欢草莓，我讨厌溜冰，你看悲剧电影会哭，我对花粉过敏。若不是表明我们的大脑以不同的方式工作、以不同的方式思考，那么不同的品味、不同的喜好，有什么意义呢？」*\n> *———— [《模仿游戏》](https://movie.douban.com/subject/10463953/)*\n\n**2019-10-23**\n> *「多希望我能知道该如何戒掉你。」*\n> *———— [《断背山》](https://movie.douban.com/subject/1418834/)*\n\n**2019-10-22**\n> *「当你可以跟一个人不说话，分享片刻寂静，且不会觉得尴尬时，那一刻你就会知道，你遇到了对的人。」*\n> *———— [《低俗小说》](https://movie.douban.com/subject/1291832/)*\n\n**2019-10-21**\n> *「三个女人一台戏，八个女人一台自嗨的舞台剧。」*\n> *———— [《八美图》](https://movie.douban.com/subject/1299292/)*\n\n**2019-10-20**\n> *「不是谁都能成为伟大的艺术家，但伟大的艺术家可能来自任何地方。」*\n> *———— [《美食总动员》](https://movie.douban.com/subject/1793491/)*\n\n**2019-10-19**\n> *「每一天，都将是我们余下生命之中的每一天。」*\n> *———— [《美国丽人》](https://movie.douban.com/subject/1292062/)*\n\n**2019-10-18**\n> *「不管怎样，我的心已经支离破碎，永远都无法愈合。我知道你的心也碎了，但我不需要背负。」*\n> *———— [《海边的曼彻斯特》](https://movie.douban.com/subject/25980443/)*\n\n**2019-10-17**\n> *「当有一天我们回首往事，会知道拯救大兵肖恩是我们在战火纷飞的年代里，完成的一件杰作。」*\n> *———— [《拯救大兵肖恩》](https://movie.douban.com/subject/1292849/)*\n\n**2019-10-16**\n> *「我会把仪表一直开着，你会回来的，对吗？」*\n> *———— [《恐怖游轮》](https://movie.douban.com/subject/3011051/)*\n\n**2019-10-15**\n> *「有时候，一个梦想可以点亮整片天空。」*\n> *———— [《十月的天空》](https://movie.douban.com/subject/1293753/)*\n\n**2019-10-14**\n> *「打起精神来！打起精神来！」*\n> *———— [《蜡笔小新》](https://movie.douban.com/subject/1431683/)*\n\n**2019-10-13**\n> *「你还能哭，这说明你还有救。」*\n> *———— [《办公室的故事》](https://movie.douban.com/subject/1302205/)*\n\n**2019-10-12**\n> *「探戈里无所谓错步，不像人生。它简单，所以才棒，要是踏错步或绊倒了，继续跳就好！」*\n> *———— [《闻香识女人》](https://movie.douban.com/subject/1298624/)*\n\n**2019-10-11**\n> *「无论你剩下的光阴是五分钟还是五十年，如果不是今天，如果不是你，我永远不会了解爱。谢谢你成为那个教会我去爱和被爱的人。」*\n> *———— [《爱再来一次》](https://movie.douban.com/subject/1440703/)*\n\n**2019-10-10**\n> *「我知道自己是什么，也知道自己会变成什么。我看见一切，别人却视而不见。」*\n> *———— [《黑暗中的舞者》](https://movie.douban.com/subject/1291562/)*\n\n**2019-10-09**\n> *「如果我什么都没有，那我也就什么都不会失去了。」*\n> *———— [《蓝白红三部曲之蓝》](https://movie.douban.com/subject/1292048/)*\n\n**2019-10-08**\n> *「你师父平时都买八十只螃蟹，他三十，我五十，你这点儿够谁吃。」*\n> *———— [《师父》](https://movie.douban.com/subject/25919910/)」*\n\n**2019-10-07**\n> *「外婆，如果你病了，就发个空信，我就会知道是你，我会尽快来，好吗？」*\n> *「Grandma, if you get sick, just send a blank letter. Then I'll know it's you, and I'll come fast.」*\n> *———— [《爱·回家》](https://movie.douban.com/subject/1299361/)*\n\n**2019-10-06**\n> *「阿高，我觉得这是你应得的（金胡萝卜奖），为这个漂亮美好的西瓜，我们有很多地方要谢谢你。」*\n> *「Well, I think you deserve this, Gromit. For a brave and splendid melon. We've all got a lot to thank you for.」*\n> *「人人皆有得意之时。」*\n> *「Every dog has his day.」*\n> *———— [《超级无敌掌门狗：人兔的诅咒》](https://movie.douban.com/subject/1419901/)*\n\n**2019-10-05**\n> *「维斯帕：密码多少？」*\n> *「Vesper: 'The password, please.'」*\n> *「邦德：你的名字。」*\n> *「Bond: 'V-E-S-P-E-R.'」*\n> *———— [《007：大战皇家赌场》](https://movie.douban.com/subject/1418190/)*\n\n**2019-10-04**\n> *「只要人类不出现，一切都是美好和感人的。」*\n> *———— [《丛林赤子心》](https://movie.douban.com/subject/1473562/)*\n\n**2019-10-03**\n> *「我不在乎你是否完全属于我，我只要我爱的人一直在我身旁，即使他爱的是别人。」*\n> *———— [《隐藏的恋情》](https://movie.douban.com/subject/1946786/)*\n\n**2019-10-02**\n> *「你有五分钟沉迷在迷人的伤痛中，享受它，拥抱它，抛弃它……继续前进。」*\n> *「You have five minutes to wallow in the delicious misery. Enjoy it, embrace it, discard it...and proceed.」*\n> *———— [《伊丽莎白镇》](https://movie.douban.com/subject/1419933/)*\n\n**2019-10-01**\n> *「这是盐的味道，山的味道，风的味道，阳光的味道，也是时间的味道，人情的味道。这些味道，已经在漫长的时光中和故土、乡亲、念旧、勤俭、坚忍等等情感和信念混合在一起，才下舌尖，又上心间。」*\n> *———— [《舌尖上的中国 第一季》](https://movie.douban.com/subject/10606004/)*\n\n---\n\n### 九月 / September\n\n**2019-09-30**\n> *「永远给自己一个梦想，即使它很远。」*\n> *———— [《小鞋子》](https://movie.douban.com/subject/1303021/)*\n\n**2019-09-29**\n> *「在某个时刻，我们掌握了真实，但真实往往稍纵即逝。」*\n> *「Hence there's a moment in which we grasp reality, but then the moment passes.」*\n> *———— [《放大》](https://movie.douban.com/subject/1310176/)*\n\n**2019-09-28**\n> *「那天早上我还没有变成吸血鬼，我最后一次看了日出。我完全记得它的细节，但是我已忘记之前的每个日出。我最后一次欣赏这壮观的景色，就好像我是第一次看一样，然后我就对阳光永别了，变成了我现在的这个样子。」*\n> *「That morning, I was not yet a vampire and I saw my last sunrise. I remember it completely and yet I can't recall any sunrise before it. I watched the whole magnificence of the dawn for the last time as if it were the first. And then I said farewell to sunlight and set out to become.」*\n> *———— [《夜访吸血鬼》](https://movie.douban.com/subject/1299327/)*\n\n**2019-09-27**\n> *「你我犹如隔镜视物，所见无非虚幻迷蒙。」*\n> *———— [《攻壳机动队》](https://movie.douban.com/subject/1291936/)*\n\n**2019-09-26**\n> *「眼睛不在这里*\n> *在这星星即将死去的山谷*\n> *在这空心的山谷里*\n> *在我们这已经失去的破碎的王国*\n> *这里没有眼睛*\n> \n> *在这最后的相会处*\n> *我们在一起摸索*\n> *避免语言*\n> *在这条肿胀的河滩头聚会」*\n> ———— 《空心人》T.S. 艾略特\n> *-艾略特诞辰131周年-*\n> *———— [《现代启示录》](https://movie.douban.com/subject/1292260/)*\n\n**2019-09-25**\n> *「\b这些年轻人一点意志力也没有。」*\n> *「These young people have no willpower!」*\n> *———— [《充气娃娃之恋》](https://movie.douban.com/subject/1855834/)*\n\n**2019-09-24**\n> *「喝了咱的酒 / 一人敢走青刹口」*\n> *「喝了咱的酒 / 见了皇帝不磕头」*\n> *———— [《红高粱》](https://movie.douban.com/subject/1306505/)*\n\n**2019-09-23**\n> *「你不知道一支好曲子是会怎样地支配你。」*\n> *———— [《捕鼠者》](https://movie.douban.com/subject/1322674/)*\n\n**2019-09-22**\n> *「欢迎来到现实世界，它糟糕的要命，但你会爱上它的。」*\n> *「Welcome to the real world. It sucks. You're gonna love it.」*\n> *———— [《老友记 第一季》](https://movie.douban.com/subject/1393859/)*\n\n**2019-09-21**\n> *「或许我们需要一段时间独处，才能感触彼此灵魂的深处。当第一次在中央车站楼梯口相逢时，我们伫立良久，却未曾想过，会迎来这场命运的交集。」*\n> *———— [《中央车站》](https://movie.douban.com/subject/1292218/)*\n\n**2019-09-20**\n> *「如果有一天我忍不住问你，你一定要骗我。就算你心里多不情愿，也不要告诉我，你最爱的人不是我。」*\n> *「If I ever ask you this question, Please lie. No matter how your heart rebels, Please tell me I'm the one you love the most.」*\n> *———— [《东邪西毒》](https://movie.douban.com/subject/1292328/)*\n\n**2019-09-19**\n> *「深夜吃东西的魅力就是那一抹罪恶感。」*\n> *———— [《深夜食堂》](https://movie.douban.com/subject/3991933/)*\n\n**2019-09-18**\n> *「文明应该被尊重，*\n> *那么生命呢，*\n> *生命应该被尊重吗？*\n> *文明是人类创造出来的，*\n> *如果没有人类，*\n> *文明从何谈起？」*\n> \n> *-九一八事变88周年-*\n> *———— [《东京审判》](https://movie.douban.com/subject/1949812/)*\n\n**2019-09-17**\n> *「将近二十年了，我生活在一个大谎言里面，生活里面有好多的感受，痛苦的、快乐的、我好想跟你们分享，可是我不能。有时候我忍不住想干脆跟你们坦白算了，可是又不忍心把扛了这么多年的担子，再放到你们的肩膀上。」*\n> *「It's been 20 years. I've been living a big lie. There has been so much pain and joy...I've wanted to share with you, but I couldn't. Sometimes I wanted to tell you everything...but I couldn't burden you with what has been with me so long.」*\n> *———— [《\b喜宴》](https://movie.douban.com/subject/1303037/)*\n\n**2019-09-16**\n> *「我有充分的理由回家，但只有一个理由留下来。」*\n> *「什么理由？」*\n> *「你。」*\n> *「I've been thinking about it, and there's a million reasons for me to go home...but there's only one reason for me to stay.」*\n> *「What reason is that?」*\n> *「Well, you.」*\n> *———— [《长大》](https://movie.douban.com/subject/1293212/)*\n\n\n**2019-09-15**\n> *「可怜的盖斯帕德。」*\n> *「Poor Gaspard.」*\n> *--雅克·贝克诞辰113周年--*\n> *———— [《洞》](https://movie.douban.com/subject/1424334/)*\n\n**2019-09-14**\n> *「唯一会改变的事情就是，你会变得更加混蛋。」*\n> *「The only thing that's gonna change is you're gonna become an even bigger cunt.」*\n> *———— [《杀手没有假期》](https://movie.douban.com/subject/2044089/)*\n\n**2019-09-13**\n> *「适逢三五便团圆，满把晴光护玉栏。天上一轮才捧出，人间万姓仰头看。」 ————《对月寓怀》 / 曹雪芹*\n> *———— [《红楼梦》](https://movie.douban.com/subject/1864810/)*\n\n**2019-09-12**\n> *「我们不能在一起，但并不代表我不爱你。」*\n> *「I think it’s over between you and me.」*\n> *———— [《爱在暹罗》](https://movie.douban.com/subject/2365260/)*\n\n**2019-09-11**\n> *「宝贝，我向你保证，如果我能平安回来，明天就辞职。」*\n> *「But, baby, I promise you, if I get out of this, I'm quitting tomorrow.」*\n> *「当天四架遭到劫持的飞机，只有联航93没有撞向最终目标。它与10时03芬坠毁在滨州杉克谷镇附近，机上人员全部遇难。」 ———— 记9.11事件*\n> *———— [《93航班》](https://movie.douban.com/subject/1588945/)*\n\n**2019-09-10**\n> *「这是一首爱之歌，我知道你们会分享此爱，我祈求你们永远不会让它逝去。」*\n> *「I would like to sing for you now a love song. I know you share this love. I pray that you will never let it die.」*\n> *———— [《音乐之声》](https://movie.douban.com/subject/1294408/)*\n\n**2019-09-09**\n> *「别把生命中的敌人当成一种诅咒，它也可能是上天的恩赐。智者从敌人身上学到的，比愚者从朋友身上学到的还要多。」*\n> *「Stop thinking of it as a curse to have been given an enemy in life. It can be blessing too. A wise man gets more from his enemies than a fool from his friends.」*\n> *———— [《极速风流》](https://movie.douban.com/subject/6803494/)*\n","updated":"2020-02-16T17:09:36.248Z","path":"movies/index.html","comments":1,"_id":"ckcctyw9m00avm5sng0n2e0ok","content":"<hr>\n<h2 id=\"二零二零-2020\"><a href=\"#二零二零-2020\" class=\"headerlink\" title=\"二零二零 / 2020\"></a>二零二零 / 2020</h2><h3 id=\"一月-January\"><a href=\"#一月-January\" class=\"headerlink\" title=\"一月 / January\"></a>一月 / January</h3><p><strong>2020-02-18</strong></p>\n<blockquote>\n<p><em>「给亲戚看见我一个人食吉野家，差点想讲句你认错人吧，但我已经懂得怎么说些客套话。」</em><br><em>————《给亲戚看见我一个人食吉野家》/ 林阿P</em></p>\n</blockquote>\n<p><strong>2020-02-17</strong></p>\n<blockquote>\n<p><em>「所有的人，都是两面兽，一面是仁义道德、三纲五常；一面是男盗女娼、嗜血纵欲。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1043485/\" target=\"_blank\" rel=\"noopener\">《檀香木》/ 莫言</a></em></p>\n</blockquote>\n<p><strong>2020-02-16</strong></p>\n<blockquote>\n<p><em>「谁都可以过这种生活，但首先要能够知道弃绝另外一种人生。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26983143/\" target=\"_blank\" rel=\"noopener\">《遇见野兔的那一年》/ 阿托·帕西林纳</a></em></p>\n</blockquote>\n<p><strong>2020-02-15</strong></p>\n<blockquote>\n<p><em>「这道菜肴的名称叫“柠檬抱子甘蓝”。请大家记录！配料是给四个人吃的：八百克抱子甘蓝，一个柠檬的汁和未儿，一个洋葱头，一束欧芹，四十克黄油，黑胡椒粉和盐。」</em><br><em>———— <a href=\"https://book.douban.com/subject/6800379/\" target=\"_blank\" rel=\"noopener\">《2666》/ 罗贝托·波拉尼奥</a></em></p>\n</blockquote>\n<p><strong>2020-02-14</strong></p>\n<blockquote>\n<p><em>「烦恼片刻，陪伴是成年人的私藏安慰剂。」</em></p>\n</blockquote>\n<p><strong>2020-02-13</strong></p>\n<blockquote>\n<p><em>「那时的感情，确像一江春水，一树桃花，一朵早霞，一声云雀。它的感想是无私的，放射的，是无所不想拥抱，无所不想窥探的。」</em><br><em>———— <a href=\"https://book.douban.com/subject/4238141/\" target=\"_blank\" rel=\"noopener\">《故事和书》/ 孙犁</a></em></p>\n</blockquote>\n<p><strong>2020-02-12</strong></p>\n<blockquote>\n<p><em>「人世间所谓的生活是由大哭、抽泣、破涕为笑组合而成的，而在这之中抽泣占据了绝大部分。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1051193/\" target=\"_blank\" rel=\"noopener\">《麦琪的礼物》/ 欧·亨利</a></em></p>\n</blockquote>\n<p><strong>2020-02-11</strong></p>\n<blockquote>\n<p><em>「月亮下的细语都睡着，都睡着；我的茉莉也睡了，也睡了。寄给她一份美梦，好让她不忘记我。」</em><br><em>———— 《小茉莉》/ 邱晨</em></p>\n</blockquote>\n<p><strong>2020-02-10</strong></p>\n<blockquote>\n<p><em>「我理解的孤独并不是指悲惨的情境，而是隐秘的主宰力量、深刻的不可交流性，对一种无懈可击的独特性的朦胧的认识。」</em><br><em>———— <a href=\"https://book.douban.com/subject/11533606/\" target=\"_blank\" rel=\"noopener\">《贾科梅蒂的画家》/ 让·热内</a></em></p>\n</blockquote>\n<p><strong>2020-02-09</strong></p>\n<blockquote>\n<p><em>「他很吃惊：为什么他们能过得这么悠闲？他压根没有觉察到，自己对待时间和守财奴对待金钱如出一辙。」</em><br><em>———— <a href=\"https://book.douban.com/subject/21322405/\" target=\"_blank\" rel=\"noopener\">《路边草》/ 夏目漱石</a></em></p>\n</blockquote>\n<p><strong>2020-02-08</strong></p>\n<blockquote>\n<p><em>「人类和睦且世界和平的关键就在于父母对孩子的爱，就在于我们所说的家庭温暖。」</em><br><em>———— 《温暖的巢穴：动物如何解决家庭问题》/ 动物行为学家，维托斯·德吕舍尔</em></p>\n</blockquote>\n<p><strong>2020-02-07</strong></p>\n<blockquote>\n<p><em>「这些忽隐忽现的火花</em><br><em>最终渐渐消退、慢慢熄灭</em><br><em>————清醒生活的最后几粒</em><br><em>真正的火星儿从某个夜晚</em><br><em>才收到的馅饼摊或烤土豆摊飘落</em><br><em>————伦敦市就会随之沉入梦乡。」</em><br><em>———— <a href=\"https://book.douban.com/subject/21324344/\" target=\"_blank\" rel=\"noopener\">《伦敦夜行记》/ 查尔斯·狄更斯</a></em></p>\n</blockquote>\n<p><strong>2020-02-06</strong></p>\n<blockquote>\n<p><em>「如果神是宇宙的恒古寂静，那么人就是赋予这个寂静以意义的那一声哭啼。」</em><br><em>———— <a href=\"https://book.douban.com/subject/25768864/\" target=\"_blank\" rel=\"noopener\">《谎言的年代：萨拉马戈杂文集》/ </a></em></p>\n</blockquote>\n<p><strong>2020-02-05</strong></p>\n<blockquote>\n<p><em>「在地铁这块画布上，我们每个人都像杂耍演员，默默参与这一切的演出，一起建立一套属于公共场所的人类行为法则。」</em><br><em>———— <a href=\"https://book.douban.com/subject/30394844/\" target=\"_blank\" rel=\"noopener\">《巴黎地铁上的人类学家》/ 马克·奥热</a></em></p>\n</blockquote>\n<p><strong>2020-02-04</strong></p>\n<blockquote>\n<p><em>「而我的身世，已经早春；弃于某片荒芜，你经过我。」</em><br><em>———— 《早春的树》/ 唐映枫</em></p>\n</blockquote>\n<p><strong>2020-02-03</strong></p>\n<blockquote>\n<p><em>「他没有看见过海，也不希望看。世界的中心是北平。」</em><br><em>———— <a href=\"https://book.douban.com/subject/2031604/\" target=\"_blank\" rel=\"noopener\">《离婚》/ </a></em></p>\n</blockquote>\n<p><strong>2020-02-02</strong></p>\n<blockquote>\n<p><em>「我不怕孤独，我不怕被遗弃，我不怕丢掉我必须丢掉的一切，我不怕犯错误，甚至大错误，一生的遗恨，也许就像永恒一样悠远的错误。」</em><br><em>———— <a href=\"https://book.douban.com/subject/3898308/\" target=\"_blank\" rel=\"noopener\">《一个青年艺术家的画像》/ 詹姆斯·乔伊斯</a></em></p>\n</blockquote>\n<p><strong>2020-02-01</strong></p>\n<blockquote>\n<p><em>「无论什么人见到她，都会觉得她是那么超凡脱俗、绝对是上天赐予人间的小天使，因为她的脸上带着一种神圣的烙印。」</em><br><em>———— <a href=\"https://book.douban.com/subject/4886141/\" target=\"_blank\" rel=\"noopener\">《科学怪人》/ 玛丽·雪莱</a></em></p>\n</blockquote>\n<p><strong>2020-01-31</strong></p>\n<blockquote>\n<p><em>「\b\b社会当然存在无数无意义的工作，从来没有一个物种达到人类这样的过剩而不愿意死去，并且有如此多的方法苟且活着。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1607478/\" target=\"_blank\" rel=\"noopener\">《巴黎伦敦落魄记》/ 乔治·奥威尔</a></em></p>\n</blockquote>\n<p><strong>2020-01-30</strong></p>\n<blockquote>\n<p><em>「如今，明天直瞪瞪地啾着我，我却没有勇气直视明天。」</em><br><em>———— <a href=\"https://book.douban.com/subject/6313476/\" target=\"_blank\" rel=\"noopener\">《远大前程》/ 查尔斯·狄更斯</a></em></p>\n</blockquote>\n<p><strong>2020-01-29</strong></p>\n<blockquote>\n<p><em>「我想，人天生就喜欢躲藏，渴望消失，这是一点都不奇怪的事；何况，在我们来到这个世界之前，我们不就是躲得好好的，好到连我们自己都想不起来曾经藏身何处？」</em><br><em>———— <a href=\"https://book.douban.com/subject/27104286/\" target=\"_blank\" rel=\"noopener\">《寂寞的游戏》/ 袁哲生</a></em></p>\n</blockquote>\n<p><strong>2020-01-28</strong></p>\n<blockquote>\n<p><em>「一个人唯一可以用来对时间的工具，是记忆。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26053771/\" target=\"_blank\" rel=\"noopener\">《小于一》/ 约瑟夫·布罗茨基</a></em></p>\n</blockquote>\n<p><strong>2020-01-27</strong></p>\n<blockquote>\n<p><em>「人群就是共用一个影子的人们，就是不能共用一张嘴的人们，就是多数时喜气洋洋，穷开心，并且一开玩笑就过火的人们。」</em><br><em>———— <a href=\"https://book.douban.com/subject/19964269/\" target=\"_blank\" rel=\"noopener\">《够一梦》/ 西川</a></em></p>\n</blockquote>\n<p><strong>2020-01-26</strong></p>\n<blockquote>\n<p><em>「\b你一定瑶尝尝这个味道！」</em><br><em>「\b这是······有点烧烤味，有丰润多汁，不像完全烟熏的味道，有点像······」</em><br><em>「就像“砰”那种味道，你认为呢？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1793491/\" target=\"_blank\" rel=\"noopener\">《美食总动员》/ 布拉德·伯德 / 简·皮克瓦</a></em></p>\n</blockquote>\n<p><strong>2020-01-25</strong></p>\n<blockquote>\n<p><em>「每一英里、每一年、每一个人的每一滴泪，我无法解释，亲爱的，我甚至不会去尝试。我仅仅知道一件事，翅膀载爱而归。」</em><br><em>———— 《To Be By Your Side》 / 尼克·凯夫</em></p>\n</blockquote>\n<p><strong>2020-01-24</strong></p>\n<blockquote>\n<p><em>「跟什么人一起玩才是最最关键的。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26933790/\" target=\"_blank\" rel=\"noopener\">《少爷》</a></em></p>\n</blockquote>\n<p><strong>2020-01-23</strong></p>\n<blockquote>\n<p><em>「我离开了那所房子，哭着跑回家，像个诗人一样，看到什么都想哭。」</em><br><em>———— <a href=\"https://book.douban.com/subject/21346008/\" target=\"_blank\" rel=\"noopener\">《米格尔街》/ 维迪亚达·奈保尔</a></em></p>\n</blockquote>\n<p><strong>2020-01-22</strong></p>\n<blockquote>\n<p><em>「正由于我抱着与你相见的希望，我才永远认为最崎岖的路是最好的路。」</em><br><em>———— <a href=\"https://book.douban.com/subject/4246979/\" target=\"_blank\" rel=\"noopener\">《窄门》/ 安德丽·纪德</a></em></p>\n</blockquote>\n<p><strong>2020-01-21</strong></p>\n<blockquote>\n<p><em>「当你为马忙碌的时候，人们可以看到你在忙碌；但当你忙着写诗的时候，你看上去好像无所事事。」</em><br><em>———— <a href=\"https://book.douban.com/subject/25870629/\" target=\"_blank\" rel=\"noopener\">《亲爱的生活》/ 艾丽丝·门罗</a></em></p>\n</blockquote>\n<p><strong>2020-01-20</strong></p>\n<blockquote>\n<p><em>「暴力的终极弱点在于它恰好产生它试图摧毁的东西。」</em><br><em>———— <a href=\"https://book.douban.com/subject/3711441/\" target=\"_blank\" rel=\"noopener\">《马丁·路德：金自传》/ 马丁·路德：金</a></em></p>\n</blockquote>\n<p><strong>2020-01-19</strong></p>\n<blockquote>\n<p><em>「在澄明的夜空下，银河倾斜到清晨。松鸦啼搅，咖啡煮沸。」</em><br><em>———— <a href=\"https://book.douban.com/subject/30217925/\" target=\"_blank\" rel=\"noopener\">《砌石与寒山诗》/ 加里·斯奈德</a></em></p>\n</blockquote>\n<p><strong>2020-01-18</strong></p>\n<blockquote>\n<p><em>「于是我说：我在观察青蛙。接着，我又毫无说服力地补充说：“这项工作很重要。”」</em><br><em>————《观察青蛙的女人》/ 南希·克雷斯</em></p>\n</blockquote>\n<p><strong>2020-01-17</strong></p>\n<blockquote>\n<p><em>「旧时创痕，最好是不要去剃它，要是剥着，依然会流血的。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1394402/\" target=\"_blank\" rel=\"noopener\">《死水微澜》/ 李劼人</a></em></p>\n</blockquote>\n<p><strong>2020-01-16</strong></p>\n<blockquote>\n<p><em>「坐在屋里，我的面前是一整块干干净净、纯纯粹粹的时间，它庞大得像一只大狗熊，一屁股坐在我身上不挪窝，直到父母亲再一次回来。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26791998/\" target=\"_blank\" rel=\"noopener\">《山中的糖果》/ 邓安庆</a></em></p>\n</blockquote>\n<p><strong>2020-01-15</strong></p>\n<blockquote>\n<p><em>「受欢迎本身也丝毫不能打动他，不过，随之而来的实际好处可以。」</em><br><em>———— 《朱莉亚·拉扎里》/ 威廉·毛姆</em></p>\n</blockquote>\n<p><strong>2020-01-14</strong></p>\n<blockquote>\n<p><em>「我们都会怀念史努比，就像上个世纪的人怀念19世纪的单纯一样。」</em><br><em>———— <a href=\"https://book.douban.com/subject/5321895/\" target=\"_blank\" rel=\"noopener\">《那些忧伤的年轻人》</a></em><br><strong>2020-01-13</strong><br><em>「所谓“希望”，就是付出努力有可能比完全放弃强一点点。」</em><br><em>———— <a href=\"https://book.douban.com/subject/27184303/\" target=\"_blank\" rel=\"noopener\">《遥远的向日葵地》</a></em></p>\n</blockquote>\n<p><strong>2020-01-12</strong></p>\n<blockquote>\n<p><em>「穿运动鞋；」</em><br><em>「每月去一次理发店」</em><br><em>「（不是美容院）;」</em><br><em>「不一一自我辩解。」</em><br><em>「这就是对我而言的“男孩”形象。」</em><br><em>———— <a href=\"https://book.douban.com/subject/5366434/\" target=\"_blank\" rel=\"noopener\">《终究悲哀的外国语》</a></em></p>\n</blockquote>\n<p><strong>2020-01-11</strong></p>\n<blockquote>\n<p><em>「他们之所以暂时停下」</em><br><em>「脚步仅仅是因为身体里的」</em><br><em>「潮汐出现了某种」</em><br><em>「懈怠，那是由于上午和下午两股势力在旋涡中相会所致」</em><br><em>———— <a href=\"https://book.douban.com/subject/26312708/\" target=\"_blank\" rel=\"noopener\">《达洛维夫人》/ 弗吉尼亚·伍尔夫</a></em></p>\n</blockquote>\n<p><strong>2020-01-10</strong></p>\n<blockquote>\n<p><em>「\b梦是一座没有城墙的城。」</em><br><em>「梦是星星笔底下的素描。」</em><br><em>「梦是神话的儿子」</em><br><em>「梦是幻想的碎片」</em><br><em>「梦是虚妄」</em><br><em>———— <a href=\"https://book.douban.com/subject/6127284/\" target=\"_blank\" rel=\"noopener\">《酒徒》/ 刘以鬯</a></em></p>\n</blockquote>\n<p><strong>2020-01-09</strong></p>\n<blockquote>\n<p><em>「我身上发生了什么事？」</em><br><em>「可到底事什么事呢？」</em><br><em>———— <a href=\"https://book.douban.com/subject/26357036/\" target=\"_blank\" rel=\"noopener\">《恋爱中的波伏瓦》/ 伊蕾娜·弗兰</a></em></p>\n</blockquote>\n<p><strong>2020-01-08</strong></p>\n<blockquote>\n<p><em>「在水鸟梦中的一片银月下，我听见了你提问以后的寂静，那些问题今夜多老。」</em><br><em>———— 《给苏东坡的一封信》/ W.S 默温</em></p>\n</blockquote>\n<p><strong>2020-01-07</strong></p>\n<blockquote>\n<p><em>「我终于意识到，被突然切断的，其实并不是返乡之路，而是对于生命之根的所有幻觉和记忆。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26757657/\" target=\"_blank\" rel=\"noopener\">《望春风》/ 格非</a></em></p>\n</blockquote>\n<p><strong>2020-01-06</strong></p>\n<blockquote>\n<p><em>「连离我最近的那座山都下起了雪。那不是皑皑的、沧桑的面貌，或者确切说是玲珑的、写意的初老。」</em><br><em>———— <a href=\"https://book.douban.com/subject/27081783/\" target=\"_blank\" rel=\"noopener\">《樱桃青衣》/ 张怡微</a></em></p>\n</blockquote>\n<p><strong>2020-01-05</strong></p>\n<blockquote>\n<p><em>「我平生对患有各种偏执狂的人、一个心眼儿到底的人最有兴趣，因为一个人知识面越是有限，他离无限就越近。」</em><br><em>———— <a href=\"https://book.douban.com/subject/2158684/\" target=\"_blank\" rel=\"noopener\">《象棋的故事》/ 斯蒂芬·茨威格</a></em></p>\n</blockquote>\n<p><strong>2020-01-04</strong></p>\n<blockquote>\n<p><em>「时间总要在人们的打算与结果之间创造出一些花样，即可教育当事人自己，也好让邻居为之开心。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1427784/\" target=\"_blank\" rel=\"noopener\">《曼斯菲尔德庄园》/ 简·奥斯丁</a></em></p>\n</blockquote>\n<p><strong>2020-01-03</strong></p>\n<blockquote>\n<p><em>「在我们称之为一年的周而复始的季节周期当中，臭鼬留下的足迹可以说是一年之始的标志事件之一。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1398925/\" target=\"_blank\" rel=\"noopener\">《沙乡年鉴》/ 奥尔多·利奥波德</a></em></p>\n</blockquote>\n<p><strong>2020-01-02</strong></p>\n<blockquote>\n<p><em>「你不喜欢这份未来？把它关掉。另点一份。把这一份还给寄件人。」</em><br><em>————《硬球》/ 玛格丽特·阿特伍德</em></p>\n</blockquote>\n<p><strong>2020-01-01</strong></p>\n<blockquote>\n<p><em>「我是个诗人，没有能力直接抵达任何东西。」</em><br><em>———— <a href=\"https://book.douban.com/subject/27180479/\" target=\"_blank\" rel=\"noopener\">《奥古斯都》/ 约翰·威廉斯</a></em></p>\n</blockquote>\n<hr>\n<h2 id=\"二零一九\"><a href=\"#二零一九\" class=\"headerlink\" title=\"二零一九\"></a>二零一九</h2><h3 id=\"十二月-December\"><a href=\"#十二月-December\" class=\"headerlink\" title=\"十二月 / December\"></a>十二月 / December</h3><p><strong>2019-12-31</strong></p>\n<blockquote>\n<p><em>「昨天是历史，明天是未知，只有今天才是天赐的礼物。」</em><br><em>「Yesterday is history, tomorrow is a mystery, but today is a gift, that is why it is called Present.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1783457/\" target=\"_blank\" rel=\"noopener\">《功夫熊猫》</a></em></p>\n</blockquote>\n<p><strong>2019-12-30</strong></p>\n<blockquote>\n<p><em>「他出现，又消失。一如日升日落，抑或任何转瞬即逝的事物，就像我们的生活。我们出现，然后我们又消失。我们对一些人而言是如此重要，但我们只是过客。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10808442/\" target=\"_blank\" rel=\"noopener\">《爱在午夜降临前》</a></em></p>\n</blockquote>\n<p><strong>2019-12-29</strong></p>\n<blockquote>\n<p><em>「我从不相信好的神话，对那些坏的深化却深信不疑。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1295656/\" target=\"_blank\" rel=\"noopener\">《潜行者》</a></em></p>\n</blockquote>\n<p><strong>2019-12-28</strong></p>\n<blockquote>\n<p><em>「电影发明以后，人类的生命比起以前延长了至少三倍。」 ———— 杨德昌</em><br><em>———— <a href=\"https://movie.douban.com/subject/1867742/\" target=\"_blank\" rel=\"noopener\">《火车进站》</a></em></p>\n</blockquote>\n<p><strong>2019-12-27</strong></p>\n<blockquote>\n<p><em>「为什么你不把我带到其他回忆的地方去？到一个没有我的回忆里。我们藏在哪里，直到明早。」</em><br><em>「该死，我不记得任何没有你的回忆」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1308777/\" target=\"_blank\" rel=\"noopener\">《暖暖内含光》</a></em></p>\n</blockquote>\n<p><strong>2019-12-26</strong></p>\n<blockquote>\n<p><em>「朋友考试不及格，你感觉很糟；朋友考试考第一，你感觉更糟。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3793023/\" target=\"_blank\" rel=\"noopener\">《三傻大闹宝莱坞》</a></em></p>\n</blockquote>\n<p><strong>2019-12-25</strong></p>\n<blockquote>\n<p><em>「铃声每响一次，就有一个天使获得了翅膀。」</em><br><em>「\bEvery time a bel rings, an angel gets his wings.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293749/\" target=\"_blank\" rel=\"noopener\">《生活多美好》</a></em></p>\n</blockquote>\n<p><strong>2019-12-24</strong></p>\n<blockquote>\n<p><em>「如果用心寻找，你能发现，其实爱无处不在。」</em><br><em>「If you look for it, I’ve got a sneaky feeling you’ll find that love actually is all around.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292401/\" target=\"_blank\" rel=\"noopener\">《真爱至上》</a></em></p>\n</blockquote>\n<p><strong>2019-12-23</strong></p>\n<blockquote>\n<p><em>「虽然天气寒冷令人头疼，但是有些食物在天冷的时候才能做，寒冷也是很重要的调味料。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25814707/\" target=\"_blank\" rel=\"noopener\">《小森林 冬春篇》</a></em></p>\n</blockquote>\n<p><strong>2019-12-22</strong></p>\n<blockquote>\n<p><em>「冬天是十一月 十二月」</em><br><em>「一月 二月 三月 四月」</em><br><em>「当我的光曝在你身上」</em><br><em>「重逢就是一间暗室」</em><br><em>–《无题》/ 毕赣–</em><br><em>———— <a href=\"https://movie.douban.com/subject/26337866/\" target=\"_blank\" rel=\"noopener\">《路边野餐》</a></em></p>\n</blockquote>\n<p><strong>2019-12-21</strong></p>\n<blockquote>\n<p><em>「我们总是喜欢得不到的东西。但是人啊，总是要经历点什么，才会知道自己真正要的是什么。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/26586432/\" target=\"_blank\" rel=\"noopener\">《契克》</a></em></p>\n</blockquote>\n<p><strong>2019-12-20</strong></p>\n<blockquote>\n<p><em>「我们虽然笑着说很快再见，但内心知道，可能后会无期。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292001/\" target=\"_blank\" rel=\"noopener\">《海上钢琴师》</a></em></p>\n</blockquote>\n<p><strong>2019-12-19</strong></p>\n<blockquote>\n<p><em>「当你越了解你是谁、你想要什么时，你就越不容易感到沮丧。」</em><br><em>「The more you know who you are and what you want, the less you let things upset you.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291835/\" target=\"_blank\" rel=\"noopener\">《迷失东京》</a></em></p>\n</blockquote>\n<p><strong>2019-12-18</strong></p>\n<blockquote>\n<p><em>「谢谢你玩我的游戏。」</em><br><em>「Thanks for playing my game.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/4920389/\" target=\"_blank\" rel=\"noopener\">《头号玩家》</a></em></p>\n</blockquote>\n<p><strong>2019-12-17</strong></p>\n<blockquote>\n<p><em>「世界充满了恶意，但如果我们相互理解支持，恶意就会消散。」</em><br><em>「The world is full of wickedness. But if we support each other,it will eventually go away.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/6985810/\" target=\"_blank\" rel=\"noopener\">《狩猎》</a></em></p>\n</blockquote>\n<p><strong>2019-12-16</strong></p>\n<blockquote>\n<p><em>「我没有朋友，身边只有你。」</em><br><em>「I don’t have friends. I’ve just got one.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3986493/\" target=\"_blank\" rel=\"noopener\">《神探夏洛克 第一季》</a></em></p>\n</blockquote>\n<p><strong>2019-12-15</strong></p>\n<blockquote>\n<p><em>「我让魔鬼进入了我的身体，现在我无法摆脱他了。我用火、用刀都不能把他驱赶出来，为什么？他或许不想无家可归吧。」</em><br><em>「\b\bI let the Devill in, Now I can’t get him out. I tried… burning him out and cutting him out. He don’t take no notice. Why should he? He don’t wanna be homeless.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/2133337/\" target=\"_blank\" rel=\"noopener\">《斯图尔特：倒带人生》</a></em></p>\n</blockquote>\n<p><strong>2019-12-14</strong></p>\n<blockquote>\n<p><em>「当我还是孩子的时候，妈妈带着我去看《白雪公主》。人人都爱上了白雪公主，而我偏偏爱上了那个邪恶的皇后。」</em><br><em>「When my mother took me to see Snow White, everyone fell in love with Snow White. I immediately fell for the Wicked Queen.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1296987/\" target=\"_blank\" rel=\"noopener\">《安妮·霍尔》</a>」</em></p>\n</blockquote>\n<p><strong>2019-12-13</strong></p>\n<blockquote>\n<p><em>「爱与恨，她们比我们任何一个都了解爱与恨。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3649049/\" target=\"_blank\" rel=\"noopener\">《金陵十三钗》</a></em></p>\n</blockquote>\n<p><strong>2019-12-12</strong></p>\n<blockquote>\n<p><em>「东京那么大，如果不小心走散了，可能一辈子也见不到了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291568/\" target=\"_blank\" rel=\"noopener\">《东京物语》</a></em></p>\n</blockquote>\n<p><strong>2019-12-11</strong></p>\n<blockquote>\n<p><em>「我总是在想酒是如何不断地成熟变化的，就好比今天我如果打开了一瓶酒，它的味道一定和其他任何一天打开的时候有所不同。因为酒是有生命的，它在不断地变化并且越来越复杂。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291833/\" target=\"_blank\" rel=\"noopener\">《杯酒人生》</a></em></p>\n</blockquote>\n<p><strong>2019-12-10</strong></p>\n<blockquote>\n<p><em>「铺好这张宽大的床</em><br><em>让它令人敬畏————</em><br><em>躺在床上等待审判日破晓</em><br><em>美妙而公正</em></p>\n<p><em>把它的床垫摆得笔直</em><br><em>把它的枕头拍圆</em><br><em>别让日出时黄色的噪音</em><br><em>打扰这块土地」</em><br>———— 《铺好这张宽大的床》/ 艾米丽·狄金森<br><em>-国际人权日-</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293077/\" target=\"_blank\" rel=\"noopener\">《苏菲的抉择》</a></em></p>\n</blockquote>\n<p><strong>2019-12-09</strong></p>\n<blockquote>\n<p><em>「很难讲清楚我们生活的这个世界，到底是真实，还是梦境。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1308833/\" target=\"_blank\" rel=\"noopener\">《空房间》</a></em></p>\n</blockquote>\n<p><strong>2019-12-08</strong></p>\n<blockquote>\n<p><em>「她怎么去世的？」</em><br><em>「某天照镜子被自己吓死的。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/6538833/\" target=\"_blank\" rel=\"noopener\">《内布拉斯加》</a></em></p>\n</blockquote>\n<p><strong>2019-12-07</strong></p>\n<blockquote>\n<p><em>「你永远也不晓得自己有多喜欢一个人，除非你看见他和别人在一起。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292215/\" target=\"_blank\" rel=\"noopener\">《天使爱美丽》</a></em></p>\n</blockquote>\n<p><strong>2019-12-06</strong></p>\n<blockquote>\n<p><em>「美丽的梭罗河 / 我为你歌唱 / 你的光荣历史 / 我永远记在心上 / 旱季来临 / 你轻轻流淌 / 雨季时波涛滚滚 / 你流向远方。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1766086/\" target=\"_blank\" rel=\"noopener\">《太阳照常升起》</a></em></p>\n</blockquote>\n<p><strong>2019-12-05</strong></p>\n<blockquote>\n<p><em>「当你认为生活已经糟糕得不可能再糟糕了得时候，它居然真的更糟糕了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292267/\" target=\"_blank\" rel=\"noopener\">《银河系漫游指南》</a></em></p>\n</blockquote>\n<p><strong>2019-12-04</strong></p>\n<blockquote>\n<p><em>「友情提示，为保证没有看过这部电影的朋友有机会获得更大的观影乐趣，请您不要向任何人透露《控方证人》的结局。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1296141/\" target=\"_blank\" rel=\"noopener\">《控方证人》</a></em></p>\n</blockquote>\n<p><strong>2019-12-03</strong></p>\n<blockquote>\n<p><em>「我们是由梦构成的，而梦是由我们构成的。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292533/\" target=\"_blank\" rel=\"noopener\">《狂人皮埃罗》</a></em></p>\n</blockquote>\n<p><strong>2019-12-02</strong></p>\n<blockquote>\n<p><em>「你知道吗？唯一能赋予我人生价值的事，就是为数不多的、能够真正和另一个人心灵相契的几个瞬间。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3275168/\" target=\"_blank\" rel=\"noopener\">《单身男子》</a></em></p>\n</blockquote>\n<p><strong>2019-12-01</strong></p>\n<blockquote>\n<p><em>「我们都害怕死亡，并质疑自己在宇宙中的位置。艺术家的使命不是向绝望屈服，而是找到一方解药，来对抗存在的虚无。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/4319218/\" target=\"_blank\" rel=\"noopener\">《午夜巴黎》</a></em></p>\n</blockquote>\n<hr>\n<h3 id=\"十一月-November\"><a href=\"#十一月-November\" class=\"headerlink\" title=\"十一月 / November\"></a>十一月 / November</h3><p><strong>2019-11-30</strong></p>\n<blockquote>\n<p><em>「我见过你们人类无法置信的事物。我目睹战舰在猎户星座的端沿起火燃烧，我看着C射线在唐怀瑟之门附近的黑暗中闪耀。但所有这些时刻，终将随着时间消逝，一如眼泪消失在雨中。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291839/\" target=\"_blank\" rel=\"noopener\">《银翼杀手》</a></em></p>\n</blockquote>\n<p><strong>2019-11-29</strong></p>\n<blockquote>\n<p><em>「我不喜欢葡萄干，它们以前饱满多汁，现在它们被扭曲了，就像它们的生命被窃取了一样。它们吃起来很甜，但是真的，它们只是被羞辱了的葡萄。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1308314/\" target=\"_blank\" rel=\"noopener\">《邦尼和琼》</a></em></p>\n</blockquote>\n<p><strong>2019-11-28</strong></p>\n<blockquote>\n<p><em>「过去唯一的用处，就是让我不再想回到过去。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1418070/\" target=\"_blank\" rel=\"noopener\">《如果\b·爱》</a></em></p>\n</blockquote>\n<p><strong>2019-11-27</strong></p>\n<blockquote>\n<p><em>「如果你对一个人说话，那人没有反应，那么你能坚持多久，一天？一个月？还是四年？如果你爱一个人，那人没有反应，那么你能坚持多久，三个月？五年？还是一生？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292211/\" target=\"_blank\" rel=\"noopener\">《对她说》</a></em></p>\n</blockquote>\n<p><strong>2019-11-26</strong></p>\n<blockquote>\n<p><em>「地球上不会有这样一片净土。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293764/\" target=\"_blank\" rel=\"noopener\">《与狼共舞》</a></em></p>\n</blockquote>\n<p><strong>2019-11-25</strong></p>\n<blockquote>\n<p><em>「医生们说咱俩没事儿。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/27019527/\" target=\"_blank\" rel=\"noopener\">《嘉年华》</a></em></p>\n</blockquote>\n<p><strong>2019-11-24</strong></p>\n<blockquote>\n<p><em>「我不知道你的故事是如何结束的，但如果你觉得那是真爱，那么它永远不会太晚。但如果那是真爱，为什么现在不是呢？你需要的只是尊从内心的勇气。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3346464/\" target=\"_blank\" rel=\"noopener\">《给朱丽叶的信》</a></em></p>\n</blockquote>\n<p><strong>2019-11-23</strong></p>\n<blockquote>\n<p><em>「你不是唯一的受害者，我也是受害者，我是自己本能的受害者。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/7155005/\" target=\"_blank\" rel=\"noopener\">《游客》</a></em></p>\n</blockquote>\n<p><strong>2019-11-22</strong></p>\n<blockquote>\n<p><em>「我爱她并不是因为她适合我，我只是爱她。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1297769/\" target=\"_blank\" rel=\"noopener\">《马语者》</a></em></p>\n</blockquote>\n<p><strong>2019-11-21</strong></p>\n<blockquote>\n<p><em>「你像是从宇宙中飞来，我的天使。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10757577/\" target=\"_blank\" rel=\"noopener\">《卡罗尔》</a></em></p>\n</blockquote>\n<p><strong>2019-11-20</strong></p>\n<blockquote>\n<p><em>「我原来就坐在那儿，我曾是中国的皇帝。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293172/\" target=\"_blank\" rel=\"noopener\">《末代皇帝》</a></em></p>\n</blockquote>\n<p><strong>2019-11-19</strong></p>\n<blockquote>\n<p><em>「某个人想遗忘的，可能是其他人忘不了的。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1309210/\" target=\"_blank\" rel=\"noopener\">《神秘肌肤》</a></em></p>\n</blockquote>\n<p><strong>2019-11-18</strong></p>\n<blockquote>\n<p><em>「世上有千千万万的人和你一样不快乐。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/6097775/\" target=\"_blank\" rel=\"noopener\">《艺术家》</a></em></p>\n</blockquote>\n<p><strong>2019-11-17</strong></p>\n<blockquote>\n<p><em>「对你的爱会持续多久？只要你头顶的星星依旧闪烁。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10577869/\" target=\"_blank\" rel=\"noopener\">《时空恋旅人》</a>)</em></p>\n</blockquote>\n<p><strong>2019-11-16</strong></p>\n<blockquote>\n<p><em>「做你想做的，其他的都滚蛋。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1777612/\" target=\"_blank\" rel=\"noopener\">《阳光小美女》</a></em></p>\n</blockquote>\n<p><strong>2019-11-15</strong></p>\n<blockquote>\n<p><em>「查理，有遗言吗？」</em><br><em>「别把钱只用在一个地方。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1937257/\" target=\"_blank\" rel=\"noopener\">《微不足道》</a></em></p>\n</blockquote>\n<p><strong>2019-11-14</strong></p>\n<blockquote>\n<p><em>「当两个人相爱，但无法幸福，这才是真正的悲剧。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/21318488/\" target=\"_blank\" rel=\"noopener\">《消失的爱人》</a></em></p>\n</blockquote>\n<p><strong>2019-11-13</strong></p>\n<blockquote>\n<p><em>「虽然我对他很生气，但是他对我还是有吸引力的。为什么我要将他拱手让人？谁说一定是她赢？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292268/\" target=\"_blank\" rel=\"noopener\">《好家伙》</a></em></p>\n</blockquote>\n<p><strong>2019-11-12</strong></p>\n<blockquote>\n<p><em>「致怀抱梦想的傻瓜们，哪怕他们看来疯癫不羁；致那些支离破碎的心；致我们闯下的祸。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25934014/\" target=\"_blank\" rel=\"noopener\">《爱乐之城》</a></em></p>\n</blockquote>\n<p><strong>2019-11-11</strong></p>\n<blockquote>\n<p><em>「所有的光鲜亮丽都敌不过时间，并且一去不复返。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3364223/\" target=\"_blank\" rel=\"noopener\">《了不起的盖茨比》</a></em></p>\n</blockquote>\n<p><strong>2019-11-10</strong></p>\n<blockquote>\n<p><em>「找到了！</em><br><em>什么？永恒</em><br><em>那是太阳与海</em><br><em>交相辉映</em></p>\n<p><em>我永恒的灵魂</em><br><em>注视着你的心</em><br><em>纵然黑夜孤寂</em><br><em>白昼如焚」</em><br>————《永恒》/ 阿蒂尔·兰波<br><em>-兰波逝世128周年-</em><br><em>———— <a href=\"https://movie.douban.com/subject/1297233/\" target=\"_blank\" rel=\"noopener\">《心之全蚀》</a></em></p>\n</blockquote>\n<p><strong>2019-11-09</strong></p>\n<blockquote>\n<p><em>「不要温顺地走进这个良夜，激情不能被消沉的暮色淹没；咆哮吧，咆哮，痛斥那光的退缩。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1889243/\" target=\"_blank\" rel=\"noopener\">《星际穿越》</a></em></p>\n</blockquote>\n<p><strong>2019-11-08</strong></p>\n<blockquote>\n<p><em>「一切都还顺利，但若想更进一步，我就得抢先对手一步，并承担起风险。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25750969/\" target=\"_blank\" rel=\"noopener\">《夜行者》</a></em></p>\n</blockquote>\n<p><strong>2019-11-07</strong></p>\n<blockquote>\n<p><em>「你大概是我现在每天醒来的唯一动力了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25929151/\" target=\"_blank\" rel=\"noopener\">《遇见你之前》</a></em></p>\n</blockquote>\n<p><strong>2019-11-06</strong></p>\n<blockquote>\n<p><em>「本来以为，我再活一次的话，也许会有什么不一样。结果还是差不多，没什么不同。只是突然觉得，再活一次的话，好像，真的没那个必要。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292434/\" target=\"_blank\" rel=\"noopener\">《一一》</a></em></p>\n</blockquote>\n<p><strong>2019-11-05</strong></p>\n<blockquote>\n<p><em>「人们总梦想上天摘星，结局却和鱼缸里的金鱼一样。我觉得从一开始就让孩子明白人生是荒谬的，事情就简单多了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3824274/\" target=\"_blank\" rel=\"noopener\">《刺猬的优雅》</a></em></p>\n</blockquote>\n<p><strong>2019-11-04</strong></p>\n<blockquote>\n<p><em>「没人不希望恶有恶报，但又没人愿意脏了自己的手。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/24750126/\" target=\"_blank\" rel=\"noopener\">《荒蛮故事》</a></em></p>\n</blockquote>\n<p><strong>2019-11-03</strong></p>\n<blockquote>\n<p><em>「当你有任何烦恼和不开心时，只需大声叫出——Hakuna Matata!」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1301753/\" target=\"_blank\" rel=\"noopener\">《狮子王》</a></em></p>\n</blockquote>\n<p><strong>2019-11-02</strong></p>\n<blockquote>\n<p><em>「花太多时间去想所剩下的生命，反而忘了好好地生活。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1418752/\" target=\"_blank\" rel=\"noopener\">《万能钥匙》</a></em></p>\n</blockquote>\n<p><strong>2019-11-01</strong></p>\n<blockquote>\n<p><em>「若你在逗留期间没有找到伴侣，就会变成一种动物。你曾想过自己会变成什么吗？大部分人会想到狗，所以世上才有那么多狗。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/20514947/\" target=\"_blank\" rel=\"noopener\">《龙虾》</a></em></p>\n</blockquote>\n<hr>\n<h3 id=\"十月-October\"><a href=\"#十月-October\" class=\"headerlink\" title=\"十月 / October\"></a>十月 / October</h3><p><strong>2019-10-31</strong></p>\n<blockquote>\n<p><em>「爱意味着永远用不着说对不起。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293203/\" target=\"_blank\" rel=\"noopener\">《人鬼情未了》</a></em></p>\n</blockquote>\n<p><strong>2019-10-30</strong></p>\n<blockquote>\n<p><em>「对我来说，走进这间屋子，比回我自己家容易。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3604148/\" target=\"_blank\" rel=\"noopener\">《小丑回魂》</a></em></p>\n</blockquote>\n<p><strong>2019-10-29</strong></p>\n<blockquote>\n<p><em>「你一直戴着它？」</em><br><em>「是的，傻瓜。我一直戴着它，一直戴着。我一直爱着你。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291853/\" target=\"_blank\" rel=\"noopener\">《英国病人》</a></em></p>\n</blockquote>\n<p><strong>2019-10-28</strong></p>\n<blockquote>\n<p><em>「我的爸爸曾对我说过他的致富经历：有一天，它捡到一个苹果并把它卖了，赚了一法郎。他用赚的一法郎买了两个苹果，并以两法郎的价格卖出了两个苹果……再后来，他继承了他叔叔的遗产。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3157605/\" target=\"_blank\" rel=\"noopener\">《巴黎淘气帮》</a></em></p>\n</blockquote>\n<p><strong>2019-10-27</strong></p>\n<blockquote>\n<p><em>「我们离开这里好不好？」</em><br><em>「我们能去哪里？」</em><br><em>「我也不知道。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1307561/\" target=\"_blank\" rel=\"noopener\">《青少年哪吒》</a></em></p>\n</blockquote>\n<p><strong>2019-10-26</strong></p>\n<blockquote>\n<p><em>「事物总是会变化的，这是自然法则。大多数人害怕变化，但如果你把它看成是某种你总是可以依赖的东西的话，那它就能成为一种安慰。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293929/\" target=\"_blank\" rel=\"noopener\">《廊桥遗梦》</a></em></p>\n</blockquote>\n<p><strong>2019-10-25</strong></p>\n<blockquote>\n<p><em>「沉沉闷闷，</em><br><em>迷迷蒙蒙，</em><br><em>钟声荡起。</em><br><em>往事如烟，</em><br><em>在眼前重现，</em><br><em>我落泪如雨。</em></p>\n<p><em>我走了，</em><br><em>恶风卷着我，</em><br><em>东飘西零。</em><br><em>飘呵，飘呵，</em><br><em>宛如那，</em><br><em>枯叶飘零。」</em><br>————《秋之歌》/ 保尔·魏尔伦<br><em>———— <a href=\"https://movie.douban.com/subject/26616719/\" target=\"_blank\" rel=\"noopener\">《弗兰兹》</a></em></p>\n</blockquote>\n<p><strong>2019-10-24</strong></p>\n<blockquote>\n<p><em>「机器不同于人，所以他们以不同的方式思考。有趣的问题是，只因为某样东西与你思考的方式不同，就意味着它不思考吗？我们允许人与人之间存在诸多差异，你喜欢草莓，我讨厌溜冰，你看悲剧电影会哭，我对花粉过敏。若不是表明我们的大脑以不同的方式工作、以不同的方式思考，那么不同的品味、不同的喜好，有什么意义呢？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10463953/\" target=\"_blank\" rel=\"noopener\">《模仿游戏》</a></em></p>\n</blockquote>\n<p><strong>2019-10-23</strong></p>\n<blockquote>\n<p><em>「多希望我能知道该如何戒掉你。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1418834/\" target=\"_blank\" rel=\"noopener\">《断背山》</a></em></p>\n</blockquote>\n<p><strong>2019-10-22</strong></p>\n<blockquote>\n<p><em>「当你可以跟一个人不说话，分享片刻寂静，且不会觉得尴尬时，那一刻你就会知道，你遇到了对的人。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291832/\" target=\"_blank\" rel=\"noopener\">《低俗小说》</a></em></p>\n</blockquote>\n<p><strong>2019-10-21</strong></p>\n<blockquote>\n<p><em>「三个女人一台戏，八个女人一台自嗨的舞台剧。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1299292/\" target=\"_blank\" rel=\"noopener\">《八美图》</a></em></p>\n</blockquote>\n<p><strong>2019-10-20</strong></p>\n<blockquote>\n<p><em>「不是谁都能成为伟大的艺术家，但伟大的艺术家可能来自任何地方。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1793491/\" target=\"_blank\" rel=\"noopener\">《美食总动员》</a></em></p>\n</blockquote>\n<p><strong>2019-10-19</strong></p>\n<blockquote>\n<p><em>「每一天，都将是我们余下生命之中的每一天。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292062/\" target=\"_blank\" rel=\"noopener\">《美国丽人》</a></em></p>\n</blockquote>\n<p><strong>2019-10-18</strong></p>\n<blockquote>\n<p><em>「不管怎样，我的心已经支离破碎，永远都无法愈合。我知道你的心也碎了，但我不需要背负。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25980443/\" target=\"_blank\" rel=\"noopener\">《海边的曼彻斯特》</a></em></p>\n</blockquote>\n<p><strong>2019-10-17</strong></p>\n<blockquote>\n<p><em>「当有一天我们回首往事，会知道拯救大兵肖恩是我们在战火纷飞的年代里，完成的一件杰作。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292849/\" target=\"_blank\" rel=\"noopener\">《拯救大兵肖恩》</a></em></p>\n</blockquote>\n<p><strong>2019-10-16</strong></p>\n<blockquote>\n<p><em>「我会把仪表一直开着，你会回来的，对吗？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3011051/\" target=\"_blank\" rel=\"noopener\">《恐怖游轮》</a></em></p>\n</blockquote>\n<p><strong>2019-10-15</strong></p>\n<blockquote>\n<p><em>「有时候，一个梦想可以点亮整片天空。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293753/\" target=\"_blank\" rel=\"noopener\">《十月的天空》</a></em></p>\n</blockquote>\n<p><strong>2019-10-14</strong></p>\n<blockquote>\n<p><em>「打起精神来！打起精神来！」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1431683/\" target=\"_blank\" rel=\"noopener\">《蜡笔小新》</a></em></p>\n</blockquote>\n<p><strong>2019-10-13</strong></p>\n<blockquote>\n<p><em>「你还能哭，这说明你还有救。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1302205/\" target=\"_blank\" rel=\"noopener\">《办公室的故事》</a></em></p>\n</blockquote>\n<p><strong>2019-10-12</strong></p>\n<blockquote>\n<p><em>「探戈里无所谓错步，不像人生。它简单，所以才棒，要是踏错步或绊倒了，继续跳就好！」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1298624/\" target=\"_blank\" rel=\"noopener\">《闻香识女人》</a></em></p>\n</blockquote>\n<p><strong>2019-10-11</strong></p>\n<blockquote>\n<p><em>「无论你剩下的光阴是五分钟还是五十年，如果不是今天，如果不是你，我永远不会了解爱。谢谢你成为那个教会我去爱和被爱的人。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1440703/\" target=\"_blank\" rel=\"noopener\">《爱再来一次》</a></em></p>\n</blockquote>\n<p><strong>2019-10-10</strong></p>\n<blockquote>\n<p><em>「我知道自己是什么，也知道自己会变成什么。我看见一切，别人却视而不见。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291562/\" target=\"_blank\" rel=\"noopener\">《黑暗中的舞者》</a></em></p>\n</blockquote>\n<p><strong>2019-10-09</strong></p>\n<blockquote>\n<p><em>「如果我什么都没有，那我也就什么都不会失去了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292048/\" target=\"_blank\" rel=\"noopener\">《蓝白红三部曲之蓝》</a></em></p>\n</blockquote>\n<p><strong>2019-10-08</strong></p>\n<blockquote>\n<p><em>「你师父平时都买八十只螃蟹，他三十，我五十，你这点儿够谁吃。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25919910/\" target=\"_blank\" rel=\"noopener\">《师父》</a>」</em></p>\n</blockquote>\n<p><strong>2019-10-07</strong></p>\n<blockquote>\n<p><em>「外婆，如果你病了，就发个空信，我就会知道是你，我会尽快来，好吗？」</em><br><em>「Grandma, if you get sick, just send a blank letter. Then I’ll know it’s you, and I’ll come fast.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1299361/\" target=\"_blank\" rel=\"noopener\">《爱·回家》</a></em></p>\n</blockquote>\n<p><strong>2019-10-06</strong></p>\n<blockquote>\n<p><em>「阿高，我觉得这是你应得的（金胡萝卜奖），为这个漂亮美好的西瓜，我们有很多地方要谢谢你。」</em><br><em>「Well, I think you deserve this, Gromit. For a brave and splendid melon. We’ve all got a lot to thank you for.」</em><br><em>「人人皆有得意之时。」</em><br><em>「Every dog has his day.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1419901/\" target=\"_blank\" rel=\"noopener\">《超级无敌掌门狗：人兔的诅咒》</a></em></p>\n</blockquote>\n<p><strong>2019-10-05</strong></p>\n<blockquote>\n<p><em>「维斯帕：密码多少？」</em><br><em>「Vesper: ‘The password, please.’」</em><br><em>「邦德：你的名字。」</em><br><em>「Bond: ‘V-E-S-P-E-R.’」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1418190/\" target=\"_blank\" rel=\"noopener\">《007：大战皇家赌场》</a></em></p>\n</blockquote>\n<p><strong>2019-10-04</strong></p>\n<blockquote>\n<p><em>「只要人类不出现，一切都是美好和感人的。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1473562/\" target=\"_blank\" rel=\"noopener\">《丛林赤子心》</a></em></p>\n</blockquote>\n<p><strong>2019-10-03</strong></p>\n<blockquote>\n<p><em>「我不在乎你是否完全属于我，我只要我爱的人一直在我身旁，即使他爱的是别人。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1946786/\" target=\"_blank\" rel=\"noopener\">《隐藏的恋情》</a></em></p>\n</blockquote>\n<p><strong>2019-10-02</strong></p>\n<blockquote>\n<p><em>「你有五分钟沉迷在迷人的伤痛中，享受它，拥抱它，抛弃它……继续前进。」</em><br><em>「You have five minutes to wallow in the delicious misery. Enjoy it, embrace it, discard it…and proceed.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1419933/\" target=\"_blank\" rel=\"noopener\">《伊丽莎白镇》</a></em></p>\n</blockquote>\n<p><strong>2019-10-01</strong></p>\n<blockquote>\n<p><em>「这是盐的味道，山的味道，风的味道，阳光的味道，也是时间的味道，人情的味道。这些味道，已经在漫长的时光中和故土、乡亲、念旧、勤俭、坚忍等等情感和信念混合在一起，才下舌尖，又上心间。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10606004/\" target=\"_blank\" rel=\"noopener\">《舌尖上的中国 第一季》</a></em></p>\n</blockquote>\n<hr>\n<h3 id=\"九月-September\"><a href=\"#九月-September\" class=\"headerlink\" title=\"九月 / September\"></a>九月 / September</h3><p><strong>2019-09-30</strong></p>\n<blockquote>\n<p><em>「永远给自己一个梦想，即使它很远。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1303021/\" target=\"_blank\" rel=\"noopener\">《小鞋子》</a></em></p>\n</blockquote>\n<p><strong>2019-09-29</strong></p>\n<blockquote>\n<p><em>「在某个时刻，我们掌握了真实，但真实往往稍纵即逝。」</em><br><em>「Hence there’s a moment in which we grasp reality, but then the moment passes.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1310176/\" target=\"_blank\" rel=\"noopener\">《放大》</a></em></p>\n</blockquote>\n<p><strong>2019-09-28</strong></p>\n<blockquote>\n<p><em>「那天早上我还没有变成吸血鬼，我最后一次看了日出。我完全记得它的细节，但是我已忘记之前的每个日出。我最后一次欣赏这壮观的景色，就好像我是第一次看一样，然后我就对阳光永别了，变成了我现在的这个样子。」</em><br><em>「That morning, I was not yet a vampire and I saw my last sunrise. I remember it completely and yet I can’t recall any sunrise before it. I watched the whole magnificence of the dawn for the last time as if it were the first. And then I said farewell to sunlight and set out to become.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1299327/\" target=\"_blank\" rel=\"noopener\">《夜访吸血鬼》</a></em></p>\n</blockquote>\n<p><strong>2019-09-27</strong></p>\n<blockquote>\n<p><em>「你我犹如隔镜视物，所见无非虚幻迷蒙。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291936/\" target=\"_blank\" rel=\"noopener\">《攻壳机动队》</a></em></p>\n</blockquote>\n<p><strong>2019-09-26</strong></p>\n<blockquote>\n<p><em>「眼睛不在这里</em><br><em>在这星星即将死去的山谷</em><br><em>在这空心的山谷里</em><br><em>在我们这已经失去的破碎的王国</em><br><em>这里没有眼睛</em></p>\n<p><em>在这最后的相会处</em><br><em>我们在一起摸索</em><br><em>避免语言</em><br><em>在这条肿胀的河滩头聚会」</em><br>———— 《空心人》T.S. 艾略特<br><em>-艾略特诞辰131周年-</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292260/\" target=\"_blank\" rel=\"noopener\">《现代启示录》</a></em></p>\n</blockquote>\n<p><strong>2019-09-25</strong></p>\n<blockquote>\n<p><em>「\b这些年轻人一点意志力也没有。」</em><br><em>「These young people have no willpower!」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1855834/\" target=\"_blank\" rel=\"noopener\">《充气娃娃之恋》</a></em></p>\n</blockquote>\n<p><strong>2019-09-24</strong></p>\n<blockquote>\n<p><em>「喝了咱的酒 / 一人敢走青刹口」</em><br><em>「喝了咱的酒 / 见了皇帝不磕头」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1306505/\" target=\"_blank\" rel=\"noopener\">《红高粱》</a></em></p>\n</blockquote>\n<p><strong>2019-09-23</strong></p>\n<blockquote>\n<p><em>「你不知道一支好曲子是会怎样地支配你。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1322674/\" target=\"_blank\" rel=\"noopener\">《捕鼠者》</a></em></p>\n</blockquote>\n<p><strong>2019-09-22</strong></p>\n<blockquote>\n<p><em>「欢迎来到现实世界，它糟糕的要命，但你会爱上它的。」</em><br><em>「Welcome to the real world. It sucks. You’re gonna love it.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1393859/\" target=\"_blank\" rel=\"noopener\">《老友记 第一季》</a></em></p>\n</blockquote>\n<p><strong>2019-09-21</strong></p>\n<blockquote>\n<p><em>「或许我们需要一段时间独处，才能感触彼此灵魂的深处。当第一次在中央车站楼梯口相逢时，我们伫立良久，却未曾想过，会迎来这场命运的交集。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292218/\" target=\"_blank\" rel=\"noopener\">《中央车站》</a></em></p>\n</blockquote>\n<p><strong>2019-09-20</strong></p>\n<blockquote>\n<p><em>「如果有一天我忍不住问你，你一定要骗我。就算你心里多不情愿，也不要告诉我，你最爱的人不是我。」</em><br><em>「If I ever ask you this question, Please lie. No matter how your heart rebels, Please tell me I’m the one you love the most.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292328/\" target=\"_blank\" rel=\"noopener\">《东邪西毒》</a></em></p>\n</blockquote>\n<p><strong>2019-09-19</strong></p>\n<blockquote>\n<p><em>「深夜吃东西的魅力就是那一抹罪恶感。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3991933/\" target=\"_blank\" rel=\"noopener\">《深夜食堂》</a></em></p>\n</blockquote>\n<p><strong>2019-09-18</strong></p>\n<blockquote>\n<p><em>「文明应该被尊重，</em><br><em>那么生命呢，</em><br><em>生命应该被尊重吗？</em><br><em>文明是人类创造出来的，</em><br><em>如果没有人类，</em><br><em>文明从何谈起？」</em></p>\n<p><em>-九一八事变88周年-</em><br><em>———— <a href=\"https://movie.douban.com/subject/1949812/\" target=\"_blank\" rel=\"noopener\">《东京审判》</a></em></p>\n</blockquote>\n<p><strong>2019-09-17</strong></p>\n<blockquote>\n<p><em>「将近二十年了，我生活在一个大谎言里面，生活里面有好多的感受，痛苦的、快乐的、我好想跟你们分享，可是我不能。有时候我忍不住想干脆跟你们坦白算了，可是又不忍心把扛了这么多年的担子，再放到你们的肩膀上。」</em><br><em>「It’s been 20 years. I’ve been living a big lie. There has been so much pain and joy…I’ve wanted to share with you, but I couldn’t. Sometimes I wanted to tell you everything…but I couldn’t burden you with what has been with me so long.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1303037/\" target=\"_blank\" rel=\"noopener\">《\b喜宴》</a></em></p>\n</blockquote>\n<p><strong>2019-09-16</strong></p>\n<blockquote>\n<p><em>「我有充分的理由回家，但只有一个理由留下来。」</em><br><em>「什么理由？」</em><br><em>「你。」</em><br><em>「I’ve been thinking about it, and there’s a million reasons for me to go home…but there’s only one reason for me to stay.」</em><br><em>「What reason is that?」</em><br><em>「Well, you.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293212/\" target=\"_blank\" rel=\"noopener\">《长大》</a></em></p>\n</blockquote>\n<p><strong>2019-09-15</strong></p>\n<blockquote>\n<p><em>「可怜的盖斯帕德。」</em><br><em>「Poor Gaspard.」</em><br><em>–雅克·贝克诞辰113周年–</em><br><em>———— <a href=\"https://movie.douban.com/subject/1424334/\" target=\"_blank\" rel=\"noopener\">《洞》</a></em></p>\n</blockquote>\n<p><strong>2019-09-14</strong></p>\n<blockquote>\n<p><em>「唯一会改变的事情就是，你会变得更加混蛋。」</em><br><em>「The only thing that’s gonna change is you’re gonna become an even bigger cunt.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/2044089/\" target=\"_blank\" rel=\"noopener\">《杀手没有假期》</a></em></p>\n</blockquote>\n<p><strong>2019-09-13</strong></p>\n<blockquote>\n<p><em>「适逢三五便团圆，满把晴光护玉栏。天上一轮才捧出，人间万姓仰头看。」 ————《对月寓怀》 / 曹雪芹</em><br><em>———— <a href=\"https://movie.douban.com/subject/1864810/\" target=\"_blank\" rel=\"noopener\">《红楼梦》</a></em></p>\n</blockquote>\n<p><strong>2019-09-12</strong></p>\n<blockquote>\n<p><em>「我们不能在一起，但并不代表我不爱你。」</em><br><em>「I think it’s over between you and me.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/2365260/\" target=\"_blank\" rel=\"noopener\">《爱在暹罗》</a></em></p>\n</blockquote>\n<p><strong>2019-09-11</strong></p>\n<blockquote>\n<p><em>「宝贝，我向你保证，如果我能平安回来，明天就辞职。」</em><br><em>「But, baby, I promise you, if I get out of this, I’m quitting tomorrow.」</em><br><em>「当天四架遭到劫持的飞机，只有联航93没有撞向最终目标。它与10时03芬坠毁在滨州杉克谷镇附近，机上人员全部遇难。」 ———— 记9.11事件</em><br><em>———— <a href=\"https://movie.douban.com/subject/1588945/\" target=\"_blank\" rel=\"noopener\">《93航班》</a></em></p>\n</blockquote>\n<p><strong>2019-09-10</strong></p>\n<blockquote>\n<p><em>「这是一首爱之歌，我知道你们会分享此爱，我祈求你们永远不会让它逝去。」</em><br><em>「I would like to sing for you now a love song. I know you share this love. I pray that you will never let it die.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1294408/\" target=\"_blank\" rel=\"noopener\">《音乐之声》</a></em></p>\n</blockquote>\n<p><strong>2019-09-09</strong></p>\n<blockquote>\n<p><em>「别把生命中的敌人当成一种诅咒，它也可能是上天的恩赐。智者从敌人身上学到的，比愚者从朋友身上学到的还要多。」</em><br><em>「Stop thinking of it as a curse to have been given an enemy in life. It can be blessing too. A wise man gets more from his enemies than a fool from his friends.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/6803494/\" target=\"_blank\" rel=\"noopener\">《极速风流》</a></em></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"二零二零-2020\"><a href=\"#二零二零-2020\" class=\"headerlink\" title=\"二零二零 / 2020\"></a>二零二零 / 2020</h2><h3 id=\"一月-January\"><a href=\"#一月-January\" class=\"headerlink\" title=\"一月 / January\"></a>一月 / January</h3><p><strong>2020-02-18</strong></p>\n<blockquote>\n<p><em>「给亲戚看见我一个人食吉野家，差点想讲句你认错人吧，但我已经懂得怎么说些客套话。」</em><br><em>————《给亲戚看见我一个人食吉野家》/ 林阿P</em></p>\n</blockquote>\n<p><strong>2020-02-17</strong></p>\n<blockquote>\n<p><em>「所有的人，都是两面兽，一面是仁义道德、三纲五常；一面是男盗女娼、嗜血纵欲。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1043485/\" target=\"_blank\" rel=\"noopener\">《檀香木》/ 莫言</a></em></p>\n</blockquote>\n<p><strong>2020-02-16</strong></p>\n<blockquote>\n<p><em>「谁都可以过这种生活，但首先要能够知道弃绝另外一种人生。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26983143/\" target=\"_blank\" rel=\"noopener\">《遇见野兔的那一年》/ 阿托·帕西林纳</a></em></p>\n</blockquote>\n<p><strong>2020-02-15</strong></p>\n<blockquote>\n<p><em>「这道菜肴的名称叫“柠檬抱子甘蓝”。请大家记录！配料是给四个人吃的：八百克抱子甘蓝，一个柠檬的汁和未儿，一个洋葱头，一束欧芹，四十克黄油，黑胡椒粉和盐。」</em><br><em>———— <a href=\"https://book.douban.com/subject/6800379/\" target=\"_blank\" rel=\"noopener\">《2666》/ 罗贝托·波拉尼奥</a></em></p>\n</blockquote>\n<p><strong>2020-02-14</strong></p>\n<blockquote>\n<p><em>「烦恼片刻，陪伴是成年人的私藏安慰剂。」</em></p>\n</blockquote>\n<p><strong>2020-02-13</strong></p>\n<blockquote>\n<p><em>「那时的感情，确像一江春水，一树桃花，一朵早霞，一声云雀。它的感想是无私的，放射的，是无所不想拥抱，无所不想窥探的。」</em><br><em>———— <a href=\"https://book.douban.com/subject/4238141/\" target=\"_blank\" rel=\"noopener\">《故事和书》/ 孙犁</a></em></p>\n</blockquote>\n<p><strong>2020-02-12</strong></p>\n<blockquote>\n<p><em>「人世间所谓的生活是由大哭、抽泣、破涕为笑组合而成的，而在这之中抽泣占据了绝大部分。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1051193/\" target=\"_blank\" rel=\"noopener\">《麦琪的礼物》/ 欧·亨利</a></em></p>\n</blockquote>\n<p><strong>2020-02-11</strong></p>\n<blockquote>\n<p><em>「月亮下的细语都睡着，都睡着；我的茉莉也睡了，也睡了。寄给她一份美梦，好让她不忘记我。」</em><br><em>———— 《小茉莉》/ 邱晨</em></p>\n</blockquote>\n<p><strong>2020-02-10</strong></p>\n<blockquote>\n<p><em>「我理解的孤独并不是指悲惨的情境，而是隐秘的主宰力量、深刻的不可交流性，对一种无懈可击的独特性的朦胧的认识。」</em><br><em>———— <a href=\"https://book.douban.com/subject/11533606/\" target=\"_blank\" rel=\"noopener\">《贾科梅蒂的画家》/ 让·热内</a></em></p>\n</blockquote>\n<p><strong>2020-02-09</strong></p>\n<blockquote>\n<p><em>「他很吃惊：为什么他们能过得这么悠闲？他压根没有觉察到，自己对待时间和守财奴对待金钱如出一辙。」</em><br><em>———— <a href=\"https://book.douban.com/subject/21322405/\" target=\"_blank\" rel=\"noopener\">《路边草》/ 夏目漱石</a></em></p>\n</blockquote>\n<p><strong>2020-02-08</strong></p>\n<blockquote>\n<p><em>「人类和睦且世界和平的关键就在于父母对孩子的爱，就在于我们所说的家庭温暖。」</em><br><em>———— 《温暖的巢穴：动物如何解决家庭问题》/ 动物行为学家，维托斯·德吕舍尔</em></p>\n</blockquote>\n<p><strong>2020-02-07</strong></p>\n<blockquote>\n<p><em>「这些忽隐忽现的火花</em><br><em>最终渐渐消退、慢慢熄灭</em><br><em>————清醒生活的最后几粒</em><br><em>真正的火星儿从某个夜晚</em><br><em>才收到的馅饼摊或烤土豆摊飘落</em><br><em>————伦敦市就会随之沉入梦乡。」</em><br><em>———— <a href=\"https://book.douban.com/subject/21324344/\" target=\"_blank\" rel=\"noopener\">《伦敦夜行记》/ 查尔斯·狄更斯</a></em></p>\n</blockquote>\n<p><strong>2020-02-06</strong></p>\n<blockquote>\n<p><em>「如果神是宇宙的恒古寂静，那么人就是赋予这个寂静以意义的那一声哭啼。」</em><br><em>———— <a href=\"https://book.douban.com/subject/25768864/\" target=\"_blank\" rel=\"noopener\">《谎言的年代：萨拉马戈杂文集》/ </a></em></p>\n</blockquote>\n<p><strong>2020-02-05</strong></p>\n<blockquote>\n<p><em>「在地铁这块画布上，我们每个人都像杂耍演员，默默参与这一切的演出，一起建立一套属于公共场所的人类行为法则。」</em><br><em>———— <a href=\"https://book.douban.com/subject/30394844/\" target=\"_blank\" rel=\"noopener\">《巴黎地铁上的人类学家》/ 马克·奥热</a></em></p>\n</blockquote>\n<p><strong>2020-02-04</strong></p>\n<blockquote>\n<p><em>「而我的身世，已经早春；弃于某片荒芜，你经过我。」</em><br><em>———— 《早春的树》/ 唐映枫</em></p>\n</blockquote>\n<p><strong>2020-02-03</strong></p>\n<blockquote>\n<p><em>「他没有看见过海，也不希望看。世界的中心是北平。」</em><br><em>———— <a href=\"https://book.douban.com/subject/2031604/\" target=\"_blank\" rel=\"noopener\">《离婚》/ </a></em></p>\n</blockquote>\n<p><strong>2020-02-02</strong></p>\n<blockquote>\n<p><em>「我不怕孤独，我不怕被遗弃，我不怕丢掉我必须丢掉的一切，我不怕犯错误，甚至大错误，一生的遗恨，也许就像永恒一样悠远的错误。」</em><br><em>———— <a href=\"https://book.douban.com/subject/3898308/\" target=\"_blank\" rel=\"noopener\">《一个青年艺术家的画像》/ 詹姆斯·乔伊斯</a></em></p>\n</blockquote>\n<p><strong>2020-02-01</strong></p>\n<blockquote>\n<p><em>「无论什么人见到她，都会觉得她是那么超凡脱俗、绝对是上天赐予人间的小天使，因为她的脸上带着一种神圣的烙印。」</em><br><em>———— <a href=\"https://book.douban.com/subject/4886141/\" target=\"_blank\" rel=\"noopener\">《科学怪人》/ 玛丽·雪莱</a></em></p>\n</blockquote>\n<p><strong>2020-01-31</strong></p>\n<blockquote>\n<p><em>「\b\b社会当然存在无数无意义的工作，从来没有一个物种达到人类这样的过剩而不愿意死去，并且有如此多的方法苟且活着。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1607478/\" target=\"_blank\" rel=\"noopener\">《巴黎伦敦落魄记》/ 乔治·奥威尔</a></em></p>\n</blockquote>\n<p><strong>2020-01-30</strong></p>\n<blockquote>\n<p><em>「如今，明天直瞪瞪地啾着我，我却没有勇气直视明天。」</em><br><em>———— <a href=\"https://book.douban.com/subject/6313476/\" target=\"_blank\" rel=\"noopener\">《远大前程》/ 查尔斯·狄更斯</a></em></p>\n</blockquote>\n<p><strong>2020-01-29</strong></p>\n<blockquote>\n<p><em>「我想，人天生就喜欢躲藏，渴望消失，这是一点都不奇怪的事；何况，在我们来到这个世界之前，我们不就是躲得好好的，好到连我们自己都想不起来曾经藏身何处？」</em><br><em>———— <a href=\"https://book.douban.com/subject/27104286/\" target=\"_blank\" rel=\"noopener\">《寂寞的游戏》/ 袁哲生</a></em></p>\n</blockquote>\n<p><strong>2020-01-28</strong></p>\n<blockquote>\n<p><em>「一个人唯一可以用来对时间的工具，是记忆。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26053771/\" target=\"_blank\" rel=\"noopener\">《小于一》/ 约瑟夫·布罗茨基</a></em></p>\n</blockquote>\n<p><strong>2020-01-27</strong></p>\n<blockquote>\n<p><em>「人群就是共用一个影子的人们，就是不能共用一张嘴的人们，就是多数时喜气洋洋，穷开心，并且一开玩笑就过火的人们。」</em><br><em>———— <a href=\"https://book.douban.com/subject/19964269/\" target=\"_blank\" rel=\"noopener\">《够一梦》/ 西川</a></em></p>\n</blockquote>\n<p><strong>2020-01-26</strong></p>\n<blockquote>\n<p><em>「\b你一定瑶尝尝这个味道！」</em><br><em>「\b这是······有点烧烤味，有丰润多汁，不像完全烟熏的味道，有点像······」</em><br><em>「就像“砰”那种味道，你认为呢？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1793491/\" target=\"_blank\" rel=\"noopener\">《美食总动员》/ 布拉德·伯德 / 简·皮克瓦</a></em></p>\n</blockquote>\n<p><strong>2020-01-25</strong></p>\n<blockquote>\n<p><em>「每一英里、每一年、每一个人的每一滴泪，我无法解释，亲爱的，我甚至不会去尝试。我仅仅知道一件事，翅膀载爱而归。」</em><br><em>———— 《To Be By Your Side》 / 尼克·凯夫</em></p>\n</blockquote>\n<p><strong>2020-01-24</strong></p>\n<blockquote>\n<p><em>「跟什么人一起玩才是最最关键的。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26933790/\" target=\"_blank\" rel=\"noopener\">《少爷》</a></em></p>\n</blockquote>\n<p><strong>2020-01-23</strong></p>\n<blockquote>\n<p><em>「我离开了那所房子，哭着跑回家，像个诗人一样，看到什么都想哭。」</em><br><em>———— <a href=\"https://book.douban.com/subject/21346008/\" target=\"_blank\" rel=\"noopener\">《米格尔街》/ 维迪亚达·奈保尔</a></em></p>\n</blockquote>\n<p><strong>2020-01-22</strong></p>\n<blockquote>\n<p><em>「正由于我抱着与你相见的希望，我才永远认为最崎岖的路是最好的路。」</em><br><em>———— <a href=\"https://book.douban.com/subject/4246979/\" target=\"_blank\" rel=\"noopener\">《窄门》/ 安德丽·纪德</a></em></p>\n</blockquote>\n<p><strong>2020-01-21</strong></p>\n<blockquote>\n<p><em>「当你为马忙碌的时候，人们可以看到你在忙碌；但当你忙着写诗的时候，你看上去好像无所事事。」</em><br><em>———— <a href=\"https://book.douban.com/subject/25870629/\" target=\"_blank\" rel=\"noopener\">《亲爱的生活》/ 艾丽丝·门罗</a></em></p>\n</blockquote>\n<p><strong>2020-01-20</strong></p>\n<blockquote>\n<p><em>「暴力的终极弱点在于它恰好产生它试图摧毁的东西。」</em><br><em>———— <a href=\"https://book.douban.com/subject/3711441/\" target=\"_blank\" rel=\"noopener\">《马丁·路德：金自传》/ 马丁·路德：金</a></em></p>\n</blockquote>\n<p><strong>2020-01-19</strong></p>\n<blockquote>\n<p><em>「在澄明的夜空下，银河倾斜到清晨。松鸦啼搅，咖啡煮沸。」</em><br><em>———— <a href=\"https://book.douban.com/subject/30217925/\" target=\"_blank\" rel=\"noopener\">《砌石与寒山诗》/ 加里·斯奈德</a></em></p>\n</blockquote>\n<p><strong>2020-01-18</strong></p>\n<blockquote>\n<p><em>「于是我说：我在观察青蛙。接着，我又毫无说服力地补充说：“这项工作很重要。”」</em><br><em>————《观察青蛙的女人》/ 南希·克雷斯</em></p>\n</blockquote>\n<p><strong>2020-01-17</strong></p>\n<blockquote>\n<p><em>「旧时创痕，最好是不要去剃它，要是剥着，依然会流血的。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1394402/\" target=\"_blank\" rel=\"noopener\">《死水微澜》/ 李劼人</a></em></p>\n</blockquote>\n<p><strong>2020-01-16</strong></p>\n<blockquote>\n<p><em>「坐在屋里，我的面前是一整块干干净净、纯纯粹粹的时间，它庞大得像一只大狗熊，一屁股坐在我身上不挪窝，直到父母亲再一次回来。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26791998/\" target=\"_blank\" rel=\"noopener\">《山中的糖果》/ 邓安庆</a></em></p>\n</blockquote>\n<p><strong>2020-01-15</strong></p>\n<blockquote>\n<p><em>「受欢迎本身也丝毫不能打动他，不过，随之而来的实际好处可以。」</em><br><em>———— 《朱莉亚·拉扎里》/ 威廉·毛姆</em></p>\n</blockquote>\n<p><strong>2020-01-14</strong></p>\n<blockquote>\n<p><em>「我们都会怀念史努比，就像上个世纪的人怀念19世纪的单纯一样。」</em><br><em>———— <a href=\"https://book.douban.com/subject/5321895/\" target=\"_blank\" rel=\"noopener\">《那些忧伤的年轻人》</a></em><br><strong>2020-01-13</strong><br><em>「所谓“希望”，就是付出努力有可能比完全放弃强一点点。」</em><br><em>———— <a href=\"https://book.douban.com/subject/27184303/\" target=\"_blank\" rel=\"noopener\">《遥远的向日葵地》</a></em></p>\n</blockquote>\n<p><strong>2020-01-12</strong></p>\n<blockquote>\n<p><em>「穿运动鞋；」</em><br><em>「每月去一次理发店」</em><br><em>「（不是美容院）;」</em><br><em>「不一一自我辩解。」</em><br><em>「这就是对我而言的“男孩”形象。」</em><br><em>———— <a href=\"https://book.douban.com/subject/5366434/\" target=\"_blank\" rel=\"noopener\">《终究悲哀的外国语》</a></em></p>\n</blockquote>\n<p><strong>2020-01-11</strong></p>\n<blockquote>\n<p><em>「他们之所以暂时停下」</em><br><em>「脚步仅仅是因为身体里的」</em><br><em>「潮汐出现了某种」</em><br><em>「懈怠，那是由于上午和下午两股势力在旋涡中相会所致」</em><br><em>———— <a href=\"https://book.douban.com/subject/26312708/\" target=\"_blank\" rel=\"noopener\">《达洛维夫人》/ 弗吉尼亚·伍尔夫</a></em></p>\n</blockquote>\n<p><strong>2020-01-10</strong></p>\n<blockquote>\n<p><em>「\b梦是一座没有城墙的城。」</em><br><em>「梦是星星笔底下的素描。」</em><br><em>「梦是神话的儿子」</em><br><em>「梦是幻想的碎片」</em><br><em>「梦是虚妄」</em><br><em>———— <a href=\"https://book.douban.com/subject/6127284/\" target=\"_blank\" rel=\"noopener\">《酒徒》/ 刘以鬯</a></em></p>\n</blockquote>\n<p><strong>2020-01-09</strong></p>\n<blockquote>\n<p><em>「我身上发生了什么事？」</em><br><em>「可到底事什么事呢？」</em><br><em>———— <a href=\"https://book.douban.com/subject/26357036/\" target=\"_blank\" rel=\"noopener\">《恋爱中的波伏瓦》/ 伊蕾娜·弗兰</a></em></p>\n</blockquote>\n<p><strong>2020-01-08</strong></p>\n<blockquote>\n<p><em>「在水鸟梦中的一片银月下，我听见了你提问以后的寂静，那些问题今夜多老。」</em><br><em>———— 《给苏东坡的一封信》/ W.S 默温</em></p>\n</blockquote>\n<p><strong>2020-01-07</strong></p>\n<blockquote>\n<p><em>「我终于意识到，被突然切断的，其实并不是返乡之路，而是对于生命之根的所有幻觉和记忆。」</em><br><em>———— <a href=\"https://book.douban.com/subject/26757657/\" target=\"_blank\" rel=\"noopener\">《望春风》/ 格非</a></em></p>\n</blockquote>\n<p><strong>2020-01-06</strong></p>\n<blockquote>\n<p><em>「连离我最近的那座山都下起了雪。那不是皑皑的、沧桑的面貌，或者确切说是玲珑的、写意的初老。」</em><br><em>———— <a href=\"https://book.douban.com/subject/27081783/\" target=\"_blank\" rel=\"noopener\">《樱桃青衣》/ 张怡微</a></em></p>\n</blockquote>\n<p><strong>2020-01-05</strong></p>\n<blockquote>\n<p><em>「我平生对患有各种偏执狂的人、一个心眼儿到底的人最有兴趣，因为一个人知识面越是有限，他离无限就越近。」</em><br><em>———— <a href=\"https://book.douban.com/subject/2158684/\" target=\"_blank\" rel=\"noopener\">《象棋的故事》/ 斯蒂芬·茨威格</a></em></p>\n</blockquote>\n<p><strong>2020-01-04</strong></p>\n<blockquote>\n<p><em>「时间总要在人们的打算与结果之间创造出一些花样，即可教育当事人自己，也好让邻居为之开心。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1427784/\" target=\"_blank\" rel=\"noopener\">《曼斯菲尔德庄园》/ 简·奥斯丁</a></em></p>\n</blockquote>\n<p><strong>2020-01-03</strong></p>\n<blockquote>\n<p><em>「在我们称之为一年的周而复始的季节周期当中，臭鼬留下的足迹可以说是一年之始的标志事件之一。」</em><br><em>———— <a href=\"https://book.douban.com/subject/1398925/\" target=\"_blank\" rel=\"noopener\">《沙乡年鉴》/ 奥尔多·利奥波德</a></em></p>\n</blockquote>\n<p><strong>2020-01-02</strong></p>\n<blockquote>\n<p><em>「你不喜欢这份未来？把它关掉。另点一份。把这一份还给寄件人。」</em><br><em>————《硬球》/ 玛格丽特·阿特伍德</em></p>\n</blockquote>\n<p><strong>2020-01-01</strong></p>\n<blockquote>\n<p><em>「我是个诗人，没有能力直接抵达任何东西。」</em><br><em>———— <a href=\"https://book.douban.com/subject/27180479/\" target=\"_blank\" rel=\"noopener\">《奥古斯都》/ 约翰·威廉斯</a></em></p>\n</blockquote>\n<hr>\n<h2 id=\"二零一九\"><a href=\"#二零一九\" class=\"headerlink\" title=\"二零一九\"></a>二零一九</h2><h3 id=\"十二月-December\"><a href=\"#十二月-December\" class=\"headerlink\" title=\"十二月 / December\"></a>十二月 / December</h3><p><strong>2019-12-31</strong></p>\n<blockquote>\n<p><em>「昨天是历史，明天是未知，只有今天才是天赐的礼物。」</em><br><em>「Yesterday is history, tomorrow is a mystery, but today is a gift, that is why it is called Present.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1783457/\" target=\"_blank\" rel=\"noopener\">《功夫熊猫》</a></em></p>\n</blockquote>\n<p><strong>2019-12-30</strong></p>\n<blockquote>\n<p><em>「他出现，又消失。一如日升日落，抑或任何转瞬即逝的事物，就像我们的生活。我们出现，然后我们又消失。我们对一些人而言是如此重要，但我们只是过客。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10808442/\" target=\"_blank\" rel=\"noopener\">《爱在午夜降临前》</a></em></p>\n</blockquote>\n<p><strong>2019-12-29</strong></p>\n<blockquote>\n<p><em>「我从不相信好的神话，对那些坏的深化却深信不疑。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1295656/\" target=\"_blank\" rel=\"noopener\">《潜行者》</a></em></p>\n</blockquote>\n<p><strong>2019-12-28</strong></p>\n<blockquote>\n<p><em>「电影发明以后，人类的生命比起以前延长了至少三倍。」 ———— 杨德昌</em><br><em>———— <a href=\"https://movie.douban.com/subject/1867742/\" target=\"_blank\" rel=\"noopener\">《火车进站》</a></em></p>\n</blockquote>\n<p><strong>2019-12-27</strong></p>\n<blockquote>\n<p><em>「为什么你不把我带到其他回忆的地方去？到一个没有我的回忆里。我们藏在哪里，直到明早。」</em><br><em>「该死，我不记得任何没有你的回忆」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1308777/\" target=\"_blank\" rel=\"noopener\">《暖暖内含光》</a></em></p>\n</blockquote>\n<p><strong>2019-12-26</strong></p>\n<blockquote>\n<p><em>「朋友考试不及格，你感觉很糟；朋友考试考第一，你感觉更糟。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3793023/\" target=\"_blank\" rel=\"noopener\">《三傻大闹宝莱坞》</a></em></p>\n</blockquote>\n<p><strong>2019-12-25</strong></p>\n<blockquote>\n<p><em>「铃声每响一次，就有一个天使获得了翅膀。」</em><br><em>「\bEvery time a bel rings, an angel gets his wings.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293749/\" target=\"_blank\" rel=\"noopener\">《生活多美好》</a></em></p>\n</blockquote>\n<p><strong>2019-12-24</strong></p>\n<blockquote>\n<p><em>「如果用心寻找，你能发现，其实爱无处不在。」</em><br><em>「If you look for it, I’ve got a sneaky feeling you’ll find that love actually is all around.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292401/\" target=\"_blank\" rel=\"noopener\">《真爱至上》</a></em></p>\n</blockquote>\n<p><strong>2019-12-23</strong></p>\n<blockquote>\n<p><em>「虽然天气寒冷令人头疼，但是有些食物在天冷的时候才能做，寒冷也是很重要的调味料。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25814707/\" target=\"_blank\" rel=\"noopener\">《小森林 冬春篇》</a></em></p>\n</blockquote>\n<p><strong>2019-12-22</strong></p>\n<blockquote>\n<p><em>「冬天是十一月 十二月」</em><br><em>「一月 二月 三月 四月」</em><br><em>「当我的光曝在你身上」</em><br><em>「重逢就是一间暗室」</em><br><em>–《无题》/ 毕赣–</em><br><em>———— <a href=\"https://movie.douban.com/subject/26337866/\" target=\"_blank\" rel=\"noopener\">《路边野餐》</a></em></p>\n</blockquote>\n<p><strong>2019-12-21</strong></p>\n<blockquote>\n<p><em>「我们总是喜欢得不到的东西。但是人啊，总是要经历点什么，才会知道自己真正要的是什么。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/26586432/\" target=\"_blank\" rel=\"noopener\">《契克》</a></em></p>\n</blockquote>\n<p><strong>2019-12-20</strong></p>\n<blockquote>\n<p><em>「我们虽然笑着说很快再见，但内心知道，可能后会无期。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292001/\" target=\"_blank\" rel=\"noopener\">《海上钢琴师》</a></em></p>\n</blockquote>\n<p><strong>2019-12-19</strong></p>\n<blockquote>\n<p><em>「当你越了解你是谁、你想要什么时，你就越不容易感到沮丧。」</em><br><em>「The more you know who you are and what you want, the less you let things upset you.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291835/\" target=\"_blank\" rel=\"noopener\">《迷失东京》</a></em></p>\n</blockquote>\n<p><strong>2019-12-18</strong></p>\n<blockquote>\n<p><em>「谢谢你玩我的游戏。」</em><br><em>「Thanks for playing my game.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/4920389/\" target=\"_blank\" rel=\"noopener\">《头号玩家》</a></em></p>\n</blockquote>\n<p><strong>2019-12-17</strong></p>\n<blockquote>\n<p><em>「世界充满了恶意，但如果我们相互理解支持，恶意就会消散。」</em><br><em>「The world is full of wickedness. But if we support each other,it will eventually go away.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/6985810/\" target=\"_blank\" rel=\"noopener\">《狩猎》</a></em></p>\n</blockquote>\n<p><strong>2019-12-16</strong></p>\n<blockquote>\n<p><em>「我没有朋友，身边只有你。」</em><br><em>「I don’t have friends. I’ve just got one.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3986493/\" target=\"_blank\" rel=\"noopener\">《神探夏洛克 第一季》</a></em></p>\n</blockquote>\n<p><strong>2019-12-15</strong></p>\n<blockquote>\n<p><em>「我让魔鬼进入了我的身体，现在我无法摆脱他了。我用火、用刀都不能把他驱赶出来，为什么？他或许不想无家可归吧。」</em><br><em>「\b\bI let the Devill in, Now I can’t get him out. I tried… burning him out and cutting him out. He don’t take no notice. Why should he? He don’t wanna be homeless.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/2133337/\" target=\"_blank\" rel=\"noopener\">《斯图尔特：倒带人生》</a></em></p>\n</blockquote>\n<p><strong>2019-12-14</strong></p>\n<blockquote>\n<p><em>「当我还是孩子的时候，妈妈带着我去看《白雪公主》。人人都爱上了白雪公主，而我偏偏爱上了那个邪恶的皇后。」</em><br><em>「When my mother took me to see Snow White, everyone fell in love with Snow White. I immediately fell for the Wicked Queen.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1296987/\" target=\"_blank\" rel=\"noopener\">《安妮·霍尔》</a>」</em></p>\n</blockquote>\n<p><strong>2019-12-13</strong></p>\n<blockquote>\n<p><em>「爱与恨，她们比我们任何一个都了解爱与恨。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3649049/\" target=\"_blank\" rel=\"noopener\">《金陵十三钗》</a></em></p>\n</blockquote>\n<p><strong>2019-12-12</strong></p>\n<blockquote>\n<p><em>「东京那么大，如果不小心走散了，可能一辈子也见不到了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291568/\" target=\"_blank\" rel=\"noopener\">《东京物语》</a></em></p>\n</blockquote>\n<p><strong>2019-12-11</strong></p>\n<blockquote>\n<p><em>「我总是在想酒是如何不断地成熟变化的，就好比今天我如果打开了一瓶酒，它的味道一定和其他任何一天打开的时候有所不同。因为酒是有生命的，它在不断地变化并且越来越复杂。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291833/\" target=\"_blank\" rel=\"noopener\">《杯酒人生》</a></em></p>\n</blockquote>\n<p><strong>2019-12-10</strong></p>\n<blockquote>\n<p><em>「铺好这张宽大的床</em><br><em>让它令人敬畏————</em><br><em>躺在床上等待审判日破晓</em><br><em>美妙而公正</em></p>\n<p><em>把它的床垫摆得笔直</em><br><em>把它的枕头拍圆</em><br><em>别让日出时黄色的噪音</em><br><em>打扰这块土地」</em><br>———— 《铺好这张宽大的床》/ 艾米丽·狄金森<br><em>-国际人权日-</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293077/\" target=\"_blank\" rel=\"noopener\">《苏菲的抉择》</a></em></p>\n</blockquote>\n<p><strong>2019-12-09</strong></p>\n<blockquote>\n<p><em>「很难讲清楚我们生活的这个世界，到底是真实，还是梦境。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1308833/\" target=\"_blank\" rel=\"noopener\">《空房间》</a></em></p>\n</blockquote>\n<p><strong>2019-12-08</strong></p>\n<blockquote>\n<p><em>「她怎么去世的？」</em><br><em>「某天照镜子被自己吓死的。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/6538833/\" target=\"_blank\" rel=\"noopener\">《内布拉斯加》</a></em></p>\n</blockquote>\n<p><strong>2019-12-07</strong></p>\n<blockquote>\n<p><em>「你永远也不晓得自己有多喜欢一个人，除非你看见他和别人在一起。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292215/\" target=\"_blank\" rel=\"noopener\">《天使爱美丽》</a></em></p>\n</blockquote>\n<p><strong>2019-12-06</strong></p>\n<blockquote>\n<p><em>「美丽的梭罗河 / 我为你歌唱 / 你的光荣历史 / 我永远记在心上 / 旱季来临 / 你轻轻流淌 / 雨季时波涛滚滚 / 你流向远方。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1766086/\" target=\"_blank\" rel=\"noopener\">《太阳照常升起》</a></em></p>\n</blockquote>\n<p><strong>2019-12-05</strong></p>\n<blockquote>\n<p><em>「当你认为生活已经糟糕得不可能再糟糕了得时候，它居然真的更糟糕了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292267/\" target=\"_blank\" rel=\"noopener\">《银河系漫游指南》</a></em></p>\n</blockquote>\n<p><strong>2019-12-04</strong></p>\n<blockquote>\n<p><em>「友情提示，为保证没有看过这部电影的朋友有机会获得更大的观影乐趣，请您不要向任何人透露《控方证人》的结局。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1296141/\" target=\"_blank\" rel=\"noopener\">《控方证人》</a></em></p>\n</blockquote>\n<p><strong>2019-12-03</strong></p>\n<blockquote>\n<p><em>「我们是由梦构成的，而梦是由我们构成的。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292533/\" target=\"_blank\" rel=\"noopener\">《狂人皮埃罗》</a></em></p>\n</blockquote>\n<p><strong>2019-12-02</strong></p>\n<blockquote>\n<p><em>「你知道吗？唯一能赋予我人生价值的事，就是为数不多的、能够真正和另一个人心灵相契的几个瞬间。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3275168/\" target=\"_blank\" rel=\"noopener\">《单身男子》</a></em></p>\n</blockquote>\n<p><strong>2019-12-01</strong></p>\n<blockquote>\n<p><em>「我们都害怕死亡，并质疑自己在宇宙中的位置。艺术家的使命不是向绝望屈服，而是找到一方解药，来对抗存在的虚无。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/4319218/\" target=\"_blank\" rel=\"noopener\">《午夜巴黎》</a></em></p>\n</blockquote>\n<hr>\n<h3 id=\"十一月-November\"><a href=\"#十一月-November\" class=\"headerlink\" title=\"十一月 / November\"></a>十一月 / November</h3><p><strong>2019-11-30</strong></p>\n<blockquote>\n<p><em>「我见过你们人类无法置信的事物。我目睹战舰在猎户星座的端沿起火燃烧，我看着C射线在唐怀瑟之门附近的黑暗中闪耀。但所有这些时刻，终将随着时间消逝，一如眼泪消失在雨中。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291839/\" target=\"_blank\" rel=\"noopener\">《银翼杀手》</a></em></p>\n</blockquote>\n<p><strong>2019-11-29</strong></p>\n<blockquote>\n<p><em>「我不喜欢葡萄干，它们以前饱满多汁，现在它们被扭曲了，就像它们的生命被窃取了一样。它们吃起来很甜，但是真的，它们只是被羞辱了的葡萄。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1308314/\" target=\"_blank\" rel=\"noopener\">《邦尼和琼》</a></em></p>\n</blockquote>\n<p><strong>2019-11-28</strong></p>\n<blockquote>\n<p><em>「过去唯一的用处，就是让我不再想回到过去。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1418070/\" target=\"_blank\" rel=\"noopener\">《如果\b·爱》</a></em></p>\n</blockquote>\n<p><strong>2019-11-27</strong></p>\n<blockquote>\n<p><em>「如果你对一个人说话，那人没有反应，那么你能坚持多久，一天？一个月？还是四年？如果你爱一个人，那人没有反应，那么你能坚持多久，三个月？五年？还是一生？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292211/\" target=\"_blank\" rel=\"noopener\">《对她说》</a></em></p>\n</blockquote>\n<p><strong>2019-11-26</strong></p>\n<blockquote>\n<p><em>「地球上不会有这样一片净土。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293764/\" target=\"_blank\" rel=\"noopener\">《与狼共舞》</a></em></p>\n</blockquote>\n<p><strong>2019-11-25</strong></p>\n<blockquote>\n<p><em>「医生们说咱俩没事儿。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/27019527/\" target=\"_blank\" rel=\"noopener\">《嘉年华》</a></em></p>\n</blockquote>\n<p><strong>2019-11-24</strong></p>\n<blockquote>\n<p><em>「我不知道你的故事是如何结束的，但如果你觉得那是真爱，那么它永远不会太晚。但如果那是真爱，为什么现在不是呢？你需要的只是尊从内心的勇气。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3346464/\" target=\"_blank\" rel=\"noopener\">《给朱丽叶的信》</a></em></p>\n</blockquote>\n<p><strong>2019-11-23</strong></p>\n<blockquote>\n<p><em>「你不是唯一的受害者，我也是受害者，我是自己本能的受害者。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/7155005/\" target=\"_blank\" rel=\"noopener\">《游客》</a></em></p>\n</blockquote>\n<p><strong>2019-11-22</strong></p>\n<blockquote>\n<p><em>「我爱她并不是因为她适合我，我只是爱她。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1297769/\" target=\"_blank\" rel=\"noopener\">《马语者》</a></em></p>\n</blockquote>\n<p><strong>2019-11-21</strong></p>\n<blockquote>\n<p><em>「你像是从宇宙中飞来，我的天使。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10757577/\" target=\"_blank\" rel=\"noopener\">《卡罗尔》</a></em></p>\n</blockquote>\n<p><strong>2019-11-20</strong></p>\n<blockquote>\n<p><em>「我原来就坐在那儿，我曾是中国的皇帝。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293172/\" target=\"_blank\" rel=\"noopener\">《末代皇帝》</a></em></p>\n</blockquote>\n<p><strong>2019-11-19</strong></p>\n<blockquote>\n<p><em>「某个人想遗忘的，可能是其他人忘不了的。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1309210/\" target=\"_blank\" rel=\"noopener\">《神秘肌肤》</a></em></p>\n</blockquote>\n<p><strong>2019-11-18</strong></p>\n<blockquote>\n<p><em>「世上有千千万万的人和你一样不快乐。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/6097775/\" target=\"_blank\" rel=\"noopener\">《艺术家》</a></em></p>\n</blockquote>\n<p><strong>2019-11-17</strong></p>\n<blockquote>\n<p><em>「对你的爱会持续多久？只要你头顶的星星依旧闪烁。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10577869/\" target=\"_blank\" rel=\"noopener\">《时空恋旅人》</a>)</em></p>\n</blockquote>\n<p><strong>2019-11-16</strong></p>\n<blockquote>\n<p><em>「做你想做的，其他的都滚蛋。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1777612/\" target=\"_blank\" rel=\"noopener\">《阳光小美女》</a></em></p>\n</blockquote>\n<p><strong>2019-11-15</strong></p>\n<blockquote>\n<p><em>「查理，有遗言吗？」</em><br><em>「别把钱只用在一个地方。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1937257/\" target=\"_blank\" rel=\"noopener\">《微不足道》</a></em></p>\n</blockquote>\n<p><strong>2019-11-14</strong></p>\n<blockquote>\n<p><em>「当两个人相爱，但无法幸福，这才是真正的悲剧。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/21318488/\" target=\"_blank\" rel=\"noopener\">《消失的爱人》</a></em></p>\n</blockquote>\n<p><strong>2019-11-13</strong></p>\n<blockquote>\n<p><em>「虽然我对他很生气，但是他对我还是有吸引力的。为什么我要将他拱手让人？谁说一定是她赢？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292268/\" target=\"_blank\" rel=\"noopener\">《好家伙》</a></em></p>\n</blockquote>\n<p><strong>2019-11-12</strong></p>\n<blockquote>\n<p><em>「致怀抱梦想的傻瓜们，哪怕他们看来疯癫不羁；致那些支离破碎的心；致我们闯下的祸。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25934014/\" target=\"_blank\" rel=\"noopener\">《爱乐之城》</a></em></p>\n</blockquote>\n<p><strong>2019-11-11</strong></p>\n<blockquote>\n<p><em>「所有的光鲜亮丽都敌不过时间，并且一去不复返。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3364223/\" target=\"_blank\" rel=\"noopener\">《了不起的盖茨比》</a></em></p>\n</blockquote>\n<p><strong>2019-11-10</strong></p>\n<blockquote>\n<p><em>「找到了！</em><br><em>什么？永恒</em><br><em>那是太阳与海</em><br><em>交相辉映</em></p>\n<p><em>我永恒的灵魂</em><br><em>注视着你的心</em><br><em>纵然黑夜孤寂</em><br><em>白昼如焚」</em><br>————《永恒》/ 阿蒂尔·兰波<br><em>-兰波逝世128周年-</em><br><em>———— <a href=\"https://movie.douban.com/subject/1297233/\" target=\"_blank\" rel=\"noopener\">《心之全蚀》</a></em></p>\n</blockquote>\n<p><strong>2019-11-09</strong></p>\n<blockquote>\n<p><em>「不要温顺地走进这个良夜，激情不能被消沉的暮色淹没；咆哮吧，咆哮，痛斥那光的退缩。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1889243/\" target=\"_blank\" rel=\"noopener\">《星际穿越》</a></em></p>\n</blockquote>\n<p><strong>2019-11-08</strong></p>\n<blockquote>\n<p><em>「一切都还顺利，但若想更进一步，我就得抢先对手一步，并承担起风险。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25750969/\" target=\"_blank\" rel=\"noopener\">《夜行者》</a></em></p>\n</blockquote>\n<p><strong>2019-11-07</strong></p>\n<blockquote>\n<p><em>「你大概是我现在每天醒来的唯一动力了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25929151/\" target=\"_blank\" rel=\"noopener\">《遇见你之前》</a></em></p>\n</blockquote>\n<p><strong>2019-11-06</strong></p>\n<blockquote>\n<p><em>「本来以为，我再活一次的话，也许会有什么不一样。结果还是差不多，没什么不同。只是突然觉得，再活一次的话，好像，真的没那个必要。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292434/\" target=\"_blank\" rel=\"noopener\">《一一》</a></em></p>\n</blockquote>\n<p><strong>2019-11-05</strong></p>\n<blockquote>\n<p><em>「人们总梦想上天摘星，结局却和鱼缸里的金鱼一样。我觉得从一开始就让孩子明白人生是荒谬的，事情就简单多了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3824274/\" target=\"_blank\" rel=\"noopener\">《刺猬的优雅》</a></em></p>\n</blockquote>\n<p><strong>2019-11-04</strong></p>\n<blockquote>\n<p><em>「没人不希望恶有恶报，但又没人愿意脏了自己的手。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/24750126/\" target=\"_blank\" rel=\"noopener\">《荒蛮故事》</a></em></p>\n</blockquote>\n<p><strong>2019-11-03</strong></p>\n<blockquote>\n<p><em>「当你有任何烦恼和不开心时，只需大声叫出——Hakuna Matata!」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1301753/\" target=\"_blank\" rel=\"noopener\">《狮子王》</a></em></p>\n</blockquote>\n<p><strong>2019-11-02</strong></p>\n<blockquote>\n<p><em>「花太多时间去想所剩下的生命，反而忘了好好地生活。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1418752/\" target=\"_blank\" rel=\"noopener\">《万能钥匙》</a></em></p>\n</blockquote>\n<p><strong>2019-11-01</strong></p>\n<blockquote>\n<p><em>「若你在逗留期间没有找到伴侣，就会变成一种动物。你曾想过自己会变成什么吗？大部分人会想到狗，所以世上才有那么多狗。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/20514947/\" target=\"_blank\" rel=\"noopener\">《龙虾》</a></em></p>\n</blockquote>\n<hr>\n<h3 id=\"十月-October\"><a href=\"#十月-October\" class=\"headerlink\" title=\"十月 / October\"></a>十月 / October</h3><p><strong>2019-10-31</strong></p>\n<blockquote>\n<p><em>「爱意味着永远用不着说对不起。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293203/\" target=\"_blank\" rel=\"noopener\">《人鬼情未了》</a></em></p>\n</blockquote>\n<p><strong>2019-10-30</strong></p>\n<blockquote>\n<p><em>「对我来说，走进这间屋子，比回我自己家容易。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3604148/\" target=\"_blank\" rel=\"noopener\">《小丑回魂》</a></em></p>\n</blockquote>\n<p><strong>2019-10-29</strong></p>\n<blockquote>\n<p><em>「你一直戴着它？」</em><br><em>「是的，傻瓜。我一直戴着它，一直戴着。我一直爱着你。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291853/\" target=\"_blank\" rel=\"noopener\">《英国病人》</a></em></p>\n</blockquote>\n<p><strong>2019-10-28</strong></p>\n<blockquote>\n<p><em>「我的爸爸曾对我说过他的致富经历：有一天，它捡到一个苹果并把它卖了，赚了一法郎。他用赚的一法郎买了两个苹果，并以两法郎的价格卖出了两个苹果……再后来，他继承了他叔叔的遗产。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3157605/\" target=\"_blank\" rel=\"noopener\">《巴黎淘气帮》</a></em></p>\n</blockquote>\n<p><strong>2019-10-27</strong></p>\n<blockquote>\n<p><em>「我们离开这里好不好？」</em><br><em>「我们能去哪里？」</em><br><em>「我也不知道。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1307561/\" target=\"_blank\" rel=\"noopener\">《青少年哪吒》</a></em></p>\n</blockquote>\n<p><strong>2019-10-26</strong></p>\n<blockquote>\n<p><em>「事物总是会变化的，这是自然法则。大多数人害怕变化，但如果你把它看成是某种你总是可以依赖的东西的话，那它就能成为一种安慰。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293929/\" target=\"_blank\" rel=\"noopener\">《廊桥遗梦》</a></em></p>\n</blockquote>\n<p><strong>2019-10-25</strong></p>\n<blockquote>\n<p><em>「沉沉闷闷，</em><br><em>迷迷蒙蒙，</em><br><em>钟声荡起。</em><br><em>往事如烟，</em><br><em>在眼前重现，</em><br><em>我落泪如雨。</em></p>\n<p><em>我走了，</em><br><em>恶风卷着我，</em><br><em>东飘西零。</em><br><em>飘呵，飘呵，</em><br><em>宛如那，</em><br><em>枯叶飘零。」</em><br>————《秋之歌》/ 保尔·魏尔伦<br><em>———— <a href=\"https://movie.douban.com/subject/26616719/\" target=\"_blank\" rel=\"noopener\">《弗兰兹》</a></em></p>\n</blockquote>\n<p><strong>2019-10-24</strong></p>\n<blockquote>\n<p><em>「机器不同于人，所以他们以不同的方式思考。有趣的问题是，只因为某样东西与你思考的方式不同，就意味着它不思考吗？我们允许人与人之间存在诸多差异，你喜欢草莓，我讨厌溜冰，你看悲剧电影会哭，我对花粉过敏。若不是表明我们的大脑以不同的方式工作、以不同的方式思考，那么不同的品味、不同的喜好，有什么意义呢？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10463953/\" target=\"_blank\" rel=\"noopener\">《模仿游戏》</a></em></p>\n</blockquote>\n<p><strong>2019-10-23</strong></p>\n<blockquote>\n<p><em>「多希望我能知道该如何戒掉你。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1418834/\" target=\"_blank\" rel=\"noopener\">《断背山》</a></em></p>\n</blockquote>\n<p><strong>2019-10-22</strong></p>\n<blockquote>\n<p><em>「当你可以跟一个人不说话，分享片刻寂静，且不会觉得尴尬时，那一刻你就会知道，你遇到了对的人。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291832/\" target=\"_blank\" rel=\"noopener\">《低俗小说》</a></em></p>\n</blockquote>\n<p><strong>2019-10-21</strong></p>\n<blockquote>\n<p><em>「三个女人一台戏，八个女人一台自嗨的舞台剧。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1299292/\" target=\"_blank\" rel=\"noopener\">《八美图》</a></em></p>\n</blockquote>\n<p><strong>2019-10-20</strong></p>\n<blockquote>\n<p><em>「不是谁都能成为伟大的艺术家，但伟大的艺术家可能来自任何地方。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1793491/\" target=\"_blank\" rel=\"noopener\">《美食总动员》</a></em></p>\n</blockquote>\n<p><strong>2019-10-19</strong></p>\n<blockquote>\n<p><em>「每一天，都将是我们余下生命之中的每一天。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292062/\" target=\"_blank\" rel=\"noopener\">《美国丽人》</a></em></p>\n</blockquote>\n<p><strong>2019-10-18</strong></p>\n<blockquote>\n<p><em>「不管怎样，我的心已经支离破碎，永远都无法愈合。我知道你的心也碎了，但我不需要背负。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25980443/\" target=\"_blank\" rel=\"noopener\">《海边的曼彻斯特》</a></em></p>\n</blockquote>\n<p><strong>2019-10-17</strong></p>\n<blockquote>\n<p><em>「当有一天我们回首往事，会知道拯救大兵肖恩是我们在战火纷飞的年代里，完成的一件杰作。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292849/\" target=\"_blank\" rel=\"noopener\">《拯救大兵肖恩》</a></em></p>\n</blockquote>\n<p><strong>2019-10-16</strong></p>\n<blockquote>\n<p><em>「我会把仪表一直开着，你会回来的，对吗？」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3011051/\" target=\"_blank\" rel=\"noopener\">《恐怖游轮》</a></em></p>\n</blockquote>\n<p><strong>2019-10-15</strong></p>\n<blockquote>\n<p><em>「有时候，一个梦想可以点亮整片天空。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293753/\" target=\"_blank\" rel=\"noopener\">《十月的天空》</a></em></p>\n</blockquote>\n<p><strong>2019-10-14</strong></p>\n<blockquote>\n<p><em>「打起精神来！打起精神来！」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1431683/\" target=\"_blank\" rel=\"noopener\">《蜡笔小新》</a></em></p>\n</blockquote>\n<p><strong>2019-10-13</strong></p>\n<blockquote>\n<p><em>「你还能哭，这说明你还有救。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1302205/\" target=\"_blank\" rel=\"noopener\">《办公室的故事》</a></em></p>\n</blockquote>\n<p><strong>2019-10-12</strong></p>\n<blockquote>\n<p><em>「探戈里无所谓错步，不像人生。它简单，所以才棒，要是踏错步或绊倒了，继续跳就好！」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1298624/\" target=\"_blank\" rel=\"noopener\">《闻香识女人》</a></em></p>\n</blockquote>\n<p><strong>2019-10-11</strong></p>\n<blockquote>\n<p><em>「无论你剩下的光阴是五分钟还是五十年，如果不是今天，如果不是你，我永远不会了解爱。谢谢你成为那个教会我去爱和被爱的人。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1440703/\" target=\"_blank\" rel=\"noopener\">《爱再来一次》</a></em></p>\n</blockquote>\n<p><strong>2019-10-10</strong></p>\n<blockquote>\n<p><em>「我知道自己是什么，也知道自己会变成什么。我看见一切，别人却视而不见。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291562/\" target=\"_blank\" rel=\"noopener\">《黑暗中的舞者》</a></em></p>\n</blockquote>\n<p><strong>2019-10-09</strong></p>\n<blockquote>\n<p><em>「如果我什么都没有，那我也就什么都不会失去了。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292048/\" target=\"_blank\" rel=\"noopener\">《蓝白红三部曲之蓝》</a></em></p>\n</blockquote>\n<p><strong>2019-10-08</strong></p>\n<blockquote>\n<p><em>「你师父平时都买八十只螃蟹，他三十，我五十，你这点儿够谁吃。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/25919910/\" target=\"_blank\" rel=\"noopener\">《师父》</a>」</em></p>\n</blockquote>\n<p><strong>2019-10-07</strong></p>\n<blockquote>\n<p><em>「外婆，如果你病了，就发个空信，我就会知道是你，我会尽快来，好吗？」</em><br><em>「Grandma, if you get sick, just send a blank letter. Then I’ll know it’s you, and I’ll come fast.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1299361/\" target=\"_blank\" rel=\"noopener\">《爱·回家》</a></em></p>\n</blockquote>\n<p><strong>2019-10-06</strong></p>\n<blockquote>\n<p><em>「阿高，我觉得这是你应得的（金胡萝卜奖），为这个漂亮美好的西瓜，我们有很多地方要谢谢你。」</em><br><em>「Well, I think you deserve this, Gromit. For a brave and splendid melon. We’ve all got a lot to thank you for.」</em><br><em>「人人皆有得意之时。」</em><br><em>「Every dog has his day.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1419901/\" target=\"_blank\" rel=\"noopener\">《超级无敌掌门狗：人兔的诅咒》</a></em></p>\n</blockquote>\n<p><strong>2019-10-05</strong></p>\n<blockquote>\n<p><em>「维斯帕：密码多少？」</em><br><em>「Vesper: ‘The password, please.’」</em><br><em>「邦德：你的名字。」</em><br><em>「Bond: ‘V-E-S-P-E-R.’」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1418190/\" target=\"_blank\" rel=\"noopener\">《007：大战皇家赌场》</a></em></p>\n</blockquote>\n<p><strong>2019-10-04</strong></p>\n<blockquote>\n<p><em>「只要人类不出现，一切都是美好和感人的。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1473562/\" target=\"_blank\" rel=\"noopener\">《丛林赤子心》</a></em></p>\n</blockquote>\n<p><strong>2019-10-03</strong></p>\n<blockquote>\n<p><em>「我不在乎你是否完全属于我，我只要我爱的人一直在我身旁，即使他爱的是别人。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1946786/\" target=\"_blank\" rel=\"noopener\">《隐藏的恋情》</a></em></p>\n</blockquote>\n<p><strong>2019-10-02</strong></p>\n<blockquote>\n<p><em>「你有五分钟沉迷在迷人的伤痛中，享受它，拥抱它，抛弃它……继续前进。」</em><br><em>「You have five minutes to wallow in the delicious misery. Enjoy it, embrace it, discard it…and proceed.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1419933/\" target=\"_blank\" rel=\"noopener\">《伊丽莎白镇》</a></em></p>\n</blockquote>\n<p><strong>2019-10-01</strong></p>\n<blockquote>\n<p><em>「这是盐的味道，山的味道，风的味道，阳光的味道，也是时间的味道，人情的味道。这些味道，已经在漫长的时光中和故土、乡亲、念旧、勤俭、坚忍等等情感和信念混合在一起，才下舌尖，又上心间。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/10606004/\" target=\"_blank\" rel=\"noopener\">《舌尖上的中国 第一季》</a></em></p>\n</blockquote>\n<hr>\n<h3 id=\"九月-September\"><a href=\"#九月-September\" class=\"headerlink\" title=\"九月 / September\"></a>九月 / September</h3><p><strong>2019-09-30</strong></p>\n<blockquote>\n<p><em>「永远给自己一个梦想，即使它很远。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1303021/\" target=\"_blank\" rel=\"noopener\">《小鞋子》</a></em></p>\n</blockquote>\n<p><strong>2019-09-29</strong></p>\n<blockquote>\n<p><em>「在某个时刻，我们掌握了真实，但真实往往稍纵即逝。」</em><br><em>「Hence there’s a moment in which we grasp reality, but then the moment passes.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1310176/\" target=\"_blank\" rel=\"noopener\">《放大》</a></em></p>\n</blockquote>\n<p><strong>2019-09-28</strong></p>\n<blockquote>\n<p><em>「那天早上我还没有变成吸血鬼，我最后一次看了日出。我完全记得它的细节，但是我已忘记之前的每个日出。我最后一次欣赏这壮观的景色，就好像我是第一次看一样，然后我就对阳光永别了，变成了我现在的这个样子。」</em><br><em>「That morning, I was not yet a vampire and I saw my last sunrise. I remember it completely and yet I can’t recall any sunrise before it. I watched the whole magnificence of the dawn for the last time as if it were the first. And then I said farewell to sunlight and set out to become.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1299327/\" target=\"_blank\" rel=\"noopener\">《夜访吸血鬼》</a></em></p>\n</blockquote>\n<p><strong>2019-09-27</strong></p>\n<blockquote>\n<p><em>「你我犹如隔镜视物，所见无非虚幻迷蒙。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1291936/\" target=\"_blank\" rel=\"noopener\">《攻壳机动队》</a></em></p>\n</blockquote>\n<p><strong>2019-09-26</strong></p>\n<blockquote>\n<p><em>「眼睛不在这里</em><br><em>在这星星即将死去的山谷</em><br><em>在这空心的山谷里</em><br><em>在我们这已经失去的破碎的王国</em><br><em>这里没有眼睛</em></p>\n<p><em>在这最后的相会处</em><br><em>我们在一起摸索</em><br><em>避免语言</em><br><em>在这条肿胀的河滩头聚会」</em><br>———— 《空心人》T.S. 艾略特<br><em>-艾略特诞辰131周年-</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292260/\" target=\"_blank\" rel=\"noopener\">《现代启示录》</a></em></p>\n</blockquote>\n<p><strong>2019-09-25</strong></p>\n<blockquote>\n<p><em>「\b这些年轻人一点意志力也没有。」</em><br><em>「These young people have no willpower!」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1855834/\" target=\"_blank\" rel=\"noopener\">《充气娃娃之恋》</a></em></p>\n</blockquote>\n<p><strong>2019-09-24</strong></p>\n<blockquote>\n<p><em>「喝了咱的酒 / 一人敢走青刹口」</em><br><em>「喝了咱的酒 / 见了皇帝不磕头」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1306505/\" target=\"_blank\" rel=\"noopener\">《红高粱》</a></em></p>\n</blockquote>\n<p><strong>2019-09-23</strong></p>\n<blockquote>\n<p><em>「你不知道一支好曲子是会怎样地支配你。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1322674/\" target=\"_blank\" rel=\"noopener\">《捕鼠者》</a></em></p>\n</blockquote>\n<p><strong>2019-09-22</strong></p>\n<blockquote>\n<p><em>「欢迎来到现实世界，它糟糕的要命，但你会爱上它的。」</em><br><em>「Welcome to the real world. It sucks. You’re gonna love it.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1393859/\" target=\"_blank\" rel=\"noopener\">《老友记 第一季》</a></em></p>\n</blockquote>\n<p><strong>2019-09-21</strong></p>\n<blockquote>\n<p><em>「或许我们需要一段时间独处，才能感触彼此灵魂的深处。当第一次在中央车站楼梯口相逢时，我们伫立良久，却未曾想过，会迎来这场命运的交集。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292218/\" target=\"_blank\" rel=\"noopener\">《中央车站》</a></em></p>\n</blockquote>\n<p><strong>2019-09-20</strong></p>\n<blockquote>\n<p><em>「如果有一天我忍不住问你，你一定要骗我。就算你心里多不情愿，也不要告诉我，你最爱的人不是我。」</em><br><em>「If I ever ask you this question, Please lie. No matter how your heart rebels, Please tell me I’m the one you love the most.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1292328/\" target=\"_blank\" rel=\"noopener\">《东邪西毒》</a></em></p>\n</blockquote>\n<p><strong>2019-09-19</strong></p>\n<blockquote>\n<p><em>「深夜吃东西的魅力就是那一抹罪恶感。」</em><br><em>———— <a href=\"https://movie.douban.com/subject/3991933/\" target=\"_blank\" rel=\"noopener\">《深夜食堂》</a></em></p>\n</blockquote>\n<p><strong>2019-09-18</strong></p>\n<blockquote>\n<p><em>「文明应该被尊重，</em><br><em>那么生命呢，</em><br><em>生命应该被尊重吗？</em><br><em>文明是人类创造出来的，</em><br><em>如果没有人类，</em><br><em>文明从何谈起？」</em></p>\n<p><em>-九一八事变88周年-</em><br><em>———— <a href=\"https://movie.douban.com/subject/1949812/\" target=\"_blank\" rel=\"noopener\">《东京审判》</a></em></p>\n</blockquote>\n<p><strong>2019-09-17</strong></p>\n<blockquote>\n<p><em>「将近二十年了，我生活在一个大谎言里面，生活里面有好多的感受，痛苦的、快乐的、我好想跟你们分享，可是我不能。有时候我忍不住想干脆跟你们坦白算了，可是又不忍心把扛了这么多年的担子，再放到你们的肩膀上。」</em><br><em>「It’s been 20 years. I’ve been living a big lie. There has been so much pain and joy…I’ve wanted to share with you, but I couldn’t. Sometimes I wanted to tell you everything…but I couldn’t burden you with what has been with me so long.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1303037/\" target=\"_blank\" rel=\"noopener\">《\b喜宴》</a></em></p>\n</blockquote>\n<p><strong>2019-09-16</strong></p>\n<blockquote>\n<p><em>「我有充分的理由回家，但只有一个理由留下来。」</em><br><em>「什么理由？」</em><br><em>「你。」</em><br><em>「I’ve been thinking about it, and there’s a million reasons for me to go home…but there’s only one reason for me to stay.」</em><br><em>「What reason is that?」</em><br><em>「Well, you.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1293212/\" target=\"_blank\" rel=\"noopener\">《长大》</a></em></p>\n</blockquote>\n<p><strong>2019-09-15</strong></p>\n<blockquote>\n<p><em>「可怜的盖斯帕德。」</em><br><em>「Poor Gaspard.」</em><br><em>–雅克·贝克诞辰113周年–</em><br><em>———— <a href=\"https://movie.douban.com/subject/1424334/\" target=\"_blank\" rel=\"noopener\">《洞》</a></em></p>\n</blockquote>\n<p><strong>2019-09-14</strong></p>\n<blockquote>\n<p><em>「唯一会改变的事情就是，你会变得更加混蛋。」</em><br><em>「The only thing that’s gonna change is you’re gonna become an even bigger cunt.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/2044089/\" target=\"_blank\" rel=\"noopener\">《杀手没有假期》</a></em></p>\n</blockquote>\n<p><strong>2019-09-13</strong></p>\n<blockquote>\n<p><em>「适逢三五便团圆，满把晴光护玉栏。天上一轮才捧出，人间万姓仰头看。」 ————《对月寓怀》 / 曹雪芹</em><br><em>———— <a href=\"https://movie.douban.com/subject/1864810/\" target=\"_blank\" rel=\"noopener\">《红楼梦》</a></em></p>\n</blockquote>\n<p><strong>2019-09-12</strong></p>\n<blockquote>\n<p><em>「我们不能在一起，但并不代表我不爱你。」</em><br><em>「I think it’s over between you and me.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/2365260/\" target=\"_blank\" rel=\"noopener\">《爱在暹罗》</a></em></p>\n</blockquote>\n<p><strong>2019-09-11</strong></p>\n<blockquote>\n<p><em>「宝贝，我向你保证，如果我能平安回来，明天就辞职。」</em><br><em>「But, baby, I promise you, if I get out of this, I’m quitting tomorrow.」</em><br><em>「当天四架遭到劫持的飞机，只有联航93没有撞向最终目标。它与10时03芬坠毁在滨州杉克谷镇附近，机上人员全部遇难。」 ———— 记9.11事件</em><br><em>———— <a href=\"https://movie.douban.com/subject/1588945/\" target=\"_blank\" rel=\"noopener\">《93航班》</a></em></p>\n</blockquote>\n<p><strong>2019-09-10</strong></p>\n<blockquote>\n<p><em>「这是一首爱之歌，我知道你们会分享此爱，我祈求你们永远不会让它逝去。」</em><br><em>「I would like to sing for you now a love song. I know you share this love. I pray that you will never let it die.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/1294408/\" target=\"_blank\" rel=\"noopener\">《音乐之声》</a></em></p>\n</blockquote>\n<p><strong>2019-09-09</strong></p>\n<blockquote>\n<p><em>「别把生命中的敌人当成一种诅咒，它也可能是上天的恩赐。智者从敌人身上学到的，比愚者从朋友身上学到的还要多。」</em><br><em>「Stop thinking of it as a curse to have been given an enemy in life. It can be blessing too. A wise man gets more from his enemies than a fool from his friends.」</em><br><em>———— <a href=\"https://movie.douban.com/subject/6803494/\" target=\"_blank\" rel=\"noopener\">《极速风流》</a></em></p>\n</blockquote>\n"}],"Post":[{"title":"Git命令操作中的一些问题和解决方案","updated":"2019-11-22T16:00:00.000Z","toc":true,"comments":1,"_content":"\n## Git Add\n\n**1、Git Add 过程中出现(untracked content)**\n\n* 意思是目录没有被跟踪\n\n错误信息\n```sh\nmodified:   XXXX (untracked content)\n```\n\n**解决方案：**\n- 删除xxx目录内的 .git目录，重新git add即可。\n","source":"_posts/2019-11-23-git遇到的一些问题.md","raw":"---\ntitle: Git命令操作中的一些问题和解决方案\nupdated: 2019/11/23\ntags: \n  - 前端开发\n  - Git相关\ncategory: \n- [Git]\ntoc: true\ncomments: true\n---\n\n## Git Add\n\n**1、Git Add 过程中出现(untracked content)**\n\n* 意思是目录没有被跟踪\n\n错误信息\n```sh\nmodified:   XXXX (untracked content)\n```\n\n**解决方案：**\n- 删除xxx目录内的 .git目录，重新git add即可。\n","slug":"git遇到的一些问题","published":1,"date":"2019-11-22T16:00:00.000Z","layout":"post","photos":[],"link":"","_id":"ckcctyvrr0001m5snb42m8hg9","content":"<h2 id=\"Git-Add\"><a href=\"#Git-Add\" class=\"headerlink\" title=\"Git Add\"></a>Git Add</h2><p><strong>1、Git Add 过程中出现(untracked content)</strong></p>\n<ul>\n<li>意思是目录没有被跟踪</li>\n</ul>\n<p>错误信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modified:   XXXX (untracked content)</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方案：</strong></p>\n<ul>\n<li>删除xxx目录内的 .git目录，重新git add即可。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Git-Add\"><a href=\"#Git-Add\" class=\"headerlink\" title=\"Git Add\"></a>Git Add</h2><p><strong>1、Git Add 过程中出现(untracked content)</strong></p>\n<ul>\n<li>意思是目录没有被跟踪</li>\n</ul>\n<p>错误信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modified:   XXXX (untracked content)</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方案：</strong></p>\n<ul>\n<li>删除xxx目录内的 .git目录，重新git add即可。</li>\n</ul>\n"},{"title":"大话数据结构","updated":"2019-11-22T16:00:00.000Z","reading":true,"comments":0,"_content":"\n## 数据结构\n\n> 相互之间存在一种或多种特定关系的数据元素的集合。\n> 简单来说，就是数据中的元素之间存在着某种关系（比如分子结构，就是说组成分子的原子之间的排列方式）\n> 严格来说，数据结构是指各个组成部分相互搭配和排列的方式\n\n\n***\n\n## 数据结构的起源\n\n> 数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。\n\n***\n\n## 计算机中的数据\n\n**计算机中的数据是啥？**\n> 描述客观事物的符号 / 计算机可操作的对象\n> 能被计算机识别并输入给计算机处理的符号集合\n> 数据不仅仅包括**整型**、**实型**等数值类型，还包括字符及**声音**、**图像**、**视频**等非数值类型。\n\n**计算机中的数据需具备两个条件：**\n+ 可以输入到计算机中\n+ 能被计算机程序处理\n\n**数据计算方式：**\n+ 整型、实型等数值类型  —> 可进行数值计算\n+ 字符数据类型（声音、图像、视频等） —> 可通过编码的方式变成字符数据来处理。\n\n***\n\n## 数据元素\n\n> 计算机中，数据元素并不是孤立、杂乱无序存在的，而是具有内在联系的数据集合。\n> 数据元素之间存在的一种或多种特定关系，也就是数据的组织形式。\n\n**什么是数据元素？**\n> 在计算机中通常作为整体处理，也被称为记录。\n\n**生活中的例子什么是数据元素？**\n> 人类的数据元素 — **人**\n> 畜类的数据元素 — **牛**、**马**、**羊**、**鸡**、**猪**、**狗**等动物\n\n### 数据项\n\n> 1.一个数据元素由若干个数据项组成。\n> 2.数据项定义为数据中的最小单位\n\n\n**例子：**\n+ 比如人这样的数据元素可以有：**眼**、**鼻**、**耳**、**嘴**、**手**、**脚**这些数据项\n+ 也有**姓名**、**年龄**、**身高**、**体重**、**性别**、**出生地址**、**联系电话**等数据项\n\n\n### 数据对象\n\n**什么是数据对象？**\n> 性质相同的**数据元素**的集合，数据的**子集**\n> 数据元素具有相同数量和类型的数据项\n\n\n****\n\n\n## 逻辑结构与物理结构\n\n**数据结构又分为：逻辑结构和物理结构**\n\n\n***\n\n### 逻辑结构\n\n**什么是逻辑结构？**\n> 简单来说，逻辑结构是指数据对象中数据元素之间的相互关系\n\n\n**逻辑结构又分为四种**\n+ 1.集合结构\n+ 2.线性结构\n+ 3.树形结构\n+ 4.图形结构\n\n\n#### 集合结构\n\n+ 集合结构中的数据元素除了同属于一个集合外，之间没有其他关系，各个数据元素之间是“平等”的\n+ 数据结构中的集合关系就类似于数学中的集合。\n\n#### 线性结构\n\n+ 线性结构中的数据元素之间是一对一的关系\n\n\n#### 树形结构\n\n+ 树形结构中的数据元素之间是一对多的层次关系\n\n\n#### 图形结构\n\n+ 图形结构的数据元素是多对多的关系\n\n***\n\n### 物理结构\n+ 物理结构也叫存储结构，数据的逻辑结构在计算机中的存储形式\n\n\n如何把数据元素储蓄到计算机的存储器中。\n\n\n### 数据元素的存储结构形式\n\n数据元素的存储结构形式分为：**顺序存储**、**链式存储**\n\n\n#### 顺序存储结构\n\n**什么是顺序存储结构？**\n> 数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致\n\n**例子：**\n> 排队占位、按先后顺序排列，计算机语言中数组就是这种顺序存储结构。\n\n\n#### 链式存储结构\n\n**什么是链式存储结构？**\n> 数据元素存放在任意的存储结构单元里，这组存储单元可以是连续的，也可以是不连续的。\n> 链式结构更加灵活、数据存在哪里不重要，只要有一个指针放了相应的地址就能找到它。\n\n\n**为什么需要链式存储结构呢？**\n> 因为数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，通过地址就可以找到相关联数据元素的位置，也就是链式存储数据结构。\n\n***\n\n### 逻辑结构和物理结构解决了什么问题？\n\n**逻辑结构：**\n> 为了解决具体某个问题，怼问题理解的基础上，选择一个合适的数据结构来表示数据元素之间的逻辑关系。（面向问题而存在）\n\n**物理结构：**\n> 面向计算机而存在，基本目标是将数据及其逻辑关系存储到计算机的内心中。","source":"_posts/2019-11-23-大话数据结构.md","raw":"---\ntitle: 大话数据结构\nupdated: 2019/11/23\ntags: \n  - 数据结构\n  - 大话数据结构\n  - 计算机科学\n  - Data Structure\n  - 阅读\n  - 读书笔记\ncategories: \n  - [数据结构]\n  - [读书笔记]\n  - [计算机科学]\nreading: true\ncomments: false\n---\n\n## 数据结构\n\n> 相互之间存在一种或多种特定关系的数据元素的集合。\n> 简单来说，就是数据中的元素之间存在着某种关系（比如分子结构，就是说组成分子的原子之间的排列方式）\n> 严格来说，数据结构是指各个组成部分相互搭配和排列的方式\n\n\n***\n\n## 数据结构的起源\n\n> 数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。\n\n***\n\n## 计算机中的数据\n\n**计算机中的数据是啥？**\n> 描述客观事物的符号 / 计算机可操作的对象\n> 能被计算机识别并输入给计算机处理的符号集合\n> 数据不仅仅包括**整型**、**实型**等数值类型，还包括字符及**声音**、**图像**、**视频**等非数值类型。\n\n**计算机中的数据需具备两个条件：**\n+ 可以输入到计算机中\n+ 能被计算机程序处理\n\n**数据计算方式：**\n+ 整型、实型等数值类型  —> 可进行数值计算\n+ 字符数据类型（声音、图像、视频等） —> 可通过编码的方式变成字符数据来处理。\n\n***\n\n## 数据元素\n\n> 计算机中，数据元素并不是孤立、杂乱无序存在的，而是具有内在联系的数据集合。\n> 数据元素之间存在的一种或多种特定关系，也就是数据的组织形式。\n\n**什么是数据元素？**\n> 在计算机中通常作为整体处理，也被称为记录。\n\n**生活中的例子什么是数据元素？**\n> 人类的数据元素 — **人**\n> 畜类的数据元素 — **牛**、**马**、**羊**、**鸡**、**猪**、**狗**等动物\n\n### 数据项\n\n> 1.一个数据元素由若干个数据项组成。\n> 2.数据项定义为数据中的最小单位\n\n\n**例子：**\n+ 比如人这样的数据元素可以有：**眼**、**鼻**、**耳**、**嘴**、**手**、**脚**这些数据项\n+ 也有**姓名**、**年龄**、**身高**、**体重**、**性别**、**出生地址**、**联系电话**等数据项\n\n\n### 数据对象\n\n**什么是数据对象？**\n> 性质相同的**数据元素**的集合，数据的**子集**\n> 数据元素具有相同数量和类型的数据项\n\n\n****\n\n\n## 逻辑结构与物理结构\n\n**数据结构又分为：逻辑结构和物理结构**\n\n\n***\n\n### 逻辑结构\n\n**什么是逻辑结构？**\n> 简单来说，逻辑结构是指数据对象中数据元素之间的相互关系\n\n\n**逻辑结构又分为四种**\n+ 1.集合结构\n+ 2.线性结构\n+ 3.树形结构\n+ 4.图形结构\n\n\n#### 集合结构\n\n+ 集合结构中的数据元素除了同属于一个集合外，之间没有其他关系，各个数据元素之间是“平等”的\n+ 数据结构中的集合关系就类似于数学中的集合。\n\n#### 线性结构\n\n+ 线性结构中的数据元素之间是一对一的关系\n\n\n#### 树形结构\n\n+ 树形结构中的数据元素之间是一对多的层次关系\n\n\n#### 图形结构\n\n+ 图形结构的数据元素是多对多的关系\n\n***\n\n### 物理结构\n+ 物理结构也叫存储结构，数据的逻辑结构在计算机中的存储形式\n\n\n如何把数据元素储蓄到计算机的存储器中。\n\n\n### 数据元素的存储结构形式\n\n数据元素的存储结构形式分为：**顺序存储**、**链式存储**\n\n\n#### 顺序存储结构\n\n**什么是顺序存储结构？**\n> 数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致\n\n**例子：**\n> 排队占位、按先后顺序排列，计算机语言中数组就是这种顺序存储结构。\n\n\n#### 链式存储结构\n\n**什么是链式存储结构？**\n> 数据元素存放在任意的存储结构单元里，这组存储单元可以是连续的，也可以是不连续的。\n> 链式结构更加灵活、数据存在哪里不重要，只要有一个指针放了相应的地址就能找到它。\n\n\n**为什么需要链式存储结构呢？**\n> 因为数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，通过地址就可以找到相关联数据元素的位置，也就是链式存储数据结构。\n\n***\n\n### 逻辑结构和物理结构解决了什么问题？\n\n**逻辑结构：**\n> 为了解决具体某个问题，怼问题理解的基础上，选择一个合适的数据结构来表示数据元素之间的逻辑关系。（面向问题而存在）\n\n**物理结构：**\n> 面向计算机而存在，基本目标是将数据及其逻辑关系存储到计算机的内心中。","slug":"大话数据结构","published":1,"date":"2019-11-22T16:00:00.000Z","layout":"post","photos":[],"link":"","_id":"ckcctyvs40003m5sn697dgc1o","content":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><blockquote>\n<p>相互之间存在一种或多种特定关系的数据元素的集合。<br>简单来说，就是数据中的元素之间存在着某种关系（比如分子结构，就是说组成分子的原子之间的排列方式）<br>严格来说，数据结构是指各个组成部分相互搭配和排列的方式</p>\n</blockquote>\n<hr>\n<h2 id=\"数据结构的起源\"><a href=\"#数据结构的起源\" class=\"headerlink\" title=\"数据结构的起源\"></a>数据结构的起源</h2><blockquote>\n<p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。</p>\n</blockquote>\n<hr>\n<h2 id=\"计算机中的数据\"><a href=\"#计算机中的数据\" class=\"headerlink\" title=\"计算机中的数据\"></a>计算机中的数据</h2><p><strong>计算机中的数据是啥？</strong></p>\n<blockquote>\n<p>描述客观事物的符号 / 计算机可操作的对象<br>能被计算机识别并输入给计算机处理的符号集合<br>数据不仅仅包括<strong>整型</strong>、<strong>实型</strong>等数值类型，还包括字符及<strong>声音</strong>、<strong>图像</strong>、<strong>视频</strong>等非数值类型。</p>\n</blockquote>\n<p><strong>计算机中的数据需具备两个条件：</strong></p>\n<ul>\n<li>可以输入到计算机中</li>\n<li>能被计算机程序处理</li>\n</ul>\n<p><strong>数据计算方式：</strong></p>\n<ul>\n<li>整型、实型等数值类型  —&gt; 可进行数值计算</li>\n<li>字符数据类型（声音、图像、视频等） —&gt; 可通过编码的方式变成字符数据来处理。</li>\n</ul>\n<hr>\n<h2 id=\"数据元素\"><a href=\"#数据元素\" class=\"headerlink\" title=\"数据元素\"></a>数据元素</h2><blockquote>\n<p>计算机中，数据元素并不是孤立、杂乱无序存在的，而是具有内在联系的数据集合。<br>数据元素之间存在的一种或多种特定关系，也就是数据的组织形式。</p>\n</blockquote>\n<p><strong>什么是数据元素？</strong></p>\n<blockquote>\n<p>在计算机中通常作为整体处理，也被称为记录。</p>\n</blockquote>\n<p><strong>生活中的例子什么是数据元素？</strong></p>\n<blockquote>\n<p>人类的数据元素 — <strong>人</strong><br>畜类的数据元素 — <strong>牛</strong>、<strong>马</strong>、<strong>羊</strong>、<strong>鸡</strong>、<strong>猪</strong>、<strong>狗</strong>等动物</p>\n</blockquote>\n<h3 id=\"数据项\"><a href=\"#数据项\" class=\"headerlink\" title=\"数据项\"></a>数据项</h3><blockquote>\n<p>1.一个数据元素由若干个数据项组成。<br>2.数据项定义为数据中的最小单位</p>\n</blockquote>\n<p><strong>例子：</strong></p>\n<ul>\n<li>比如人这样的数据元素可以有：<strong>眼</strong>、<strong>鼻</strong>、<strong>耳</strong>、<strong>嘴</strong>、<strong>手</strong>、<strong>脚</strong>这些数据项</li>\n<li>也有<strong>姓名</strong>、<strong>年龄</strong>、<strong>身高</strong>、<strong>体重</strong>、<strong>性别</strong>、<strong>出生地址</strong>、<strong>联系电话</strong>等数据项</li>\n</ul>\n<h3 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h3><p><strong>什么是数据对象？</strong></p>\n<blockquote>\n<p>性质相同的<strong>数据元素</strong>的集合，数据的<strong>子集</strong><br>数据元素具有相同数量和类型的数据项</p>\n</blockquote>\n<hr>\n<h2 id=\"逻辑结构与物理结构\"><a href=\"#逻辑结构与物理结构\" class=\"headerlink\" title=\"逻辑结构与物理结构\"></a>逻辑结构与物理结构</h2><p><strong>数据结构又分为：逻辑结构和物理结构</strong></p>\n<hr>\n<h3 id=\"逻辑结构\"><a href=\"#逻辑结构\" class=\"headerlink\" title=\"逻辑结构\"></a>逻辑结构</h3><p><strong>什么是逻辑结构？</strong></p>\n<blockquote>\n<p>简单来说，逻辑结构是指数据对象中数据元素之间的相互关系</p>\n</blockquote>\n<p><strong>逻辑结构又分为四种</strong></p>\n<ul>\n<li>1.集合结构</li>\n<li>2.线性结构</li>\n<li>3.树形结构</li>\n<li>4.图形结构</li>\n</ul>\n<h4 id=\"集合结构\"><a href=\"#集合结构\" class=\"headerlink\" title=\"集合结构\"></a>集合结构</h4><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，之间没有其他关系，各个数据元素之间是“平等”的</li>\n<li>数据结构中的集合关系就类似于数学中的集合。</li>\n</ul>\n<h4 id=\"线性结构\"><a href=\"#线性结构\" class=\"headerlink\" title=\"线性结构\"></a>线性结构</h4><ul>\n<li>线性结构中的数据元素之间是一对一的关系</li>\n</ul>\n<h4 id=\"树形结构\"><a href=\"#树形结构\" class=\"headerlink\" title=\"树形结构\"></a>树形结构</h4><ul>\n<li>树形结构中的数据元素之间是一对多的层次关系</li>\n</ul>\n<h4 id=\"图形结构\"><a href=\"#图形结构\" class=\"headerlink\" title=\"图形结构\"></a>图形结构</h4><ul>\n<li>图形结构的数据元素是多对多的关系</li>\n</ul>\n<hr>\n<h3 id=\"物理结构\"><a href=\"#物理结构\" class=\"headerlink\" title=\"物理结构\"></a>物理结构</h3><ul>\n<li>物理结构也叫存储结构，数据的逻辑结构在计算机中的存储形式</li>\n</ul>\n<p>如何把数据元素储蓄到计算机的存储器中。</p>\n<h3 id=\"数据元素的存储结构形式\"><a href=\"#数据元素的存储结构形式\" class=\"headerlink\" title=\"数据元素的存储结构形式\"></a>数据元素的存储结构形式</h3><p>数据元素的存储结构形式分为：<strong>顺序存储</strong>、<strong>链式存储</strong></p>\n<h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><p><strong>什么是顺序存储结构？</strong></p>\n<blockquote>\n<p>数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致</p>\n</blockquote>\n<p><strong>例子：</strong></p>\n<blockquote>\n<p>排队占位、按先后顺序排列，计算机语言中数组就是这种顺序存储结构。</p>\n</blockquote>\n<h4 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h4><p><strong>什么是链式存储结构？</strong></p>\n<blockquote>\n<p>数据元素存放在任意的存储结构单元里，这组存储单元可以是连续的，也可以是不连续的。<br>链式结构更加灵活、数据存在哪里不重要，只要有一个指针放了相应的地址就能找到它。</p>\n</blockquote>\n<p><strong>为什么需要链式存储结构呢？</strong></p>\n<blockquote>\n<p>因为数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，通过地址就可以找到相关联数据元素的位置，也就是链式存储数据结构。</p>\n</blockquote>\n<hr>\n<h3 id=\"逻辑结构和物理结构解决了什么问题？\"><a href=\"#逻辑结构和物理结构解决了什么问题？\" class=\"headerlink\" title=\"逻辑结构和物理结构解决了什么问题？\"></a>逻辑结构和物理结构解决了什么问题？</h3><p><strong>逻辑结构：</strong></p>\n<blockquote>\n<p>为了解决具体某个问题，怼问题理解的基础上，选择一个合适的数据结构来表示数据元素之间的逻辑关系。（面向问题而存在）</p>\n</blockquote>\n<p><strong>物理结构：</strong></p>\n<blockquote>\n<p>面向计算机而存在，基本目标是将数据及其逻辑关系存储到计算机的内心中。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><blockquote>\n<p>相互之间存在一种或多种特定关系的数据元素的集合。<br>简单来说，就是数据中的元素之间存在着某种关系（比如分子结构，就是说组成分子的原子之间的排列方式）<br>严格来说，数据结构是指各个组成部分相互搭配和排列的方式</p>\n</blockquote>\n<hr>\n<h2 id=\"数据结构的起源\"><a href=\"#数据结构的起源\" class=\"headerlink\" title=\"数据结构的起源\"></a>数据结构的起源</h2><blockquote>\n<p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。</p>\n</blockquote>\n<hr>\n<h2 id=\"计算机中的数据\"><a href=\"#计算机中的数据\" class=\"headerlink\" title=\"计算机中的数据\"></a>计算机中的数据</h2><p><strong>计算机中的数据是啥？</strong></p>\n<blockquote>\n<p>描述客观事物的符号 / 计算机可操作的对象<br>能被计算机识别并输入给计算机处理的符号集合<br>数据不仅仅包括<strong>整型</strong>、<strong>实型</strong>等数值类型，还包括字符及<strong>声音</strong>、<strong>图像</strong>、<strong>视频</strong>等非数值类型。</p>\n</blockquote>\n<p><strong>计算机中的数据需具备两个条件：</strong></p>\n<ul>\n<li>可以输入到计算机中</li>\n<li>能被计算机程序处理</li>\n</ul>\n<p><strong>数据计算方式：</strong></p>\n<ul>\n<li>整型、实型等数值类型  —&gt; 可进行数值计算</li>\n<li>字符数据类型（声音、图像、视频等） —&gt; 可通过编码的方式变成字符数据来处理。</li>\n</ul>\n<hr>\n<h2 id=\"数据元素\"><a href=\"#数据元素\" class=\"headerlink\" title=\"数据元素\"></a>数据元素</h2><blockquote>\n<p>计算机中，数据元素并不是孤立、杂乱无序存在的，而是具有内在联系的数据集合。<br>数据元素之间存在的一种或多种特定关系，也就是数据的组织形式。</p>\n</blockquote>\n<p><strong>什么是数据元素？</strong></p>\n<blockquote>\n<p>在计算机中通常作为整体处理，也被称为记录。</p>\n</blockquote>\n<p><strong>生活中的例子什么是数据元素？</strong></p>\n<blockquote>\n<p>人类的数据元素 — <strong>人</strong><br>畜类的数据元素 — <strong>牛</strong>、<strong>马</strong>、<strong>羊</strong>、<strong>鸡</strong>、<strong>猪</strong>、<strong>狗</strong>等动物</p>\n</blockquote>\n<h3 id=\"数据项\"><a href=\"#数据项\" class=\"headerlink\" title=\"数据项\"></a>数据项</h3><blockquote>\n<p>1.一个数据元素由若干个数据项组成。<br>2.数据项定义为数据中的最小单位</p>\n</blockquote>\n<p><strong>例子：</strong></p>\n<ul>\n<li>比如人这样的数据元素可以有：<strong>眼</strong>、<strong>鼻</strong>、<strong>耳</strong>、<strong>嘴</strong>、<strong>手</strong>、<strong>脚</strong>这些数据项</li>\n<li>也有<strong>姓名</strong>、<strong>年龄</strong>、<strong>身高</strong>、<strong>体重</strong>、<strong>性别</strong>、<strong>出生地址</strong>、<strong>联系电话</strong>等数据项</li>\n</ul>\n<h3 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h3><p><strong>什么是数据对象？</strong></p>\n<blockquote>\n<p>性质相同的<strong>数据元素</strong>的集合，数据的<strong>子集</strong><br>数据元素具有相同数量和类型的数据项</p>\n</blockquote>\n<hr>\n<h2 id=\"逻辑结构与物理结构\"><a href=\"#逻辑结构与物理结构\" class=\"headerlink\" title=\"逻辑结构与物理结构\"></a>逻辑结构与物理结构</h2><p><strong>数据结构又分为：逻辑结构和物理结构</strong></p>\n<hr>\n<h3 id=\"逻辑结构\"><a href=\"#逻辑结构\" class=\"headerlink\" title=\"逻辑结构\"></a>逻辑结构</h3><p><strong>什么是逻辑结构？</strong></p>\n<blockquote>\n<p>简单来说，逻辑结构是指数据对象中数据元素之间的相互关系</p>\n</blockquote>\n<p><strong>逻辑结构又分为四种</strong></p>\n<ul>\n<li>1.集合结构</li>\n<li>2.线性结构</li>\n<li>3.树形结构</li>\n<li>4.图形结构</li>\n</ul>\n<h4 id=\"集合结构\"><a href=\"#集合结构\" class=\"headerlink\" title=\"集合结构\"></a>集合结构</h4><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，之间没有其他关系，各个数据元素之间是“平等”的</li>\n<li>数据结构中的集合关系就类似于数学中的集合。</li>\n</ul>\n<h4 id=\"线性结构\"><a href=\"#线性结构\" class=\"headerlink\" title=\"线性结构\"></a>线性结构</h4><ul>\n<li>线性结构中的数据元素之间是一对一的关系</li>\n</ul>\n<h4 id=\"树形结构\"><a href=\"#树形结构\" class=\"headerlink\" title=\"树形结构\"></a>树形结构</h4><ul>\n<li>树形结构中的数据元素之间是一对多的层次关系</li>\n</ul>\n<h4 id=\"图形结构\"><a href=\"#图形结构\" class=\"headerlink\" title=\"图形结构\"></a>图形结构</h4><ul>\n<li>图形结构的数据元素是多对多的关系</li>\n</ul>\n<hr>\n<h3 id=\"物理结构\"><a href=\"#物理结构\" class=\"headerlink\" title=\"物理结构\"></a>物理结构</h3><ul>\n<li>物理结构也叫存储结构，数据的逻辑结构在计算机中的存储形式</li>\n</ul>\n<p>如何把数据元素储蓄到计算机的存储器中。</p>\n<h3 id=\"数据元素的存储结构形式\"><a href=\"#数据元素的存储结构形式\" class=\"headerlink\" title=\"数据元素的存储结构形式\"></a>数据元素的存储结构形式</h3><p>数据元素的存储结构形式分为：<strong>顺序存储</strong>、<strong>链式存储</strong></p>\n<h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><p><strong>什么是顺序存储结构？</strong></p>\n<blockquote>\n<p>数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致</p>\n</blockquote>\n<p><strong>例子：</strong></p>\n<blockquote>\n<p>排队占位、按先后顺序排列，计算机语言中数组就是这种顺序存储结构。</p>\n</blockquote>\n<h4 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h4><p><strong>什么是链式存储结构？</strong></p>\n<blockquote>\n<p>数据元素存放在任意的存储结构单元里，这组存储单元可以是连续的，也可以是不连续的。<br>链式结构更加灵活、数据存在哪里不重要，只要有一个指针放了相应的地址就能找到它。</p>\n</blockquote>\n<p><strong>为什么需要链式存储结构呢？</strong></p>\n<blockquote>\n<p>因为数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，通过地址就可以找到相关联数据元素的位置，也就是链式存储数据结构。</p>\n</blockquote>\n<hr>\n<h3 id=\"逻辑结构和物理结构解决了什么问题？\"><a href=\"#逻辑结构和物理结构解决了什么问题？\" class=\"headerlink\" title=\"逻辑结构和物理结构解决了什么问题？\"></a>逻辑结构和物理结构解决了什么问题？</h3><p><strong>逻辑结构：</strong></p>\n<blockquote>\n<p>为了解决具体某个问题，怼问题理解的基础上，选择一个合适的数据结构来表示数据元素之间的逻辑关系。（面向问题而存在）</p>\n</blockquote>\n<p><strong>物理结构：</strong></p>\n<blockquote>\n<p>面向计算机而存在，基本目标是将数据及其逻辑关系存储到计算机的内心中。</p>\n</blockquote>\n"},{"title":"JavaScript Palindrome String(字符串回文)Function","date":"2019-12-01T15:07:26.000Z","_content":"\n## 什么是回文？\n\nPalindromes称之为**回文**，在中文当中简单来说是指倒着念和顺着念都是相同的，前后对称那么就属于**回文**；例如：「**上海自来水来自海上**」。\n\n在英文文当中是指正着看和反着看都相同的单词，例如：「**madam**」。对于数字，又称为回文数，是指一个像“**16461**”这样的对称的数。\n\n综上所述，我们得出回文的规则：\n> + 单个和零个字符都是回文，例如：**「1」**、**「2」**、**「3」**...等等\n> + 如果字符串的第一个字符和最后一个字符相同，并且除了两个字符以外剩余的其他字符也是一个回文的话，字符串是一个回文，例如：**「16461」**、**「level」**、**「noon」**、**「nonon」**...等等\n\n**如何用`JavaScript`来实现回文？**\n\n**现给出测试用例：**\n> + `checkPalindrome('race car')`返回`true`\n> + `checkPalindrome('not a palindrome')`返回`false`\n> + `checkPalindrome('A man, a plan, a canal. Panama')`返回`true`\n> + `checkPalindrome('never odd or even')`返回`true`\n> + `checkPalindrome('nope')`返回`false`\n> + `checkPalindrome('almostomla')`返回`false`\n> + `checkPalindrome('My age is 0, 0 si ega ym.')`返回`true`\n> + `checkPalindrome('1 eye for of 1 eye.')`返回`false`\n> + `checkPalindrome('0_0 (: /-\\ :) 0–0')`返回`true`\n> + `checkPalindrome('我爱妈妈，妈妈爱我')`返回`true`\n\n---\n\n## 方法一 \n\n[*`Array.prototype.reverse()`*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)实现\n\n**`reverse()`是什么？**\n\n在**MDN**中的介绍：\n\n> [*`Array.prototype.reverse()`*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法**会改变原数组**。\n\n简单来说就是可以将数组的元素位置顺序颠倒，并重新返回新的数组\n\n**具体实现思路：**\n> + 利用正则`/[\\W_]/g`(或者`/[^A-Za-z0-9_]/g`)删除不必要的字符\n> + 通过`toLowerCase()`将传入的字符串转换为小写字母\n> + 利用`split()`方法将`string`对象分割成字符串数组，然后用`reverse()\u001d`方法将数组中的元素进行倒序，并返回该数组（会改变原来的数组），最后`join()`方法将这个数组的所有元素连接成一个字符串\n> + 将返回的这个字符串再与原字符串进行比较是否完全相等\n\n解释一下这里的正则表达式规则：\n+ `\\W`：匹配一个非单字字符\n+ 等价于 `[^A-Za-z0-9_]`\n\n那么`\\W`的意思就是：\n+ `[^A-Z]`匹配非26个大写字母中的任意一个\n+ `[^a-z]`匹配非26个小写中的任意一个\n+ `[^0-9]`匹配非**0**到**9**中的任意一个数字\n+ `[^_]`匹配非下划线\n\n主要会用到的正则表达式规则有：\n```javascript\n/[^A-Za-z0–9_]/g \n// 或 \n/[\\W_]/g\n```\n\n**具体代码如下：**\n\n```javascript\n  function checkPalindrome (str) {\n    var removeChar = str.replace(/[\\W_]/g, '').toLowerCase();\n    var checkPalindrome = removeChar.split('').reverse().join('');\n    return removeChar === checkPalindrome;\n  };\n\n  checkPalindrome('race car'); // true\n  checkPalindrome('not a palindrome'); // false\n  checkPalindrome('A man, a plan, a canal. Panama'); // true\n  checkPalindrome('never odd or even'); // true\n  checkPalindrome('nope'); // false\n  checkPalindrome('almostomla'); // false\n  checkPalindrome('My age is 0, 0 si ega ym.') // true\n  checkPalindrome('1 eye for of 1 eye.'); // false\n  checkPalindrome('0_0 (: /-\\ :) 0–0'); // true\n  checkPalindrome('我爱妈妈，妈妈爱我'); // true\n  checkPalindrome('16461'); // true\n  checkPalindrome('javascript'); // false\n  checkPalindrome('Hello world'); // false\n```\n\n也可以写成：\n```javascript\nfunction checkPalindrome(str) {\n  return str.replace(/[\\W_]/g, '').toLowerCase() === str.replace(/[\\W_]/g, '').toLowerCase().split('').reverse().join('');\n}\n```\n\n\n\n## 方法二\n\n使用`for`循环来处理\n\n```javascript\n\n\n```\n\n\n\n## 递归实现\n\n```javascript\n function checkPalindrome(text) {\n  if (text.length <= 1) return true;\n  if (text.charAt(0) != text.charAt(text.length - 1)) return false;\n  return checkPalindrome(text.substr(1, text.length - 2));\n }\n\n checkPalindrome('level'); // true\n checkPalindrome('l'); // true\n checkPalindrome(null); // error\n checkPalindrome(undefined); // erro\n// 需要注意的是这种方法，没有考虑，null和undefined的情况\n```\n","source":"_posts/2019-12-01-javascript-回文函数实现.md","raw":"---\ntitle: JavaScript Palindrome String(字符串回文)Function\ndate: 2019-12-01 23:07:26\ntags:\n  - 前端开发\n  - 前端算法\n  - 前端面试题\n  - 前端算法面试题\n  - JavaScript 字符串回文\n  - JavaScript 算法\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n## 什么是回文？\n\nPalindromes称之为**回文**，在中文当中简单来说是指倒着念和顺着念都是相同的，前后对称那么就属于**回文**；例如：「**上海自来水来自海上**」。\n\n在英文文当中是指正着看和反着看都相同的单词，例如：「**madam**」。对于数字，又称为回文数，是指一个像“**16461**”这样的对称的数。\n\n综上所述，我们得出回文的规则：\n> + 单个和零个字符都是回文，例如：**「1」**、**「2」**、**「3」**...等等\n> + 如果字符串的第一个字符和最后一个字符相同，并且除了两个字符以外剩余的其他字符也是一个回文的话，字符串是一个回文，例如：**「16461」**、**「level」**、**「noon」**、**「nonon」**...等等\n\n**如何用`JavaScript`来实现回文？**\n\n**现给出测试用例：**\n> + `checkPalindrome('race car')`返回`true`\n> + `checkPalindrome('not a palindrome')`返回`false`\n> + `checkPalindrome('A man, a plan, a canal. Panama')`返回`true`\n> + `checkPalindrome('never odd or even')`返回`true`\n> + `checkPalindrome('nope')`返回`false`\n> + `checkPalindrome('almostomla')`返回`false`\n> + `checkPalindrome('My age is 0, 0 si ega ym.')`返回`true`\n> + `checkPalindrome('1 eye for of 1 eye.')`返回`false`\n> + `checkPalindrome('0_0 (: /-\\ :) 0–0')`返回`true`\n> + `checkPalindrome('我爱妈妈，妈妈爱我')`返回`true`\n\n---\n\n## 方法一 \n\n[*`Array.prototype.reverse()`*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)实现\n\n**`reverse()`是什么？**\n\n在**MDN**中的介绍：\n\n> [*`Array.prototype.reverse()`*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法**会改变原数组**。\n\n简单来说就是可以将数组的元素位置顺序颠倒，并重新返回新的数组\n\n**具体实现思路：**\n> + 利用正则`/[\\W_]/g`(或者`/[^A-Za-z0-9_]/g`)删除不必要的字符\n> + 通过`toLowerCase()`将传入的字符串转换为小写字母\n> + 利用`split()`方法将`string`对象分割成字符串数组，然后用`reverse()\u001d`方法将数组中的元素进行倒序，并返回该数组（会改变原来的数组），最后`join()`方法将这个数组的所有元素连接成一个字符串\n> + 将返回的这个字符串再与原字符串进行比较是否完全相等\n\n解释一下这里的正则表达式规则：\n+ `\\W`：匹配一个非单字字符\n+ 等价于 `[^A-Za-z0-9_]`\n\n那么`\\W`的意思就是：\n+ `[^A-Z]`匹配非26个大写字母中的任意一个\n+ `[^a-z]`匹配非26个小写中的任意一个\n+ `[^0-9]`匹配非**0**到**9**中的任意一个数字\n+ `[^_]`匹配非下划线\n\n主要会用到的正则表达式规则有：\n```javascript\n/[^A-Za-z0–9_]/g \n// 或 \n/[\\W_]/g\n```\n\n**具体代码如下：**\n\n```javascript\n  function checkPalindrome (str) {\n    var removeChar = str.replace(/[\\W_]/g, '').toLowerCase();\n    var checkPalindrome = removeChar.split('').reverse().join('');\n    return removeChar === checkPalindrome;\n  };\n\n  checkPalindrome('race car'); // true\n  checkPalindrome('not a palindrome'); // false\n  checkPalindrome('A man, a plan, a canal. Panama'); // true\n  checkPalindrome('never odd or even'); // true\n  checkPalindrome('nope'); // false\n  checkPalindrome('almostomla'); // false\n  checkPalindrome('My age is 0, 0 si ega ym.') // true\n  checkPalindrome('1 eye for of 1 eye.'); // false\n  checkPalindrome('0_0 (: /-\\ :) 0–0'); // true\n  checkPalindrome('我爱妈妈，妈妈爱我'); // true\n  checkPalindrome('16461'); // true\n  checkPalindrome('javascript'); // false\n  checkPalindrome('Hello world'); // false\n```\n\n也可以写成：\n```javascript\nfunction checkPalindrome(str) {\n  return str.replace(/[\\W_]/g, '').toLowerCase() === str.replace(/[\\W_]/g, '').toLowerCase().split('').reverse().join('');\n}\n```\n\n\n\n## 方法二\n\n使用`for`循环来处理\n\n```javascript\n\n\n```\n\n\n\n## 递归实现\n\n```javascript\n function checkPalindrome(text) {\n  if (text.length <= 1) return true;\n  if (text.charAt(0) != text.charAt(text.length - 1)) return false;\n  return checkPalindrome(text.substr(1, text.length - 2));\n }\n\n checkPalindrome('level'); // true\n checkPalindrome('l'); // true\n checkPalindrome(null); // error\n checkPalindrome(undefined); // erro\n// 需要注意的是这种方法，没有考虑，null和undefined的情况\n```\n","slug":"javascript-回文函数实现","published":1,"updated":"2020-01-14T01:55:13.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvsi0006m5snfyn69380","content":"<h2 id=\"什么是回文？\"><a href=\"#什么是回文？\" class=\"headerlink\" title=\"什么是回文？\"></a>什么是回文？</h2><p>Palindromes称之为<strong>回文</strong>，在中文当中简单来说是指倒着念和顺着念都是相同的，前后对称那么就属于<strong>回文</strong>；例如：「<strong>上海自来水来自海上</strong>」。</p>\n<p>在英文文当中是指正着看和反着看都相同的单词，例如：「<strong>madam</strong>」。对于数字，又称为回文数，是指一个像“<strong>16461</strong>”这样的对称的数。</p>\n<p>综上所述，我们得出回文的规则：</p>\n<blockquote>\n<ul>\n<li>单个和零个字符都是回文，例如：<strong>「1」</strong>、<strong>「2」</strong>、<strong>「3」</strong>…等等</li>\n<li>如果字符串的第一个字符和最后一个字符相同，并且除了两个字符以外剩余的其他字符也是一个回文的话，字符串是一个回文，例如：<strong>「16461」</strong>、<strong>「level」</strong>、<strong>「noon」</strong>、<strong>「nonon」</strong>…等等</li>\n</ul>\n</blockquote>\n<p><strong>如何用<code>JavaScript</code>来实现回文？</strong></p>\n<p><strong>现给出测试用例：</strong></p>\n<blockquote>\n<ul>\n<li><code>checkPalindrome(&#39;race car&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;not a palindrome&#39;)</code>返回<code>false</code></li>\n<li><code>checkPalindrome(&#39;A man, a plan, a canal. Panama&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;never odd or even&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;nope&#39;)</code>返回<code>false</code></li>\n<li><code>checkPalindrome(&#39;almostomla&#39;)</code>返回<code>false</code></li>\n<li><code>checkPalindrome(&#39;My age is 0, 0 si ega ym.&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;1 eye for of 1 eye.&#39;)</code>返回<code>false</code></li>\n<li><code>checkPalindrome(&#39;0_0 (: /-\\ :) 0–0&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;我爱妈妈，妈妈爱我&#39;)</code>返回<code>true</code></li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener\"><em><code>Array.prototype.reverse()</code></em></a>实现</p>\n<p><strong><code>reverse()</code>是什么？</strong></p>\n<p>在<strong>MDN</strong>中的介绍：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener\"><em><code>Array.prototype.reverse()</code></em></a> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法<strong>会改变原数组</strong>。</p>\n</blockquote>\n<p>简单来说就是可以将数组的元素位置顺序颠倒，并重新返回新的数组</p>\n<p><strong>具体实现思路：</strong></p>\n<blockquote>\n<ul>\n<li>利用正则<code>/[\\W_]/g</code>(或者<code>/[^A-Za-z0-9_]/g</code>)删除不必要的字符</li>\n<li>通过<code>toLowerCase()</code>将传入的字符串转换为小写字母</li>\n<li>利用<code>split()</code>方法将<code>string</code>对象分割成字符串数组，然后用<code>reverse()\u001d</code>方法将数组中的元素进行倒序，并返回该数组（会改变原来的数组），最后<code>join()</code>方法将这个数组的所有元素连接成一个字符串</li>\n<li>将返回的这个字符串再与原字符串进行比较是否完全相等</li>\n</ul>\n</blockquote>\n<p>解释一下这里的正则表达式规则：</p>\n<ul>\n<li><code>\\W</code>：匹配一个非单字字符</li>\n<li>等价于 <code>[^A-Za-z0-9_]</code></li>\n</ul>\n<p>那么<code>\\W</code>的意思就是：</p>\n<ul>\n<li><code>[^A-Z]</code>匹配非26个大写字母中的任意一个</li>\n<li><code>[^a-z]</code>匹配非26个小写中的任意一个</li>\n<li><code>[^0-9]</code>匹配非<strong>0</strong>到<strong>9</strong>中的任意一个数字</li>\n<li><code>[^_]</code>匹配非下划线</li>\n</ul>\n<p>主要会用到的正则表达式规则有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[^A-Za-z0–<span class=\"number\">9</span>_]/g </span><br><span class=\"line\"><span class=\"comment\">// 或 </span></span><br><span class=\"line\">/[\\W_]/g</span><br></pre></td></tr></table></figure>\n\n<p><strong>具体代码如下：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPalindrome</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> removeChar = str.replace(<span class=\"regexp\">/[\\W_]/g</span>, <span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> checkPalindrome = removeChar.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> removeChar === checkPalindrome;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'race car'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'not a palindrome'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'A man, a plan, a canal. Panama'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'never odd or even'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'nope'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'almostomla'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'My age is 0, 0 si ega ym.'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'1 eye for of 1 eye.'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'0_0 (: /-\\ :) 0–0'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'我爱妈妈，妈妈爱我'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'16461'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'javascript'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'Hello world'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPalindrome</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/[\\W_]/g</span>, <span class=\"string\">''</span>).toLowerCase() === str.replace(<span class=\"regexp\">/[\\W_]/g</span>, <span class=\"string\">''</span>).toLowerCase().split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>使用<code>for</code>循环来处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPalindrome</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (text.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (text.charAt(<span class=\"number\">0</span>) != text.charAt(text.length - <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> checkPalindrome(text.substr(<span class=\"number\">1</span>, text.length - <span class=\"number\">2</span>));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> checkPalindrome(<span class=\"string\">'level'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"> checkPalindrome(<span class=\"string\">'l'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"> checkPalindrome(<span class=\"literal\">null</span>); <span class=\"comment\">// error</span></span><br><span class=\"line\"> checkPalindrome(<span class=\"literal\">undefined</span>); <span class=\"comment\">// erro</span></span><br><span class=\"line\"><span class=\"comment\">// 需要注意的是这种方法，没有考虑，null和undefined的情况</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是回文？\"><a href=\"#什么是回文？\" class=\"headerlink\" title=\"什么是回文？\"></a>什么是回文？</h2><p>Palindromes称之为<strong>回文</strong>，在中文当中简单来说是指倒着念和顺着念都是相同的，前后对称那么就属于<strong>回文</strong>；例如：「<strong>上海自来水来自海上</strong>」。</p>\n<p>在英文文当中是指正着看和反着看都相同的单词，例如：「<strong>madam</strong>」。对于数字，又称为回文数，是指一个像“<strong>16461</strong>”这样的对称的数。</p>\n<p>综上所述，我们得出回文的规则：</p>\n<blockquote>\n<ul>\n<li>单个和零个字符都是回文，例如：<strong>「1」</strong>、<strong>「2」</strong>、<strong>「3」</strong>…等等</li>\n<li>如果字符串的第一个字符和最后一个字符相同，并且除了两个字符以外剩余的其他字符也是一个回文的话，字符串是一个回文，例如：<strong>「16461」</strong>、<strong>「level」</strong>、<strong>「noon」</strong>、<strong>「nonon」</strong>…等等</li>\n</ul>\n</blockquote>\n<p><strong>如何用<code>JavaScript</code>来实现回文？</strong></p>\n<p><strong>现给出测试用例：</strong></p>\n<blockquote>\n<ul>\n<li><code>checkPalindrome(&#39;race car&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;not a palindrome&#39;)</code>返回<code>false</code></li>\n<li><code>checkPalindrome(&#39;A man, a plan, a canal. Panama&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;never odd or even&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;nope&#39;)</code>返回<code>false</code></li>\n<li><code>checkPalindrome(&#39;almostomla&#39;)</code>返回<code>false</code></li>\n<li><code>checkPalindrome(&#39;My age is 0, 0 si ega ym.&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;1 eye for of 1 eye.&#39;)</code>返回<code>false</code></li>\n<li><code>checkPalindrome(&#39;0_0 (: /-\\ :) 0–0&#39;)</code>返回<code>true</code></li>\n<li><code>checkPalindrome(&#39;我爱妈妈，妈妈爱我&#39;)</code>返回<code>true</code></li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener\"><em><code>Array.prototype.reverse()</code></em></a>实现</p>\n<p><strong><code>reverse()</code>是什么？</strong></p>\n<p>在<strong>MDN</strong>中的介绍：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener\"><em><code>Array.prototype.reverse()</code></em></a> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法<strong>会改变原数组</strong>。</p>\n</blockquote>\n<p>简单来说就是可以将数组的元素位置顺序颠倒，并重新返回新的数组</p>\n<p><strong>具体实现思路：</strong></p>\n<blockquote>\n<ul>\n<li>利用正则<code>/[\\W_]/g</code>(或者<code>/[^A-Za-z0-9_]/g</code>)删除不必要的字符</li>\n<li>通过<code>toLowerCase()</code>将传入的字符串转换为小写字母</li>\n<li>利用<code>split()</code>方法将<code>string</code>对象分割成字符串数组，然后用<code>reverse()\u001d</code>方法将数组中的元素进行倒序，并返回该数组（会改变原来的数组），最后<code>join()</code>方法将这个数组的所有元素连接成一个字符串</li>\n<li>将返回的这个字符串再与原字符串进行比较是否完全相等</li>\n</ul>\n</blockquote>\n<p>解释一下这里的正则表达式规则：</p>\n<ul>\n<li><code>\\W</code>：匹配一个非单字字符</li>\n<li>等价于 <code>[^A-Za-z0-9_]</code></li>\n</ul>\n<p>那么<code>\\W</code>的意思就是：</p>\n<ul>\n<li><code>[^A-Z]</code>匹配非26个大写字母中的任意一个</li>\n<li><code>[^a-z]</code>匹配非26个小写中的任意一个</li>\n<li><code>[^0-9]</code>匹配非<strong>0</strong>到<strong>9</strong>中的任意一个数字</li>\n<li><code>[^_]</code>匹配非下划线</li>\n</ul>\n<p>主要会用到的正则表达式规则有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[^A-Za-z0–<span class=\"number\">9</span>_]/g </span><br><span class=\"line\"><span class=\"comment\">// 或 </span></span><br><span class=\"line\">/[\\W_]/g</span><br></pre></td></tr></table></figure>\n\n<p><strong>具体代码如下：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPalindrome</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> removeChar = str.replace(<span class=\"regexp\">/[\\W_]/g</span>, <span class=\"string\">''</span>).toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> checkPalindrome = removeChar.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> removeChar === checkPalindrome;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'race car'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'not a palindrome'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'A man, a plan, a canal. Panama'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'never odd or even'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'nope'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'almostomla'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'My age is 0, 0 si ega ym.'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'1 eye for of 1 eye.'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'0_0 (: /-\\ :) 0–0'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'我爱妈妈，妈妈爱我'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'16461'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'javascript'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">checkPalindrome(<span class=\"string\">'Hello world'</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPalindrome</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/[\\W_]/g</span>, <span class=\"string\">''</span>).toLowerCase() === str.replace(<span class=\"regexp\">/[\\W_]/g</span>, <span class=\"string\">''</span>).toLowerCase().split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>使用<code>for</code>循环来处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPalindrome</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (text.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (text.charAt(<span class=\"number\">0</span>) != text.charAt(text.length - <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> checkPalindrome(text.substr(<span class=\"number\">1</span>, text.length - <span class=\"number\">2</span>));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> checkPalindrome(<span class=\"string\">'level'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"> checkPalindrome(<span class=\"string\">'l'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"> checkPalindrome(<span class=\"literal\">null</span>); <span class=\"comment\">// error</span></span><br><span class=\"line\"> checkPalindrome(<span class=\"literal\">undefined</span>); <span class=\"comment\">// erro</span></span><br><span class=\"line\"><span class=\"comment\">// 需要注意的是这种方法，没有考虑，null和undefined的情况</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Var、Let和const命令","date":"2019-12-06T07:59:18.000Z","_content":"\n## `Var` 变量\n\nECMAScript 的变量是松散类型的，所谓松散类型就是**可以用来保存任何类型的数据**。每个变量仅仅是一个用于保存值的占位符而已。定义变量时要使用`var`操作符（注意`var`是一个关键字），后跟变量名;\n\n```javascript\nvar message; // undefined\n```\n未经过初始化的变量，会保存一个特殊的——值 `undefined` ，表示未经初始化\n\n\n可以在修改变量值的同时修改值的类型\n\n```javascript\nvar message = 'hi';\ntypeof message; // 'string'\nmessage = 100; // 有效但不推荐\ntypeof message; // 'number'\n```\n用`var`声明的一个变量将成为定义该变量的作用域中的局部变量，如果在函数内部中使用`var`声明一个变量，这个变量在函数退出后就会被销毁，例如：\n\n```javascript\nfunction test () {\n  var message = 'hi';\n}\ntest();\nconsole.log(message); // ReferenceError: message is not defined\n```\n这里，变量**message**是在函数中使用`var`定义的。当函数被调用时，就会创建变量并为其赋值。而在此之后，这个变量又会立即被销毁，因此就会导致错误。\n\n如果在函数内部省略`var`操作符，会创建一个全局变量：\n\n请看下面例子：\n```javascript\nfunction test() {\n  message = 'hi';\n}\ntest();\nconsole.log(message); // 'hi';\n```\n这里，省略了`var`操作符，因而**message**变成了全局变量，只要调用过一次`test()`函数，这个变量就有了定义，也就可以在函数外部的任何地方被访问到。\n\n*不推荐在局部作用域中定义全局变量，难以维护，如果有意地忽略了`var`操作符，会由于相应的变量不会马上就有定义而导致不必要的混乱。给未经声明的变量赋值在严格模式下会导致跑出`ReferenceError`错误*\n\n可以使用一条语句定义多个变量（初始化或不初始化均可）用逗号分隔开即可：\n\n例子如下：\n```javascript\nvar message = 'hi',\n      found = false,\n      age   = 29;\n```\n在严格模式(**'use strict'**)下，不能定义名为`eval`或`arguments`的变量名，否则会报语法错误。\n\n例子如下：\n\n```javascript\n'use strict'; // Strict Mode 开启严格模式\nvar eval = 10;\nvar arguments = 1;\neval; // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\narguments; // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n```\n因为在JavaScript中`eval`和`arguments`都是字面量\n\n---\n\n## `Let` 命令\n\n### 基本用法\nES6中新增了`let`命令，用于声明变量。用法类似与`var`，但是所声明的变量只在`let`**命令所在的代码块内有效**\n\n如下例子：\n```javascript\n{\n  let a = 10;\n  var b = 1;\n}\na // ReferenceError: a is not defined\nb // 1\n```\n\n上面的代码在代码块中分别用`let`和`var`声明了两个变量。然后在代码块之外调用这两个变量，结果`let`声明的变量报错，`var`声明的变量返回了正确的值。表明，`let`声明的变量只在其所在的代码块有效。\n\n`for`循环的计数器，很适合使用`let`命令\n\n```javascript\nfor (let i = 0; i < arr.lenght; i++) {}\nconsole.log(i); // ReferenceError\n```\n\n以上代码中的计数器**i**，只在`for`循环体内有效，所以`console.log(i)`会报`ReferenceError`错误\n\n改成下面的代码，如果使用`var`来声明，最后的结果将输出什么？\n\n```javascript\nfor (var i = 0; i < 10; i++) {};\nconsole.log(i); // 10\n```\n\n```javascript\nvar a = [];\nfor (var i = 0; i < 10; i ++ ) {\n  a[i] = function () {\n    console.log(i);\n  };\n};\na[6](); // 10\n```\n上面的代码中，变量**i**是`var`声明的，在全局范围内都有效。所以每一次循环，新的**i**\b值都会覆盖旧值，导致最后输出的是最后一轮的**i**值。\n\n如果使用`let`，声明的变量仅在块级作用域内有效，最后将输出6\n\n```javascript\nvar a = [];\nfor (let i = 0; i < 10; i ++ ) {\n  a[i] = function () {\n    console.log(i);\n  }\n}\na[6](); // 6\n```\n上面的代码中，变量**i**\b是`let`声明的，当前的**i**\b只在本轮循环有效。所以每一次循环的**i**其实都是一个新的变量，于是最后输出的是6。\n\n### 不存在变量提升\n\n`let`不像`var`会\n\n### 暂时性死区（TDZ / Temporal Dead Zone）\n\n**什么是暂时性死区？** \n\n> + TDZ 并不是某个地方， 或是内存中的某个区域，而是变量被声明和被初始化之间的这段时间。\n\n\n```javascript\nconsole.log(aVar); // undefined\nconsole.log(aLet); // ReferenceError: aLet is not defined\nvar aVar = 1;\nlet aLet = 2;\n```\n\n\n```javascript\nvar x = 1;\nfunction foo (x = x) {\n  console.log(x);\n}\nfoo(); // Uncaught ReferenceError: Cannot access 'x' before initialization\n```\n\n#### 深入理解 Hoisting\n","source":"_posts/2019-12-06-let和const命令.md","raw":"---\ntitle: Var、Let和const命令\ndate: 2019-12-06 15:59:18\ntags:\n- 前端开发\n- 前端面试题\n- 'var'\n- 'let'\n- 'const'\n- 变量作用域\n- JavaScript\n- JavaScript变量\n- JavaScript 基础知识\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n## `Var` 变量\n\nECMAScript 的变量是松散类型的，所谓松散类型就是**可以用来保存任何类型的数据**。每个变量仅仅是一个用于保存值的占位符而已。定义变量时要使用`var`操作符（注意`var`是一个关键字），后跟变量名;\n\n```javascript\nvar message; // undefined\n```\n未经过初始化的变量，会保存一个特殊的——值 `undefined` ，表示未经初始化\n\n\n可以在修改变量值的同时修改值的类型\n\n```javascript\nvar message = 'hi';\ntypeof message; // 'string'\nmessage = 100; // 有效但不推荐\ntypeof message; // 'number'\n```\n用`var`声明的一个变量将成为定义该变量的作用域中的局部变量，如果在函数内部中使用`var`声明一个变量，这个变量在函数退出后就会被销毁，例如：\n\n```javascript\nfunction test () {\n  var message = 'hi';\n}\ntest();\nconsole.log(message); // ReferenceError: message is not defined\n```\n这里，变量**message**是在函数中使用`var`定义的。当函数被调用时，就会创建变量并为其赋值。而在此之后，这个变量又会立即被销毁，因此就会导致错误。\n\n如果在函数内部省略`var`操作符，会创建一个全局变量：\n\n请看下面例子：\n```javascript\nfunction test() {\n  message = 'hi';\n}\ntest();\nconsole.log(message); // 'hi';\n```\n这里，省略了`var`操作符，因而**message**变成了全局变量，只要调用过一次`test()`函数，这个变量就有了定义，也就可以在函数外部的任何地方被访问到。\n\n*不推荐在局部作用域中定义全局变量，难以维护，如果有意地忽略了`var`操作符，会由于相应的变量不会马上就有定义而导致不必要的混乱。给未经声明的变量赋值在严格模式下会导致跑出`ReferenceError`错误*\n\n可以使用一条语句定义多个变量（初始化或不初始化均可）用逗号分隔开即可：\n\n例子如下：\n```javascript\nvar message = 'hi',\n      found = false,\n      age   = 29;\n```\n在严格模式(**'use strict'**)下，不能定义名为`eval`或`arguments`的变量名，否则会报语法错误。\n\n例子如下：\n\n```javascript\n'use strict'; // Strict Mode 开启严格模式\nvar eval = 10;\nvar arguments = 1;\neval; // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\narguments; // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n```\n因为在JavaScript中`eval`和`arguments`都是字面量\n\n---\n\n## `Let` 命令\n\n### 基本用法\nES6中新增了`let`命令，用于声明变量。用法类似与`var`，但是所声明的变量只在`let`**命令所在的代码块内有效**\n\n如下例子：\n```javascript\n{\n  let a = 10;\n  var b = 1;\n}\na // ReferenceError: a is not defined\nb // 1\n```\n\n上面的代码在代码块中分别用`let`和`var`声明了两个变量。然后在代码块之外调用这两个变量，结果`let`声明的变量报错，`var`声明的变量返回了正确的值。表明，`let`声明的变量只在其所在的代码块有效。\n\n`for`循环的计数器，很适合使用`let`命令\n\n```javascript\nfor (let i = 0; i < arr.lenght; i++) {}\nconsole.log(i); // ReferenceError\n```\n\n以上代码中的计数器**i**，只在`for`循环体内有效，所以`console.log(i)`会报`ReferenceError`错误\n\n改成下面的代码，如果使用`var`来声明，最后的结果将输出什么？\n\n```javascript\nfor (var i = 0; i < 10; i++) {};\nconsole.log(i); // 10\n```\n\n```javascript\nvar a = [];\nfor (var i = 0; i < 10; i ++ ) {\n  a[i] = function () {\n    console.log(i);\n  };\n};\na[6](); // 10\n```\n上面的代码中，变量**i**是`var`声明的，在全局范围内都有效。所以每一次循环，新的**i**\b值都会覆盖旧值，导致最后输出的是最后一轮的**i**值。\n\n如果使用`let`，声明的变量仅在块级作用域内有效，最后将输出6\n\n```javascript\nvar a = [];\nfor (let i = 0; i < 10; i ++ ) {\n  a[i] = function () {\n    console.log(i);\n  }\n}\na[6](); // 6\n```\n上面的代码中，变量**i**\b是`let`声明的，当前的**i**\b只在本轮循环有效。所以每一次循环的**i**其实都是一个新的变量，于是最后输出的是6。\n\n### 不存在变量提升\n\n`let`不像`var`会\n\n### 暂时性死区（TDZ / Temporal Dead Zone）\n\n**什么是暂时性死区？** \n\n> + TDZ 并不是某个地方， 或是内存中的某个区域，而是变量被声明和被初始化之间的这段时间。\n\n\n```javascript\nconsole.log(aVar); // undefined\nconsole.log(aLet); // ReferenceError: aLet is not defined\nvar aVar = 1;\nlet aLet = 2;\n```\n\n\n```javascript\nvar x = 1;\nfunction foo (x = x) {\n  console.log(x);\n}\nfoo(); // Uncaught ReferenceError: Cannot access 'x' before initialization\n```\n\n#### 深入理解 Hoisting\n","slug":"let和const命令","published":1,"updated":"2020-01-14T01:55:20.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvss0009m5snclqp7i94","content":"<h2 id=\"Var-变量\"><a href=\"#Var-变量\" class=\"headerlink\" title=\"Var 变量\"></a><code>Var</code> 变量</h2><p>ECMAScript 的变量是松散类型的，所谓松散类型就是<strong>可以用来保存任何类型的数据</strong>。每个变量仅仅是一个用于保存值的占位符而已。定义变量时要使用<code>var</code>操作符（注意<code>var</code>是一个关键字），后跟变量名;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message; <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>未经过初始化的变量，会保存一个特殊的——值 <code>undefined</code> ，表示未经初始化</p>\n<p>可以在修改变量值的同时修改值的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'hi'</span>;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> message; <span class=\"comment\">// 'string'</span></span><br><span class=\"line\">message = <span class=\"number\">100</span>; <span class=\"comment\">// 有效但不推荐</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> message; <span class=\"comment\">// 'number'</span></span><br></pre></td></tr></table></figure>\n<p>用<code>var</code>声明的一个变量将成为定义该变量的作用域中的局部变量，如果在函数内部中使用<code>var</code>声明一个变量，这个变量在函数退出后就会被销毁，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> message = <span class=\"string\">'hi'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(message); <span class=\"comment\">// ReferenceError: message is not defined</span></span><br></pre></td></tr></table></figure>\n<p>这里，变量<strong>message</strong>是在函数中使用<code>var</code>定义的。当函数被调用时，就会创建变量并为其赋值。而在此之后，这个变量又会立即被销毁，因此就会导致错误。</p>\n<p>如果在函数内部省略<code>var</code>操作符，会创建一个全局变量：</p>\n<p>请看下面例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  message = <span class=\"string\">'hi'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(message); <span class=\"comment\">// 'hi';</span></span><br></pre></td></tr></table></figure>\n<p>这里，省略了<code>var</code>操作符，因而<strong>message</strong>变成了全局变量，只要调用过一次<code>test()</code>函数，这个变量就有了定义，也就可以在函数外部的任何地方被访问到。</p>\n<p><em>不推荐在局部作用域中定义全局变量，难以维护，如果有意地忽略了<code>var</code>操作符，会由于相应的变量不会马上就有定义而导致不必要的混乱。给未经声明的变量赋值在严格模式下会导致跑出<code>ReferenceError</code>错误</em></p>\n<p>可以使用一条语句定义多个变量（初始化或不初始化均可）用逗号分隔开即可：</p>\n<p>例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'hi'</span>,</span><br><span class=\"line\">      found = <span class=\"literal\">false</span>,</span><br><span class=\"line\">      age   = <span class=\"number\">29</span>;</span><br></pre></td></tr></table></figure>\n<p>在严格模式(<strong>‘use strict’</strong>)下，不能定义名为<code>eval</code>或<code>arguments</code>的变量名，否则会报语法错误。</p>\n<p>例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>; <span class=\"comment\">// Strict Mode 开启严格模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">eval</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">arguments</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>; <span class=\"comment\">// Uncaught SyntaxError: Unexpected eval or arguments in strict mode</span></span><br><span class=\"line\"><span class=\"built_in\">arguments</span>; <span class=\"comment\">// Uncaught SyntaxError: Unexpected eval or arguments in strict mode</span></span><br></pre></td></tr></table></figure>\n<p>因为在JavaScript中<code>eval</code>和<code>arguments</code>都是字面量</p>\n<hr>\n<h2 id=\"Let-命令\"><a href=\"#Let-命令\" class=\"headerlink\" title=\"Let 命令\"></a><code>Let</code> 命令</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>ES6中新增了<code>let</code>命令，用于声明变量。用法类似与<code>var</code>，但是所声明的变量只在<code>let</code><strong>命令所在的代码块内有效</strong></p>\n<p>如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"comment\">// ReferenceError: a is not defined</span></span><br><span class=\"line\">b <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码在代码块中分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。表明，<code>let</code>声明的变量只在其所在的代码块有效。</p>\n<p><code>for</code>循环的计数器，很适合使用<code>let</code>命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.lenght; i++) &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码中的计数器<strong>i</strong>，只在<code>for</code>循环体内有效，所以<code>console.log(i)</code>会报<code>ReferenceError</code>错误</p>\n<p>改成下面的代码，如果使用<code>var</code>来声明，最后的结果将输出什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++ ) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，变量<strong>i</strong>是<code>var</code>声明的，在全局范围内都有效。所以每一次循环，新的<strong>i</strong>\b值都会覆盖旧值，导致最后输出的是最后一轮的<strong>i</strong>值。</p>\n<p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后将输出6</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++ ) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，变量<strong>i</strong>\b是<code>let</code>声明的，当前的<strong>i</strong>\b只在本轮循环有效。所以每一次循环的<strong>i</strong>其实都是一个新的变量，于是最后输出的是6。</p>\n<h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><p><code>let</code>不像<code>var</code>会</p>\n<h3 id=\"暂时性死区（TDZ-Temporal-Dead-Zone）\"><a href=\"#暂时性死区（TDZ-Temporal-Dead-Zone）\" class=\"headerlink\" title=\"暂时性死区（TDZ / Temporal Dead Zone）\"></a>暂时性死区（TDZ / Temporal Dead Zone）</h3><p><strong>什么是暂时性死区？</strong> </p>\n<blockquote>\n<ul>\n<li>TDZ 并不是某个地方， 或是内存中的某个区域，而是变量被声明和被初始化之间的这段时间。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(aVar); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aLet); <span class=\"comment\">// ReferenceError: aLet is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> aVar = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> aLet = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\">x = x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(); <span class=\"comment\">// Uncaught ReferenceError: Cannot access 'x' before initialization</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"深入理解-Hoisting\"><a href=\"#深入理解-Hoisting\" class=\"headerlink\" title=\"深入理解 Hoisting\"></a>深入理解 Hoisting</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Var-变量\"><a href=\"#Var-变量\" class=\"headerlink\" title=\"Var 变量\"></a><code>Var</code> 变量</h2><p>ECMAScript 的变量是松散类型的，所谓松散类型就是<strong>可以用来保存任何类型的数据</strong>。每个变量仅仅是一个用于保存值的占位符而已。定义变量时要使用<code>var</code>操作符（注意<code>var</code>是一个关键字），后跟变量名;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message; <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>未经过初始化的变量，会保存一个特殊的——值 <code>undefined</code> ，表示未经初始化</p>\n<p>可以在修改变量值的同时修改值的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'hi'</span>;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> message; <span class=\"comment\">// 'string'</span></span><br><span class=\"line\">message = <span class=\"number\">100</span>; <span class=\"comment\">// 有效但不推荐</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> message; <span class=\"comment\">// 'number'</span></span><br></pre></td></tr></table></figure>\n<p>用<code>var</code>声明的一个变量将成为定义该变量的作用域中的局部变量，如果在函数内部中使用<code>var</code>声明一个变量，这个变量在函数退出后就会被销毁，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> message = <span class=\"string\">'hi'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(message); <span class=\"comment\">// ReferenceError: message is not defined</span></span><br></pre></td></tr></table></figure>\n<p>这里，变量<strong>message</strong>是在函数中使用<code>var</code>定义的。当函数被调用时，就会创建变量并为其赋值。而在此之后，这个变量又会立即被销毁，因此就会导致错误。</p>\n<p>如果在函数内部省略<code>var</code>操作符，会创建一个全局变量：</p>\n<p>请看下面例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  message = <span class=\"string\">'hi'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(message); <span class=\"comment\">// 'hi';</span></span><br></pre></td></tr></table></figure>\n<p>这里，省略了<code>var</code>操作符，因而<strong>message</strong>变成了全局变量，只要调用过一次<code>test()</code>函数，这个变量就有了定义，也就可以在函数外部的任何地方被访问到。</p>\n<p><em>不推荐在局部作用域中定义全局变量，难以维护，如果有意地忽略了<code>var</code>操作符，会由于相应的变量不会马上就有定义而导致不必要的混乱。给未经声明的变量赋值在严格模式下会导致跑出<code>ReferenceError</code>错误</em></p>\n<p>可以使用一条语句定义多个变量（初始化或不初始化均可）用逗号分隔开即可：</p>\n<p>例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'hi'</span>,</span><br><span class=\"line\">      found = <span class=\"literal\">false</span>,</span><br><span class=\"line\">      age   = <span class=\"number\">29</span>;</span><br></pre></td></tr></table></figure>\n<p>在严格模式(<strong>‘use strict’</strong>)下，不能定义名为<code>eval</code>或<code>arguments</code>的变量名，否则会报语法错误。</p>\n<p>例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>; <span class=\"comment\">// Strict Mode 开启严格模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">eval</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">arguments</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>; <span class=\"comment\">// Uncaught SyntaxError: Unexpected eval or arguments in strict mode</span></span><br><span class=\"line\"><span class=\"built_in\">arguments</span>; <span class=\"comment\">// Uncaught SyntaxError: Unexpected eval or arguments in strict mode</span></span><br></pre></td></tr></table></figure>\n<p>因为在JavaScript中<code>eval</code>和<code>arguments</code>都是字面量</p>\n<hr>\n<h2 id=\"Let-命令\"><a href=\"#Let-命令\" class=\"headerlink\" title=\"Let 命令\"></a><code>Let</code> 命令</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>ES6中新增了<code>let</code>命令，用于声明变量。用法类似与<code>var</code>，但是所声明的变量只在<code>let</code><strong>命令所在的代码块内有效</strong></p>\n<p>如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a <span class=\"comment\">// ReferenceError: a is not defined</span></span><br><span class=\"line\">b <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码在代码块中分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。表明，<code>let</code>声明的变量只在其所在的代码块有效。</p>\n<p><code>for</code>循环的计数器，很适合使用<code>let</code>命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.lenght; i++) &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码中的计数器<strong>i</strong>，只在<code>for</code>循环体内有效，所以<code>console.log(i)</code>会报<code>ReferenceError</code>错误</p>\n<p>改成下面的代码，如果使用<code>var</code>来声明，最后的结果将输出什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++ ) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，变量<strong>i</strong>是<code>var</code>声明的，在全局范围内都有效。所以每一次循环，新的<strong>i</strong>\b值都会覆盖旧值，导致最后输出的是最后一轮的<strong>i</strong>值。</p>\n<p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后将输出6</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++ ) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，变量<strong>i</strong>\b是<code>let</code>声明的，当前的<strong>i</strong>\b只在本轮循环有效。所以每一次循环的<strong>i</strong>其实都是一个新的变量，于是最后输出的是6。</p>\n<h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><p><code>let</code>不像<code>var</code>会</p>\n<h3 id=\"暂时性死区（TDZ-Temporal-Dead-Zone）\"><a href=\"#暂时性死区（TDZ-Temporal-Dead-Zone）\" class=\"headerlink\" title=\"暂时性死区（TDZ / Temporal Dead Zone）\"></a>暂时性死区（TDZ / Temporal Dead Zone）</h3><p><strong>什么是暂时性死区？</strong> </p>\n<blockquote>\n<ul>\n<li>TDZ 并不是某个地方， 或是内存中的某个区域，而是变量被声明和被初始化之间的这段时间。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(aVar); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aLet); <span class=\"comment\">// ReferenceError: aLet is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> aVar = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> aLet = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\">x = x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(); <span class=\"comment\">// Uncaught ReferenceError: Cannot access 'x' before initialization</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"深入理解-Hoisting\"><a href=\"#深入理解-Hoisting\" class=\"headerlink\" title=\"深入理解 Hoisting\"></a>深入理解 Hoisting</h4>"},{"title":"Function —— 函数","date":"2019-12-16T11:54:59.000Z","_content":"","source":"_posts/2019-12-16-function.md","raw":"---\ntitle: Function —— 函数\ndate: 2019-12-16 19:54:59\ntags:\n- 前端开发\n- 前端面试题\n- 'function'\n- '函数'\n- JavaScript\n- JavaScript 函数\n- JavaScript 基础知识\ncategory:\n- [前端]\n- [JavaScript]\n---\n","slug":"function","published":1,"updated":"2020-01-14T01:55:27.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvtc000bm5sn6kfl8al5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"javascript中隐式转换","date":"2019-12-17T05:59:30.000Z","_content":"\n**请看如下代码：**\n\n```javascript\nvar x = 'The answer is ' + 42;\nconsolo.log(x); // 'The answer is 42'\n\nvar y = 42 + 'is the answer';\nconsole.log(y); // '42 is the answer'\n\nvar num = '37';\nnum = num - 0; // 37\nnum = num + 7; // 377\n\n```\n\n## 巧用+/-规则转换类型\n\n* 如果想把一个string转换为number类型，可以通过减去0，比如：\n\n```javascript\nvar str = \"43434\";\nstr = str - 0; \nconsole.log(str) // 43434\ntypeof str // 'number'\n```\n\n**如果想把一个变量转换为字符串类型，只需要把这个变量加上一个空字符，比如：**\n```javascript\nvar num = 6353355;\nnum = num + '';\nconsole.log(num); // '6353355'\ntypeof num; // 'string'\n```\n\n## `==` 非严格相等比较\n\n> 类型相同：比较两边的内容和长度必须是完全一样时才会返回true，否则为false\n> 类型不同：尝试(隐式)类型转换然后再做比较\n\n```javascript\nnumber == string // 转number 1 == ‘1.0’ true\nboolean == ? // 转number 1 == true // true\nobject == number | string // 尝试对象转为基本类型\n0 == undefined; // false\n[] == []; // false\n[] == {}; // false\nnew Object() == new Object(); // false\n[1,2] == [1,2]; // false\n\n'1.23' == 1.23; // true 会尝试把string转换为number再进行比较\nnull == undefined; // true \nO == false; // true\n0 == []; // true\n[] == ![]; // true\n[] == false; // true\n'' == []; // true\n'' == 0; // true\n'' == false; // true\nFunction == Function; // true\nFunction == function (){}; // false\nnew String('hi') == 'hi'; // true\n```\n* 如果是字符串和数字比较，会把字符串转为数字\n\n\n## `===` 严格相等比较\n\n```javascript\nArray.prototype.indexOf // 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1\nArray.prototype.lastIndexOf // 返回指定元素（有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始\ncase-matching\n```\n\n* 类型不同：先判断两边的类型，如果类型不同，直接返回false，\n\n* 类型相同：比较两边的内容和长度必须是完全一样时才会返回true，否则为false\n但是需要考虑如下情况：\n\n```javascript\nnull === null; // true\nundefined === undefined; // true\n\nnull === undefined; // false\n[] === []; // false\n[] !== []; // true\nNaN !== NaN; // true\nFunction === Function; // true\nFunction === function (){}; // false\nNaN === NaN; // false NaN不等于自身 \nnew Object() === new Object(); // false 对象是用引用去比较，而不是用值去比较\n```\n","source":"_posts/2019-12-17-javascript中隐式转换.md","raw":"---\ntitle: javascript中隐式转换\ndate: 2019-12-17 13:59:30\ntags:\n- 前端开发\n- JavaScript\n- JavaScript 隐式转换\n- JavaScript 基础知识\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n**请看如下代码：**\n\n```javascript\nvar x = 'The answer is ' + 42;\nconsolo.log(x); // 'The answer is 42'\n\nvar y = 42 + 'is the answer';\nconsole.log(y); // '42 is the answer'\n\nvar num = '37';\nnum = num - 0; // 37\nnum = num + 7; // 377\n\n```\n\n## 巧用+/-规则转换类型\n\n* 如果想把一个string转换为number类型，可以通过减去0，比如：\n\n```javascript\nvar str = \"43434\";\nstr = str - 0; \nconsole.log(str) // 43434\ntypeof str // 'number'\n```\n\n**如果想把一个变量转换为字符串类型，只需要把这个变量加上一个空字符，比如：**\n```javascript\nvar num = 6353355;\nnum = num + '';\nconsole.log(num); // '6353355'\ntypeof num; // 'string'\n```\n\n## `==` 非严格相等比较\n\n> 类型相同：比较两边的内容和长度必须是完全一样时才会返回true，否则为false\n> 类型不同：尝试(隐式)类型转换然后再做比较\n\n```javascript\nnumber == string // 转number 1 == ‘1.0’ true\nboolean == ? // 转number 1 == true // true\nobject == number | string // 尝试对象转为基本类型\n0 == undefined; // false\n[] == []; // false\n[] == {}; // false\nnew Object() == new Object(); // false\n[1,2] == [1,2]; // false\n\n'1.23' == 1.23; // true 会尝试把string转换为number再进行比较\nnull == undefined; // true \nO == false; // true\n0 == []; // true\n[] == ![]; // true\n[] == false; // true\n'' == []; // true\n'' == 0; // true\n'' == false; // true\nFunction == Function; // true\nFunction == function (){}; // false\nnew String('hi') == 'hi'; // true\n```\n* 如果是字符串和数字比较，会把字符串转为数字\n\n\n## `===` 严格相等比较\n\n```javascript\nArray.prototype.indexOf // 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1\nArray.prototype.lastIndexOf // 返回指定元素（有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始\ncase-matching\n```\n\n* 类型不同：先判断两边的类型，如果类型不同，直接返回false，\n\n* 类型相同：比较两边的内容和长度必须是完全一样时才会返回true，否则为false\n但是需要考虑如下情况：\n\n```javascript\nnull === null; // true\nundefined === undefined; // true\n\nnull === undefined; // false\n[] === []; // false\n[] !== []; // true\nNaN !== NaN; // true\nFunction === Function; // true\nFunction === function (){}; // false\nNaN === NaN; // false NaN不等于自身 \nnew Object() === new Object(); // false 对象是用引用去比较，而不是用值去比较\n```\n","slug":"javascript中隐式转换","published":1,"updated":"2019-12-17T06:19:05.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvtn000fm5sner013smn","content":"<p><strong>请看如下代码：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">'The answer is '</span> + <span class=\"number\">42</span>;</span><br><span class=\"line\">consolo.log(x); <span class=\"comment\">// 'The answer is 42'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">42</span> + <span class=\"string\">'is the answer'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y); <span class=\"comment\">// '42 is the answer'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"string\">'37'</span>;</span><br><span class=\"line\">num = num - <span class=\"number\">0</span>; <span class=\"comment\">// 37</span></span><br><span class=\"line\">num = num + <span class=\"number\">7</span>; <span class=\"comment\">// 377</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"巧用-规则转换类型\"><a href=\"#巧用-规则转换类型\" class=\"headerlink\" title=\"巧用+/-规则转换类型\"></a>巧用+/-规则转换类型</h2><ul>\n<li>如果想把一个string转换为number类型，可以通过减去0，比如：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"43434\"</span>;</span><br><span class=\"line\">str = str - <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// 43434</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> str <span class=\"comment\">// 'number'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果想把一个变量转换为字符串类型，只需要把这个变量加上一个空字符，比如：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">6353355</span>;</span><br><span class=\"line\">num = num + <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num); <span class=\"comment\">// '6353355'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> num; <span class=\"comment\">// 'string'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"非严格相等比较\"><a href=\"#非严格相等比较\" class=\"headerlink\" title=\"== 非严格相等比较\"></a><code>==</code> 非严格相等比较</h2><blockquote>\n<p>类型相同：比较两边的内容和长度必须是完全一样时才会返回true，否则为false<br>类型不同：尝试(隐式)类型转换然后再做比较</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number == string <span class=\"comment\">// 转number 1 == ‘1.0’ true</span></span><br><span class=\"line\">boolean == ? <span class=\"comment\">// 转number 1 == true // true</span></span><br><span class=\"line\">object == number | string <span class=\"comment\">// 尝试对象转为基本类型</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">undefined</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] == []; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] == &#123;&#125;; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>() == <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>] == [<span class=\"number\">1</span>,<span class=\"number\">2</span>]; <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'1.23'</span> == <span class=\"number\">1.23</span>; <span class=\"comment\">// true 会尝试把string转换为number再进行比较</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>; <span class=\"comment\">// true </span></span><br><span class=\"line\">O == <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == []; <span class=\"comment\">// true</span></span><br><span class=\"line\">[] == ![]; <span class=\"comment\">// true</span></span><br><span class=\"line\">[] == <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">''</span> == []; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">''</span> == <span class=\"number\">0</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">''</span> == <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> == <span class=\"built_in\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> == <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hi'</span>) == <span class=\"string\">'hi'</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果是字符串和数字比较，会把字符串转为数字</li>\n</ul>\n<h2 id=\"严格相等比较\"><a href=\"#严格相等比较\" class=\"headerlink\" title=\"=== 严格相等比较\"></a><code>===</code> 严格相等比较</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.indexOf <span class=\"comment\">// 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.lastIndexOf <span class=\"comment\">// 返回指定元素（有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始</span></span><br><span class=\"line\"><span class=\"keyword\">case</span>-matching</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>类型不同：先判断两边的类型，如果类型不同，直接返回false，</p>\n</li>\n<li><p>类型相同：比较两边的内容和长度必须是完全一样时才会返回true，否则为false<br>但是需要考虑如下情况：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">null</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> === <span class=\"literal\">undefined</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] === []; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] !== []; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> !== <span class=\"literal\">NaN</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> === <span class=\"built_in\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> === <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>; <span class=\"comment\">// false NaN不等于自身 </span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>() === <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// false 对象是用引用去比较，而不是用值去比较</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>请看如下代码：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">'The answer is '</span> + <span class=\"number\">42</span>;</span><br><span class=\"line\">consolo.log(x); <span class=\"comment\">// 'The answer is 42'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">42</span> + <span class=\"string\">'is the answer'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y); <span class=\"comment\">// '42 is the answer'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"string\">'37'</span>;</span><br><span class=\"line\">num = num - <span class=\"number\">0</span>; <span class=\"comment\">// 37</span></span><br><span class=\"line\">num = num + <span class=\"number\">7</span>; <span class=\"comment\">// 377</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"巧用-规则转换类型\"><a href=\"#巧用-规则转换类型\" class=\"headerlink\" title=\"巧用+/-规则转换类型\"></a>巧用+/-规则转换类型</h2><ul>\n<li>如果想把一个string转换为number类型，可以通过减去0，比如：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"43434\"</span>;</span><br><span class=\"line\">str = str - <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// 43434</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> str <span class=\"comment\">// 'number'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果想把一个变量转换为字符串类型，只需要把这个变量加上一个空字符，比如：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">6353355</span>;</span><br><span class=\"line\">num = num + <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num); <span class=\"comment\">// '6353355'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> num; <span class=\"comment\">// 'string'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"非严格相等比较\"><a href=\"#非严格相等比较\" class=\"headerlink\" title=\"== 非严格相等比较\"></a><code>==</code> 非严格相等比较</h2><blockquote>\n<p>类型相同：比较两边的内容和长度必须是完全一样时才会返回true，否则为false<br>类型不同：尝试(隐式)类型转换然后再做比较</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number == string <span class=\"comment\">// 转number 1 == ‘1.0’ true</span></span><br><span class=\"line\">boolean == ? <span class=\"comment\">// 转number 1 == true // true</span></span><br><span class=\"line\">object == number | string <span class=\"comment\">// 尝试对象转为基本类型</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">undefined</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] == []; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] == &#123;&#125;; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>() == <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>] == [<span class=\"number\">1</span>,<span class=\"number\">2</span>]; <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'1.23'</span> == <span class=\"number\">1.23</span>; <span class=\"comment\">// true 会尝试把string转换为number再进行比较</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>; <span class=\"comment\">// true </span></span><br><span class=\"line\">O == <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == []; <span class=\"comment\">// true</span></span><br><span class=\"line\">[] == ![]; <span class=\"comment\">// true</span></span><br><span class=\"line\">[] == <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">''</span> == []; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">''</span> == <span class=\"number\">0</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">''</span> == <span class=\"literal\">false</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> == <span class=\"built_in\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> == <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hi'</span>) == <span class=\"string\">'hi'</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果是字符串和数字比较，会把字符串转为数字</li>\n</ul>\n<h2 id=\"严格相等比较\"><a href=\"#严格相等比较\" class=\"headerlink\" title=\"=== 严格相等比较\"></a><code>===</code> 严格相等比较</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.indexOf <span class=\"comment\">// 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.lastIndexOf <span class=\"comment\">// 返回指定元素（有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始</span></span><br><span class=\"line\"><span class=\"keyword\">case</span>-matching</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>类型不同：先判断两边的类型，如果类型不同，直接返回false，</p>\n</li>\n<li><p>类型相同：比较两边的内容和长度必须是完全一样时才会返回true，否则为false<br>但是需要考虑如下情况：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">null</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> === <span class=\"literal\">undefined</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] === []; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] !== []; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> !== <span class=\"literal\">NaN</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> === <span class=\"built_in\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> === <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>; <span class=\"comment\">// false NaN不等于自身 </span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>() === <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// false 对象是用引用去比较，而不是用值去比较</span></span><br></pre></td></tr></table></figure>\n"},{"title":"javascript检测数据类型","date":"2019-12-17T05:59:30.000Z","_content":"","source":"_posts/2019-12-17-javascript检测数据类型.md","raw":"---\ntitle: javascript检测数据类型\ndate: 2019-12-17 13:59:30\ntags:\n- 前端开发\n- JavaScript\n- JavaScript 检测数据类型\n- JavaScript 基础知识\ncategory:\n- [前端]\n- [JavaScript]\n---\n","slug":"javascript检测数据类型","published":1,"updated":"2019-12-17T06:00:56.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvtr000gm5sn5bfheqcu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"JavaScript阶乘 (Factoral) 函数实现","date":"2019-12-17T09:49:03.529Z","_content":"\n## 什么是阶乘(Factoral)\n> **一个正整数的阶乘是所有小于及等于该数的正整数的积，并且有0的阶乘为1。自然数n的阶乘写作n!**\n\n阶乘函数是**递归(Recursion)**典型示例，在JavaScript中可能运用到**递归(Recursion)**函数\n\n## 什么是**递归(Recursion)**\n> 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。[*(来自wikipedia)*](https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92)\n\n在函数的定义中使用函数自身的方法。简单理解就是：自我复制的过程。\n\n## 如何实现阶乘(Factoral)函数\n\n数学上的**阶乘(Factoral)**函数定义，阶乘函数的参数是一个自然数，它返回`1`与此数之间所有数的乘积。比如，`6`的阶乘是`1 x 2 x 3 x 4 x 5 x 6 = 720`，这样的方式可以用一种递归函数来表示，如果`n`是 `6`，模式为：\n\n```javascript\n0! = 1 // 1\n1! = 1 // 1\n2! = 2 * 1 // 2\n3! = 3 * 2 * 1 // 6\n4! = 4 * 3 * 2 * 1 // 24\n5! = 5 * 4 * 3 * 2 * 1 // 120\n6! = 6 * 5 * 4 * 3 * 2 * 1 // 720\n7! = 7 * 6 * 5 * 4 * 3 * 2 * 1 // 5040\n...\n```\n\n因此，阶乘可以简单的定义为：\n> + `0`的阶乘是1\n> + 任何数的阶乘都是此数与比此数小一的数的阶乘\n\n定义一个`factoral()`函数来表示：\n```javascript\nfactoral(0) = 1;\nfactoral(n) = n * factoral (n - 1);\n```\n第一行`0`的阶乘为`1`，第二行表示任意别的数`n`的阶乘等于`n`乘以`n-1`的阶乘。\n*注意那个把`n-1`括起来的括弧：没有这个括弧代码就会被解析称为`(factorial n) - 1;`函数行为的优先级是很高的，会最先执行。*\n\n## 阶乘(Factorial)实现算法\n\n阶乘函数在JavaScript中也是一种典型的算法：\n\n> + `factoral()`函数返回的是一个整数的阶乘\n> + 如何整数用字母`n`表示，所有正整数的阶乘是小于或等于`n`\n> + 阶乘通常用的表示符号是`n!`\n\n## 阶乘(Factoral)测试用例\n\n+ `factoral(0)返回1`\n+ `factoral(1)返回1`\n+ `factoral(5)返回120`\n+ `factoral(10)返回3628800`\n+ `factoral(20)返回2432902008176640000`\n\n## \b几种实现阶乘(Factoral)的方法\b\n> + [*\b\b\b\b\b递归(Recursion)法*](#递归(Recursion)法)\n> + [*\bES6数组迭代法\b\b\b\b\b\b\b*](#ES6数组迭代法)\b\n\n\n### 递归(Recursion)法\n\n```javascript\n/**\n  * @param: {n}\n  *\n*/\nfunction factoral (n) {\n  if (n < 0) {\n    // 如果n是一个小于0的整数，返回false\n    return false;\n  } else if (n === 0 || n === 1) {\n    // 如果n是一个0或者1，返回阶乘结果为1\n    return 1;\n  } else {\n    // 调用递归\n    return n * factoral (n - 1);\n  }\n}\n\nfactoral (0); // 1\nfactoral (1); // 1\nfactoral (5); // 120\nfactoral (6); // 720\nfactoral (10); // 3628800\nfactoral (20); // 2432902008176640000\n```\n\n使用函数**arguments.callee**属性解耦\n\n```javascript\nfunction factoral (n) {\n  return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n}\n\nfactoral (0); // 1\nfactoral (1); // 1\nfactoral (5); // 120\nfactoral (6); // 720\nfactoral (10); // 3628800\nfactoral (20); // 2432902008176640000\n```\n\n### `while loop`(while 循环)法\n\n```javascript\nfunction factoral (num) {\n  var\n}\n```\n\n\n### `for loop`(for 循环)法\n\n\n\n### ES6数组迭代法\n\n```javascript\nfunction factoral (num) {\n  return num < 0 ? 1 : ( // 如果num小于0则返回1，否则执行后面的语句\n    new Array(num) // 实例了一个length为num长度的数组对象\n      .fill(undefined) // 初始化填充数组的每一项为undefined\n      .reduce((product, val, index) => product * (index + 1), 1) // reduce对num的每一项进行累加迭代计算，最终返回计算出的结果\n  );\n}\nfactoral(5); // 调用函数，最终结果为120\n```\n\n## 参考链接\n\n+ [*维基百科: 阶乘(Factoral)*](https://zh.wikipedia.org/wiki/%E9%9A%8E%E4%B9%98)\n+ [*维基百科: 递归(Recursion)*](https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92)\n+ [*w3cplus: JavaScript算法练习：阶乘(Factorial)*](https://www.w3cplus.com/javascript/factorial-function-in-javascript.html?expire=1576575926&code=6UzePxl_rKQ&sign=0337255c0a21b8e38123efa0cb40c62c#paywall)\n+ [*FreeCodeCamp Challenge Guide: Factorialize a Number*](https://www.freecodecamp.org/forum/t/freecodecamp-challenge-guide-factorialize-a-number/16013)\n+ [*MDN:JavaScript Functions arguments.callee*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee)\n+ [*MDN:Array.prototype.fill()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n+ [*MDN:Array.prototype.reduce()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)","source":"_posts/2019-12-17-javascript阶乘（Factoral）函数实现.md","raw":"---\ntitle: JavaScript阶乘 (Factoral) 函数实现\ndate: 2019-12-17 17:49:03\n  - 前端开发\n  - 前端算法\n  - 前端面试题\n  - 前端算法面试题\n  - JavaScript 算法\n  - JavaScript 阶乘实现\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n## 什么是阶乘(Factoral)\n> **一个正整数的阶乘是所有小于及等于该数的正整数的积，并且有0的阶乘为1。自然数n的阶乘写作n!**\n\n阶乘函数是**递归(Recursion)**典型示例，在JavaScript中可能运用到**递归(Recursion)**函数\n\n## 什么是**递归(Recursion)**\n> 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。[*(来自wikipedia)*](https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92)\n\n在函数的定义中使用函数自身的方法。简单理解就是：自我复制的过程。\n\n## 如何实现阶乘(Factoral)函数\n\n数学上的**阶乘(Factoral)**函数定义，阶乘函数的参数是一个自然数，它返回`1`与此数之间所有数的乘积。比如，`6`的阶乘是`1 x 2 x 3 x 4 x 5 x 6 = 720`，这样的方式可以用一种递归函数来表示，如果`n`是 `6`，模式为：\n\n```javascript\n0! = 1 // 1\n1! = 1 // 1\n2! = 2 * 1 // 2\n3! = 3 * 2 * 1 // 6\n4! = 4 * 3 * 2 * 1 // 24\n5! = 5 * 4 * 3 * 2 * 1 // 120\n6! = 6 * 5 * 4 * 3 * 2 * 1 // 720\n7! = 7 * 6 * 5 * 4 * 3 * 2 * 1 // 5040\n...\n```\n\n因此，阶乘可以简单的定义为：\n> + `0`的阶乘是1\n> + 任何数的阶乘都是此数与比此数小一的数的阶乘\n\n定义一个`factoral()`函数来表示：\n```javascript\nfactoral(0) = 1;\nfactoral(n) = n * factoral (n - 1);\n```\n第一行`0`的阶乘为`1`，第二行表示任意别的数`n`的阶乘等于`n`乘以`n-1`的阶乘。\n*注意那个把`n-1`括起来的括弧：没有这个括弧代码就会被解析称为`(factorial n) - 1;`函数行为的优先级是很高的，会最先执行。*\n\n## 阶乘(Factorial)实现算法\n\n阶乘函数在JavaScript中也是一种典型的算法：\n\n> + `factoral()`函数返回的是一个整数的阶乘\n> + 如何整数用字母`n`表示，所有正整数的阶乘是小于或等于`n`\n> + 阶乘通常用的表示符号是`n!`\n\n## 阶乘(Factoral)测试用例\n\n+ `factoral(0)返回1`\n+ `factoral(1)返回1`\n+ `factoral(5)返回120`\n+ `factoral(10)返回3628800`\n+ `factoral(20)返回2432902008176640000`\n\n## \b几种实现阶乘(Factoral)的方法\b\n> + [*\b\b\b\b\b递归(Recursion)法*](#递归(Recursion)法)\n> + [*\bES6数组迭代法\b\b\b\b\b\b\b*](#ES6数组迭代法)\b\n\n\n### 递归(Recursion)法\n\n```javascript\n/**\n  * @param: {n}\n  *\n*/\nfunction factoral (n) {\n  if (n < 0) {\n    // 如果n是一个小于0的整数，返回false\n    return false;\n  } else if (n === 0 || n === 1) {\n    // 如果n是一个0或者1，返回阶乘结果为1\n    return 1;\n  } else {\n    // 调用递归\n    return n * factoral (n - 1);\n  }\n}\n\nfactoral (0); // 1\nfactoral (1); // 1\nfactoral (5); // 120\nfactoral (6); // 720\nfactoral (10); // 3628800\nfactoral (20); // 2432902008176640000\n```\n\n使用函数**arguments.callee**属性解耦\n\n```javascript\nfunction factoral (n) {\n  return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n}\n\nfactoral (0); // 1\nfactoral (1); // 1\nfactoral (5); // 120\nfactoral (6); // 720\nfactoral (10); // 3628800\nfactoral (20); // 2432902008176640000\n```\n\n### `while loop`(while 循环)法\n\n```javascript\nfunction factoral (num) {\n  var\n}\n```\n\n\n### `for loop`(for 循环)法\n\n\n\n### ES6数组迭代法\n\n```javascript\nfunction factoral (num) {\n  return num < 0 ? 1 : ( // 如果num小于0则返回1，否则执行后面的语句\n    new Array(num) // 实例了一个length为num长度的数组对象\n      .fill(undefined) // 初始化填充数组的每一项为undefined\n      .reduce((product, val, index) => product * (index + 1), 1) // reduce对num的每一项进行累加迭代计算，最终返回计算出的结果\n  );\n}\nfactoral(5); // 调用函数，最终结果为120\n```\n\n## 参考链接\n\n+ [*维基百科: 阶乘(Factoral)*](https://zh.wikipedia.org/wiki/%E9%9A%8E%E4%B9%98)\n+ [*维基百科: 递归(Recursion)*](https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92)\n+ [*w3cplus: JavaScript算法练习：阶乘(Factorial)*](https://www.w3cplus.com/javascript/factorial-function-in-javascript.html?expire=1576575926&code=6UzePxl_rKQ&sign=0337255c0a21b8e38123efa0cb40c62c#paywall)\n+ [*FreeCodeCamp Challenge Guide: Factorialize a Number*](https://www.freecodecamp.org/forum/t/freecodecamp-challenge-guide-factorialize-a-number/16013)\n+ [*MDN:JavaScript Functions arguments.callee*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee)\n+ [*MDN:Array.prototype.fill()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n+ [*MDN:Array.prototype.reduce()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)","slug":"javascript阶乘（Factoral）函数实现","published":1,"updated":"2019-12-17T23:49:07.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvtz000jm5sn14pnfv63","content":"<h2 id=\"什么是阶乘-Factoral\"><a href=\"#什么是阶乘-Factoral\" class=\"headerlink\" title=\"什么是阶乘(Factoral)\"></a>什么是阶乘(Factoral)</h2><blockquote>\n<p><strong>一个正整数的阶乘是所有小于及等于该数的正整数的积，并且有0的阶乘为1。自然数n的阶乘写作n!</strong></p>\n</blockquote>\n<p>阶乘函数是<strong>递归(Recursion)</strong>典型示例，在JavaScript中可能运用到<strong>递归(Recursion)</strong>函数</p>\n<h2 id=\"什么是递归-Recursion\"><a href=\"#什么是递归-Recursion\" class=\"headerlink\" title=\"什么是递归(Recursion)\"></a>什么是<strong>递归(Recursion)</strong></h2><blockquote>\n<p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。<a href=\"https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92\" target=\"_blank\" rel=\"noopener\"><em>(来自wikipedia)</em></a></p>\n</blockquote>\n<p>在函数的定义中使用函数自身的方法。简单理解就是：自我复制的过程。</p>\n<h2 id=\"如何实现阶乘-Factoral-函数\"><a href=\"#如何实现阶乘-Factoral-函数\" class=\"headerlink\" title=\"如何实现阶乘(Factoral)函数\"></a>如何实现阶乘(Factoral)函数</h2><p>数学上的<strong>阶乘(Factoral)</strong>函数定义，阶乘函数的参数是一个自然数，它返回<code>1</code>与此数之间所有数的乘积。比如，<code>6</code>的阶乘是<code>1 x 2 x 3 x 4 x 5 x 6 = 720</code>，这样的方式可以用一种递归函数来表示，如果<code>n</code>是 <code>6</code>，模式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>! = <span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">1</span>! = <span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">2</span>! = <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">3</span>! = <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"number\">4</span>! = <span class=\"number\">4</span> * <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 24</span></span><br><span class=\"line\"><span class=\"number\">5</span>! = <span class=\"number\">5</span> * <span class=\"number\">4</span> * <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 120</span></span><br><span class=\"line\"><span class=\"number\">6</span>! = <span class=\"number\">6</span> * <span class=\"number\">5</span> * <span class=\"number\">4</span> * <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 720</span></span><br><span class=\"line\"><span class=\"number\">7</span>! = <span class=\"number\">7</span> * <span class=\"number\">6</span> * <span class=\"number\">5</span> * <span class=\"number\">4</span> * <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 5040</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>因此，阶乘可以简单的定义为：</p>\n<blockquote>\n<ul>\n<li><code>0</code>的阶乘是1</li>\n<li>任何数的阶乘都是此数与比此数小一的数的阶乘</li>\n</ul>\n</blockquote>\n<p>定义一个<code>factoral()</code>函数来表示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">factoral(<span class=\"number\">0</span>) = <span class=\"number\">1</span>;</span><br><span class=\"line\">factoral(n) = n * factoral (n - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>第一行<code>0</code>的阶乘为<code>1</code>，第二行表示任意别的数<code>n</code>的阶乘等于<code>n</code>乘以<code>n-1</code>的阶乘。<br><em>注意那个把<code>n-1</code>括起来的括弧：没有这个括弧代码就会被解析称为<code>(factorial n) - 1;</code>函数行为的优先级是很高的，会最先执行。</em></p>\n<h2 id=\"阶乘-Factorial-实现算法\"><a href=\"#阶乘-Factorial-实现算法\" class=\"headerlink\" title=\"阶乘(Factorial)实现算法\"></a>阶乘(Factorial)实现算法</h2><p>阶乘函数在JavaScript中也是一种典型的算法：</p>\n<blockquote>\n<ul>\n<li><code>factoral()</code>函数返回的是一个整数的阶乘</li>\n<li>如何整数用字母<code>n</code>表示，所有正整数的阶乘是小于或等于<code>n</code></li>\n<li>阶乘通常用的表示符号是<code>n!</code></li>\n</ul>\n</blockquote>\n<h2 id=\"阶乘-Factoral-测试用例\"><a href=\"#阶乘-Factoral-测试用例\" class=\"headerlink\" title=\"阶乘(Factoral)测试用例\"></a>阶乘(Factoral)测试用例</h2><ul>\n<li><code>factoral(0)返回1</code></li>\n<li><code>factoral(1)返回1</code></li>\n<li><code>factoral(5)返回120</code></li>\n<li><code>factoral(10)返回3628800</code></li>\n<li><code>factoral(20)返回2432902008176640000</code></li>\n</ul>\n<h2 id=\"几种实现阶乘-Factoral-的方法\"><a href=\"#几种实现阶乘-Factoral-的方法\" class=\"headerlink\" title=\"\b几种实现阶乘(Factoral)的方法\b\"></a>\b几种实现阶乘(Factoral)的方法\b</h2><blockquote>\n<ul>\n<li><a href=\"#递归(Recursion)法\"><em>\b\b\b\b\b递归(Recursion)法</em></a></li>\n<li><a href=\"#ES6数组迭代法\"><em>\bES6数组迭代法\b\b\b\b\b\b\b</em></a>\b</li>\n</ul>\n</blockquote>\n<h3 id=\"递归-Recursion-法\"><a href=\"#递归-Recursion-法\" class=\"headerlink\" title=\"递归(Recursion)法\"></a>递归(Recursion)法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @param: &#123;n&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoral</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果n是一个小于0的整数，返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果n是一个0或者1，返回阶乘结果为1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用递归</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factoral (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factoral (<span class=\"number\">0</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">factoral (<span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">factoral (<span class=\"number\">5</span>); <span class=\"comment\">// 120</span></span><br><span class=\"line\">factoral (<span class=\"number\">6</span>); <span class=\"comment\">// 720</span></span><br><span class=\"line\">factoral (<span class=\"number\">10</span>); <span class=\"comment\">// 3628800</span></span><br><span class=\"line\">factoral (<span class=\"number\">20</span>); <span class=\"comment\">// 2432902008176640000</span></span><br></pre></td></tr></table></figure>\n\n<p>使用函数<strong>arguments.callee</strong>属性解耦</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoral</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>) * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factoral (<span class=\"number\">0</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">factoral (<span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">factoral (<span class=\"number\">5</span>); <span class=\"comment\">// 120</span></span><br><span class=\"line\">factoral (<span class=\"number\">6</span>); <span class=\"comment\">// 720</span></span><br><span class=\"line\">factoral (<span class=\"number\">10</span>); <span class=\"comment\">// 3628800</span></span><br><span class=\"line\">factoral (<span class=\"number\">20</span>); <span class=\"comment\">// 2432902008176640000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while-loop-while-循环-法\"><a href=\"#while-loop-while-循环-法\" class=\"headerlink\" title=\"while loop(while 循环)法\"></a><code>while loop</code>(while 循环)法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoral</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"for-loop-for-循环-法\"><a href=\"#for-loop-for-循环-法\" class=\"headerlink\" title=\"for loop(for 循环)法\"></a><code>for loop</code>(for 循环)法</h3><h3 id=\"ES6数组迭代法\"><a href=\"#ES6数组迭代法\" class=\"headerlink\" title=\"ES6数组迭代法\"></a>ES6数组迭代法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoral</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num &lt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : ( <span class=\"comment\">// 如果num小于0则返回1，否则执行后面的语句</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(num) <span class=\"comment\">// 实例了一个length为num长度的数组对象</span></span><br><span class=\"line\">      .fill(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 初始化填充数组的每一项为undefined</span></span><br><span class=\"line\">      .reduce(<span class=\"function\">(<span class=\"params\">product, val, index</span>) =&gt;</span> product * (index + <span class=\"number\">1</span>), <span class=\"number\">1</span>) <span class=\"comment\">// reduce对num的每一项进行累加迭代计算，最终返回计算出的结果</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factoral(<span class=\"number\">5</span>); <span class=\"comment\">// 调用函数，最终结果为120</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%9A%8E%E4%B9%98\" target=\"_blank\" rel=\"noopener\"><em>维基百科: 阶乘(Factoral)</em></a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92\" target=\"_blank\" rel=\"noopener\"><em>维基百科: 递归(Recursion)</em></a></li>\n<li><a href=\"https://www.w3cplus.com/javascript/factorial-function-in-javascript.html?expire=1576575926&code=6UzePxl_rKQ&sign=0337255c0a21b8e38123efa0cb40c62c#paywall\" target=\"_blank\" rel=\"noopener\"><em>w3cplus: JavaScript算法练习：阶乘(Factorial)</em></a></li>\n<li><a href=\"https://www.freecodecamp.org/forum/t/freecodecamp-challenge-guide-factorialize-a-number/16013\" target=\"_blank\" rel=\"noopener\"><em>FreeCodeCamp Challenge Guide: Factorialize a Number</em></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee\" target=\"_blank\" rel=\"noopener\"><em>MDN:JavaScript Functions arguments.callee</em></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\" target=\"_blank\" rel=\"noopener\"><em>MDN:Array.prototype.fill()</em></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"noopener\"><em>MDN:Array.prototype.reduce()</em></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是阶乘-Factoral\"><a href=\"#什么是阶乘-Factoral\" class=\"headerlink\" title=\"什么是阶乘(Factoral)\"></a>什么是阶乘(Factoral)</h2><blockquote>\n<p><strong>一个正整数的阶乘是所有小于及等于该数的正整数的积，并且有0的阶乘为1。自然数n的阶乘写作n!</strong></p>\n</blockquote>\n<p>阶乘函数是<strong>递归(Recursion)</strong>典型示例，在JavaScript中可能运用到<strong>递归(Recursion)</strong>函数</p>\n<h2 id=\"什么是递归-Recursion\"><a href=\"#什么是递归-Recursion\" class=\"headerlink\" title=\"什么是递归(Recursion)\"></a>什么是<strong>递归(Recursion)</strong></h2><blockquote>\n<p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。<a href=\"https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92\" target=\"_blank\" rel=\"noopener\"><em>(来自wikipedia)</em></a></p>\n</blockquote>\n<p>在函数的定义中使用函数自身的方法。简单理解就是：自我复制的过程。</p>\n<h2 id=\"如何实现阶乘-Factoral-函数\"><a href=\"#如何实现阶乘-Factoral-函数\" class=\"headerlink\" title=\"如何实现阶乘(Factoral)函数\"></a>如何实现阶乘(Factoral)函数</h2><p>数学上的<strong>阶乘(Factoral)</strong>函数定义，阶乘函数的参数是一个自然数，它返回<code>1</code>与此数之间所有数的乘积。比如，<code>6</code>的阶乘是<code>1 x 2 x 3 x 4 x 5 x 6 = 720</code>，这样的方式可以用一种递归函数来表示，如果<code>n</code>是 <code>6</code>，模式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>! = <span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">1</span>! = <span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">2</span>! = <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"number\">3</span>! = <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"number\">4</span>! = <span class=\"number\">4</span> * <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 24</span></span><br><span class=\"line\"><span class=\"number\">5</span>! = <span class=\"number\">5</span> * <span class=\"number\">4</span> * <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 120</span></span><br><span class=\"line\"><span class=\"number\">6</span>! = <span class=\"number\">6</span> * <span class=\"number\">5</span> * <span class=\"number\">4</span> * <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 720</span></span><br><span class=\"line\"><span class=\"number\">7</span>! = <span class=\"number\">7</span> * <span class=\"number\">6</span> * <span class=\"number\">5</span> * <span class=\"number\">4</span> * <span class=\"number\">3</span> * <span class=\"number\">2</span> * <span class=\"number\">1</span> <span class=\"comment\">// 5040</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>因此，阶乘可以简单的定义为：</p>\n<blockquote>\n<ul>\n<li><code>0</code>的阶乘是1</li>\n<li>任何数的阶乘都是此数与比此数小一的数的阶乘</li>\n</ul>\n</blockquote>\n<p>定义一个<code>factoral()</code>函数来表示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">factoral(<span class=\"number\">0</span>) = <span class=\"number\">1</span>;</span><br><span class=\"line\">factoral(n) = n * factoral (n - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>第一行<code>0</code>的阶乘为<code>1</code>，第二行表示任意别的数<code>n</code>的阶乘等于<code>n</code>乘以<code>n-1</code>的阶乘。<br><em>注意那个把<code>n-1</code>括起来的括弧：没有这个括弧代码就会被解析称为<code>(factorial n) - 1;</code>函数行为的优先级是很高的，会最先执行。</em></p>\n<h2 id=\"阶乘-Factorial-实现算法\"><a href=\"#阶乘-Factorial-实现算法\" class=\"headerlink\" title=\"阶乘(Factorial)实现算法\"></a>阶乘(Factorial)实现算法</h2><p>阶乘函数在JavaScript中也是一种典型的算法：</p>\n<blockquote>\n<ul>\n<li><code>factoral()</code>函数返回的是一个整数的阶乘</li>\n<li>如何整数用字母<code>n</code>表示，所有正整数的阶乘是小于或等于<code>n</code></li>\n<li>阶乘通常用的表示符号是<code>n!</code></li>\n</ul>\n</blockquote>\n<h2 id=\"阶乘-Factoral-测试用例\"><a href=\"#阶乘-Factoral-测试用例\" class=\"headerlink\" title=\"阶乘(Factoral)测试用例\"></a>阶乘(Factoral)测试用例</h2><ul>\n<li><code>factoral(0)返回1</code></li>\n<li><code>factoral(1)返回1</code></li>\n<li><code>factoral(5)返回120</code></li>\n<li><code>factoral(10)返回3628800</code></li>\n<li><code>factoral(20)返回2432902008176640000</code></li>\n</ul>\n<h2 id=\"几种实现阶乘-Factoral-的方法\"><a href=\"#几种实现阶乘-Factoral-的方法\" class=\"headerlink\" title=\"\b几种实现阶乘(Factoral)的方法\b\"></a>\b几种实现阶乘(Factoral)的方法\b</h2><blockquote>\n<ul>\n<li><a href=\"#递归(Recursion)法\"><em>\b\b\b\b\b递归(Recursion)法</em></a></li>\n<li><a href=\"#ES6数组迭代法\"><em>\bES6数组迭代法\b\b\b\b\b\b\b</em></a>\b</li>\n</ul>\n</blockquote>\n<h3 id=\"递归-Recursion-法\"><a href=\"#递归-Recursion-法\" class=\"headerlink\" title=\"递归(Recursion)法\"></a>递归(Recursion)法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @param: &#123;n&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoral</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果n是一个小于0的整数，返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果n是一个0或者1，返回阶乘结果为1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用递归</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * factoral (n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factoral (<span class=\"number\">0</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">factoral (<span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">factoral (<span class=\"number\">5</span>); <span class=\"comment\">// 120</span></span><br><span class=\"line\">factoral (<span class=\"number\">6</span>); <span class=\"comment\">// 720</span></span><br><span class=\"line\">factoral (<span class=\"number\">10</span>); <span class=\"comment\">// 3628800</span></span><br><span class=\"line\">factoral (<span class=\"number\">20</span>); <span class=\"comment\">// 2432902008176640000</span></span><br></pre></td></tr></table></figure>\n\n<p>使用函数<strong>arguments.callee</strong>属性解耦</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoral</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !(n &gt; <span class=\"number\">1</span>) ? <span class=\"number\">1</span> : <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>) * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factoral (<span class=\"number\">0</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">factoral (<span class=\"number\">1</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\">factoral (<span class=\"number\">5</span>); <span class=\"comment\">// 120</span></span><br><span class=\"line\">factoral (<span class=\"number\">6</span>); <span class=\"comment\">// 720</span></span><br><span class=\"line\">factoral (<span class=\"number\">10</span>); <span class=\"comment\">// 3628800</span></span><br><span class=\"line\">factoral (<span class=\"number\">20</span>); <span class=\"comment\">// 2432902008176640000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"while-loop-while-循环-法\"><a href=\"#while-loop-while-循环-法\" class=\"headerlink\" title=\"while loop(while 循环)法\"></a><code>while loop</code>(while 循环)法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoral</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"for-loop-for-循环-法\"><a href=\"#for-loop-for-循环-法\" class=\"headerlink\" title=\"for loop(for 循环)法\"></a><code>for loop</code>(for 循环)法</h3><h3 id=\"ES6数组迭代法\"><a href=\"#ES6数组迭代法\" class=\"headerlink\" title=\"ES6数组迭代法\"></a>ES6数组迭代法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factoral</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num &lt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : ( <span class=\"comment\">// 如果num小于0则返回1，否则执行后面的语句</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(num) <span class=\"comment\">// 实例了一个length为num长度的数组对象</span></span><br><span class=\"line\">      .fill(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 初始化填充数组的每一项为undefined</span></span><br><span class=\"line\">      .reduce(<span class=\"function\">(<span class=\"params\">product, val, index</span>) =&gt;</span> product * (index + <span class=\"number\">1</span>), <span class=\"number\">1</span>) <span class=\"comment\">// reduce对num的每一项进行累加迭代计算，最终返回计算出的结果</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factoral(<span class=\"number\">5</span>); <span class=\"comment\">// 调用函数，最终结果为120</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%9A%8E%E4%B9%98\" target=\"_blank\" rel=\"noopener\"><em>维基百科: 阶乘(Factoral)</em></a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92\" target=\"_blank\" rel=\"noopener\"><em>维基百科: 递归(Recursion)</em></a></li>\n<li><a href=\"https://www.w3cplus.com/javascript/factorial-function-in-javascript.html?expire=1576575926&code=6UzePxl_rKQ&sign=0337255c0a21b8e38123efa0cb40c62c#paywall\" target=\"_blank\" rel=\"noopener\"><em>w3cplus: JavaScript算法练习：阶乘(Factorial)</em></a></li>\n<li><a href=\"https://www.freecodecamp.org/forum/t/freecodecamp-challenge-guide-factorialize-a-number/16013\" target=\"_blank\" rel=\"noopener\"><em>FreeCodeCamp Challenge Guide: Factorialize a Number</em></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee\" target=\"_blank\" rel=\"noopener\"><em>MDN:JavaScript Functions arguments.callee</em></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\" target=\"_blank\" rel=\"noopener\"><em>MDN:Array.prototype.fill()</em></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"noopener\"><em>MDN:Array.prototype.reduce()</em></a></li>\n</ul>\n"},{"title":"如何优雅的在VS Code刷Leetcode算法题库？","date":"2019-12-18T12:57:03.000Z","_content":"\n## Requirements / 要求\n---\n\n**VS Code和Node的版本要求**\n+ [*VS Code 1.30.1+*](https://code.visualstudio.com/)\n+ [*Node.js 8+*](https://nodejs.org/en/)\n\n---\n\n## Quick Start / 快速开始\n---\n\n首先，我们需要给VS Code安装一个`leetcode`插件\n\n**安装方法：**\n> 打开`VS Code`  -> 左边操作栏找到`Extensions` -> 搜索插件名称：`leetcode` -> `install`\n\n[*VS Code LeetCode在线下载地址*](https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode)\n\n---\n\n## Features / 功能\n---\n\n### 登陆登出\n\n+ 点击`LeetCode Explorer`中的`Sign in to LeetCode` 即可登入。\n- 也可以使用快捷键(`Ctrl+shift+p`)唤起下列命令登入或利用cookie登入或登出:\n  - **LeetCode: Sign in**\n  - **LeetCode: Sign in (by cookie)**\n  - **LeetCode: Sign out**\n\n### 选择题目\n\n+ 直接点击题目或者在 `LeetCode Explorer` 中右键题目并选择 `Preview Problem` 可查看题目描述\n+ 选择 `Show Problem` 可直接进行答题。\n\n> 注意：可以通过更新配置项 `leetcode.workspaceFolder` 来指定保存题目文件所用的工作区路径。默认工作区路径为：**$HOME/.leetcode/**。\n> 注意：可以通过更新配置项 `leetcode.showCommentDescription` 来指定是否要在注释中包含题目描述。\n> 注意：可以通过 `LeetCode: Switch Default Language` 命令变更答题时默认使用编程语言。\n\n### 编辑器快捷方式\n\n+ `Submit`: 提交你的答案至 `LeetCode`；\n+ `Test`: 用给定的测试用例测试你的答案；\n+ `Solution`: 显示该问题的高票解答；\n+ `Description`: 显示该问题的题目描述。\n> *注意：可以通过 `leetcode.editor.shortcuts` 配置项来定制需要激活的快捷方式。默认情况下只有 `Submit` 和 `Test` 会被激活。*\n\n### 通过关键字搜索题目\n\n+ 点击 `LeetCode Explorer` 导航栏中的搜索按钮可按照关键字搜索题目。\n\n---\n\n## Problem / 问题\n---\n\n### 国内无法登陆海外版问题\n\n**如何解决VS Code的`vscode-leetcode`插件无法登陆海外版的问题？**\n\n> *注意：[登陆的endpoint(端点)：https://leetcode.com（并非中国leetcode-cn.com社区）](https://leetcode.com)*\n\n**几个解决方案：**\n\n1、切换 LeetCode 版本为中国版，点击`Switch Endpoint`切换为`leetcode-cn.com`(中国社区版)\n2、用`leetcode-cli`命令行工具进行登陆\n3、正常输入用户名和密码无法登陆的情况下，通过获取[*leetcode.com*](https://leetcode.com)的`Cookies`信息进行登陆。\n\n**具体实现步骤：**\n- 先保证退出账户\n- 确保当前激活的节点为`leetcode.com`（而非`leetcode-cn.com`）\n- 访问端点：[*https://leetcode.com*](https://leetcode.com)并打开Chrome开发者工具，选择`Network` -> 选择`XHR`\n- Web端登陆账号密码后，并点击problems按钮获取leetcode的session和csrf token信息\n- 找到`all`这个`api`接口：`https://leetcode.com/api/problems/all/`，并copy完整的`Cookies`\n- 打卡VS Code用快捷键：`ctrl + shift + p` 输入leetcode，选择`Sign In by Cookie`\n- 输入邮箱 -> paste 刚刚从览器copy的`cookies`信息 -> ok,done. Start coding...\n\n---\n\n## 参考链接\n\n+ [*vscode-leetcode Github*](https://github.com/jdneo/vscode-leetcode)\n+ [*vscode-leetcode 中文使用教程*](https://github.com/jdneo/vscode-leetcode/blob/master/docs/README_zh-CN.md)\n+ [*github issues: Failed to log in with a leetcode.com account*](https://github.com/jdneo/vscode-leetcode/issues/478)\n+ [*浏览器获取cookies的方法*](https://github.com/jdneo/vscode-leetcode/issues/478)\n","source":"_posts/2019-12-18-如何优雅的在VS-Code刷Leetcode算法题库？.md","raw":"---\ntitle: 如何优雅的在VS Code刷Leetcode算法题库？\ndate: 2019-12-18 20:57:03\ntags:\n- 前端开发\n- 算法\n- 算法面试题\n- 前端算法\n- Leetcode\n- VS Code\n- Visual Studio Code\n- algorithms\n- Leetcode算法题\n- Leetcode algorithms\ncategory:\n- [前端]\n- [前端算法]\n- [Leetcode]\n- [algorithms]\n- [VS Code]\n- [Leetcode-algorithms]\n---\n\n## Requirements / 要求\n---\n\n**VS Code和Node的版本要求**\n+ [*VS Code 1.30.1+*](https://code.visualstudio.com/)\n+ [*Node.js 8+*](https://nodejs.org/en/)\n\n---\n\n## Quick Start / 快速开始\n---\n\n首先，我们需要给VS Code安装一个`leetcode`插件\n\n**安装方法：**\n> 打开`VS Code`  -> 左边操作栏找到`Extensions` -> 搜索插件名称：`leetcode` -> `install`\n\n[*VS Code LeetCode在线下载地址*](https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode)\n\n---\n\n## Features / 功能\n---\n\n### 登陆登出\n\n+ 点击`LeetCode Explorer`中的`Sign in to LeetCode` 即可登入。\n- 也可以使用快捷键(`Ctrl+shift+p`)唤起下列命令登入或利用cookie登入或登出:\n  - **LeetCode: Sign in**\n  - **LeetCode: Sign in (by cookie)**\n  - **LeetCode: Sign out**\n\n### 选择题目\n\n+ 直接点击题目或者在 `LeetCode Explorer` 中右键题目并选择 `Preview Problem` 可查看题目描述\n+ 选择 `Show Problem` 可直接进行答题。\n\n> 注意：可以通过更新配置项 `leetcode.workspaceFolder` 来指定保存题目文件所用的工作区路径。默认工作区路径为：**$HOME/.leetcode/**。\n> 注意：可以通过更新配置项 `leetcode.showCommentDescription` 来指定是否要在注释中包含题目描述。\n> 注意：可以通过 `LeetCode: Switch Default Language` 命令变更答题时默认使用编程语言。\n\n### 编辑器快捷方式\n\n+ `Submit`: 提交你的答案至 `LeetCode`；\n+ `Test`: 用给定的测试用例测试你的答案；\n+ `Solution`: 显示该问题的高票解答；\n+ `Description`: 显示该问题的题目描述。\n> *注意：可以通过 `leetcode.editor.shortcuts` 配置项来定制需要激活的快捷方式。默认情况下只有 `Submit` 和 `Test` 会被激活。*\n\n### 通过关键字搜索题目\n\n+ 点击 `LeetCode Explorer` 导航栏中的搜索按钮可按照关键字搜索题目。\n\n---\n\n## Problem / 问题\n---\n\n### 国内无法登陆海外版问题\n\n**如何解决VS Code的`vscode-leetcode`插件无法登陆海外版的问题？**\n\n> *注意：[登陆的endpoint(端点)：https://leetcode.com（并非中国leetcode-cn.com社区）](https://leetcode.com)*\n\n**几个解决方案：**\n\n1、切换 LeetCode 版本为中国版，点击`Switch Endpoint`切换为`leetcode-cn.com`(中国社区版)\n2、用`leetcode-cli`命令行工具进行登陆\n3、正常输入用户名和密码无法登陆的情况下，通过获取[*leetcode.com*](https://leetcode.com)的`Cookies`信息进行登陆。\n\n**具体实现步骤：**\n- 先保证退出账户\n- 确保当前激活的节点为`leetcode.com`（而非`leetcode-cn.com`）\n- 访问端点：[*https://leetcode.com*](https://leetcode.com)并打开Chrome开发者工具，选择`Network` -> 选择`XHR`\n- Web端登陆账号密码后，并点击problems按钮获取leetcode的session和csrf token信息\n- 找到`all`这个`api`接口：`https://leetcode.com/api/problems/all/`，并copy完整的`Cookies`\n- 打卡VS Code用快捷键：`ctrl + shift + p` 输入leetcode，选择`Sign In by Cookie`\n- 输入邮箱 -> paste 刚刚从览器copy的`cookies`信息 -> ok,done. Start coding...\n\n---\n\n## 参考链接\n\n+ [*vscode-leetcode Github*](https://github.com/jdneo/vscode-leetcode)\n+ [*vscode-leetcode 中文使用教程*](https://github.com/jdneo/vscode-leetcode/blob/master/docs/README_zh-CN.md)\n+ [*github issues: Failed to log in with a leetcode.com account*](https://github.com/jdneo/vscode-leetcode/issues/478)\n+ [*浏览器获取cookies的方法*](https://github.com/jdneo/vscode-leetcode/issues/478)\n","slug":"如何优雅的在VS-Code刷Leetcode算法题库？","published":1,"updated":"2020-06-26T11:25:54.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvu3000mm5snging2sfi","content":"<h2 id=\"Requirements-要求\"><a href=\"#Requirements-要求\" class=\"headerlink\" title=\"Requirements / 要求\"></a>Requirements / 要求</h2><hr>\n<p><strong>VS Code和Node的版本要求</strong></p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\"><em>VS Code 1.30.1+</em></a></li>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\"><em>Node.js 8+</em></a></li>\n</ul>\n<hr>\n<h2 id=\"Quick-Start-快速开始\"><a href=\"#Quick-Start-快速开始\" class=\"headerlink\" title=\"Quick Start / 快速开始\"></a>Quick Start / 快速开始</h2><hr>\n<p>首先，我们需要给VS Code安装一个<code>leetcode</code>插件</p>\n<p><strong>安装方法：</strong></p>\n<blockquote>\n<p>打开<code>VS Code</code>  -&gt; 左边操作栏找到<code>Extensions</code> -&gt; 搜索插件名称：<code>leetcode</code> -&gt; <code>install</code></p>\n</blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode\" target=\"_blank\" rel=\"noopener\"><em>VS Code LeetCode在线下载地址</em></a></p>\n<hr>\n<h2 id=\"Features-功能\"><a href=\"#Features-功能\" class=\"headerlink\" title=\"Features / 功能\"></a>Features / 功能</h2><hr>\n<h3 id=\"登陆登出\"><a href=\"#登陆登出\" class=\"headerlink\" title=\"登陆登出\"></a>登陆登出</h3><ul>\n<li>点击<code>LeetCode Explorer</code>中的<code>Sign in to LeetCode</code> 即可登入。</li>\n</ul>\n<ul>\n<li>也可以使用快捷键(<code>Ctrl+shift+p</code>)唤起下列命令登入或利用cookie登入或登出:<ul>\n<li><strong>LeetCode: Sign in</strong></li>\n<li><strong>LeetCode: Sign in (by cookie)</strong></li>\n<li><strong>LeetCode: Sign out</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择题目\"><a href=\"#选择题目\" class=\"headerlink\" title=\"选择题目\"></a>选择题目</h3><ul>\n<li>直接点击题目或者在 <code>LeetCode Explorer</code> 中右键题目并选择 <code>Preview Problem</code> 可查看题目描述</li>\n<li>选择 <code>Show Problem</code> 可直接进行答题。</li>\n</ul>\n<blockquote>\n<p>注意：可以通过更新配置项 <code>leetcode.workspaceFolder</code> 来指定保存题目文件所用的工作区路径。默认工作区路径为：<strong>$HOME/.leetcode/</strong>。<br>注意：可以通过更新配置项 <code>leetcode.showCommentDescription</code> 来指定是否要在注释中包含题目描述。<br>注意：可以通过 <code>LeetCode: Switch Default Language</code> 命令变更答题时默认使用编程语言。</p>\n</blockquote>\n<h3 id=\"编辑器快捷方式\"><a href=\"#编辑器快捷方式\" class=\"headerlink\" title=\"编辑器快捷方式\"></a>编辑器快捷方式</h3><ul>\n<li><code>Submit</code>: 提交你的答案至 <code>LeetCode</code>；</li>\n<li><code>Test</code>: 用给定的测试用例测试你的答案；</li>\n<li><code>Solution</code>: 显示该问题的高票解答；</li>\n<li><code>Description</code>: 显示该问题的题目描述。<blockquote>\n<p><em>注意：可以通过 <code>leetcode.editor.shortcuts</code> 配置项来定制需要激活的快捷方式。默认情况下只有 <code>Submit</code> 和 <code>Test</code> 会被激活。</em></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"通过关键字搜索题目\"><a href=\"#通过关键字搜索题目\" class=\"headerlink\" title=\"通过关键字搜索题目\"></a>通过关键字搜索题目</h3><ul>\n<li>点击 <code>LeetCode Explorer</code> 导航栏中的搜索按钮可按照关键字搜索题目。</li>\n</ul>\n<hr>\n<h2 id=\"Problem-问题\"><a href=\"#Problem-问题\" class=\"headerlink\" title=\"Problem / 问题\"></a>Problem / 问题</h2><hr>\n<h3 id=\"国内无法登陆海外版问题\"><a href=\"#国内无法登陆海外版问题\" class=\"headerlink\" title=\"国内无法登陆海外版问题\"></a>国内无法登陆海外版问题</h3><p><strong>如何解决VS Code的<code>vscode-leetcode</code>插件无法登陆海外版的问题？</strong></p>\n<blockquote>\n<p><em>注意：<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">登陆的endpoint(端点)：https://leetcode.com（并非中国leetcode-cn.com社区）</a></em></p>\n</blockquote>\n<p><strong>几个解决方案：</strong></p>\n<p>1、切换 LeetCode 版本为中国版，点击<code>Switch Endpoint</code>切换为<code>leetcode-cn.com</code>(中国社区版)<br>2、用<code>leetcode-cli</code>命令行工具进行登陆<br>3、正常输入用户名和密码无法登陆的情况下，通过获取<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\"><em>leetcode.com</em></a>的<code>Cookies</code>信息进行登陆。</p>\n<p><strong>具体实现步骤：</strong></p>\n<ul>\n<li>先保证退出账户</li>\n<li>确保当前激活的节点为<code>leetcode.com</code>（而非<code>leetcode-cn.com</code>）</li>\n<li>访问端点：<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\"><em>https://leetcode.com</em></a>并打开Chrome开发者工具，选择<code>Network</code> -&gt; 选择<code>XHR</code></li>\n<li>Web端登陆账号密码后，并点击problems按钮获取leetcode的session和csrf token信息</li>\n<li>找到<code>all</code>这个<code>api</code>接口：<code>https://leetcode.com/api/problems/all/</code>，并copy完整的<code>Cookies</code></li>\n<li>打卡VS Code用快捷键：<code>ctrl + shift + p</code> 输入leetcode，选择<code>Sign In by Cookie</code></li>\n<li>输入邮箱 -&gt; paste 刚刚从览器copy的<code>cookies</code>信息 -&gt; ok,done. Start coding…</li>\n</ul>\n<hr>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode\" target=\"_blank\" rel=\"noopener\"><em>vscode-leetcode Github</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/blob/master/docs/README_zh-CN.md\" target=\"_blank\" rel=\"noopener\"><em>vscode-leetcode 中文使用教程</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/issues/478\" target=\"_blank\" rel=\"noopener\"><em>github issues: Failed to log in with a leetcode.com account</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/issues/478\" target=\"_blank\" rel=\"noopener\"><em>浏览器获取cookies的方法</em></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Requirements-要求\"><a href=\"#Requirements-要求\" class=\"headerlink\" title=\"Requirements / 要求\"></a>Requirements / 要求</h2><hr>\n<p><strong>VS Code和Node的版本要求</strong></p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\"><em>VS Code 1.30.1+</em></a></li>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\"><em>Node.js 8+</em></a></li>\n</ul>\n<hr>\n<h2 id=\"Quick-Start-快速开始\"><a href=\"#Quick-Start-快速开始\" class=\"headerlink\" title=\"Quick Start / 快速开始\"></a>Quick Start / 快速开始</h2><hr>\n<p>首先，我们需要给VS Code安装一个<code>leetcode</code>插件</p>\n<p><strong>安装方法：</strong></p>\n<blockquote>\n<p>打开<code>VS Code</code>  -&gt; 左边操作栏找到<code>Extensions</code> -&gt; 搜索插件名称：<code>leetcode</code> -&gt; <code>install</code></p>\n</blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode\" target=\"_blank\" rel=\"noopener\"><em>VS Code LeetCode在线下载地址</em></a></p>\n<hr>\n<h2 id=\"Features-功能\"><a href=\"#Features-功能\" class=\"headerlink\" title=\"Features / 功能\"></a>Features / 功能</h2><hr>\n<h3 id=\"登陆登出\"><a href=\"#登陆登出\" class=\"headerlink\" title=\"登陆登出\"></a>登陆登出</h3><ul>\n<li>点击<code>LeetCode Explorer</code>中的<code>Sign in to LeetCode</code> 即可登入。</li>\n</ul>\n<ul>\n<li>也可以使用快捷键(<code>Ctrl+shift+p</code>)唤起下列命令登入或利用cookie登入或登出:<ul>\n<li><strong>LeetCode: Sign in</strong></li>\n<li><strong>LeetCode: Sign in (by cookie)</strong></li>\n<li><strong>LeetCode: Sign out</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选择题目\"><a href=\"#选择题目\" class=\"headerlink\" title=\"选择题目\"></a>选择题目</h3><ul>\n<li>直接点击题目或者在 <code>LeetCode Explorer</code> 中右键题目并选择 <code>Preview Problem</code> 可查看题目描述</li>\n<li>选择 <code>Show Problem</code> 可直接进行答题。</li>\n</ul>\n<blockquote>\n<p>注意：可以通过更新配置项 <code>leetcode.workspaceFolder</code> 来指定保存题目文件所用的工作区路径。默认工作区路径为：<strong>$HOME/.leetcode/</strong>。<br>注意：可以通过更新配置项 <code>leetcode.showCommentDescription</code> 来指定是否要在注释中包含题目描述。<br>注意：可以通过 <code>LeetCode: Switch Default Language</code> 命令变更答题时默认使用编程语言。</p>\n</blockquote>\n<h3 id=\"编辑器快捷方式\"><a href=\"#编辑器快捷方式\" class=\"headerlink\" title=\"编辑器快捷方式\"></a>编辑器快捷方式</h3><ul>\n<li><code>Submit</code>: 提交你的答案至 <code>LeetCode</code>；</li>\n<li><code>Test</code>: 用给定的测试用例测试你的答案；</li>\n<li><code>Solution</code>: 显示该问题的高票解答；</li>\n<li><code>Description</code>: 显示该问题的题目描述。<blockquote>\n<p><em>注意：可以通过 <code>leetcode.editor.shortcuts</code> 配置项来定制需要激活的快捷方式。默认情况下只有 <code>Submit</code> 和 <code>Test</code> 会被激活。</em></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"通过关键字搜索题目\"><a href=\"#通过关键字搜索题目\" class=\"headerlink\" title=\"通过关键字搜索题目\"></a>通过关键字搜索题目</h3><ul>\n<li>点击 <code>LeetCode Explorer</code> 导航栏中的搜索按钮可按照关键字搜索题目。</li>\n</ul>\n<hr>\n<h2 id=\"Problem-问题\"><a href=\"#Problem-问题\" class=\"headerlink\" title=\"Problem / 问题\"></a>Problem / 问题</h2><hr>\n<h3 id=\"国内无法登陆海外版问题\"><a href=\"#国内无法登陆海外版问题\" class=\"headerlink\" title=\"国内无法登陆海外版问题\"></a>国内无法登陆海外版问题</h3><p><strong>如何解决VS Code的<code>vscode-leetcode</code>插件无法登陆海外版的问题？</strong></p>\n<blockquote>\n<p><em>注意：<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\">登陆的endpoint(端点)：https://leetcode.com（并非中国leetcode-cn.com社区）</a></em></p>\n</blockquote>\n<p><strong>几个解决方案：</strong></p>\n<p>1、切换 LeetCode 版本为中国版，点击<code>Switch Endpoint</code>切换为<code>leetcode-cn.com</code>(中国社区版)<br>2、用<code>leetcode-cli</code>命令行工具进行登陆<br>3、正常输入用户名和密码无法登陆的情况下，通过获取<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\"><em>leetcode.com</em></a>的<code>Cookies</code>信息进行登陆。</p>\n<p><strong>具体实现步骤：</strong></p>\n<ul>\n<li>先保证退出账户</li>\n<li>确保当前激活的节点为<code>leetcode.com</code>（而非<code>leetcode-cn.com</code>）</li>\n<li>访问端点：<a href=\"https://leetcode.com\" target=\"_blank\" rel=\"noopener\"><em>https://leetcode.com</em></a>并打开Chrome开发者工具，选择<code>Network</code> -&gt; 选择<code>XHR</code></li>\n<li>Web端登陆账号密码后，并点击problems按钮获取leetcode的session和csrf token信息</li>\n<li>找到<code>all</code>这个<code>api</code>接口：<code>https://leetcode.com/api/problems/all/</code>，并copy完整的<code>Cookies</code></li>\n<li>打卡VS Code用快捷键：<code>ctrl + shift + p</code> 输入leetcode，选择<code>Sign In by Cookie</code></li>\n<li>输入邮箱 -&gt; paste 刚刚从览器copy的<code>cookies</code>信息 -&gt; ok,done. Start coding…</li>\n</ul>\n<hr>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode\" target=\"_blank\" rel=\"noopener\"><em>vscode-leetcode Github</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/blob/master/docs/README_zh-CN.md\" target=\"_blank\" rel=\"noopener\"><em>vscode-leetcode 中文使用教程</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/issues/478\" target=\"_blank\" rel=\"noopener\"><em>github issues: Failed to log in with a leetcode.com account</em></a></li>\n<li><a href=\"https://github.com/jdneo/vscode-leetcode/issues/478\" target=\"_blank\" rel=\"noopener\"><em>浏览器获取cookies的方法</em></a></li>\n</ul>\n"},{"title":"npm install安装依赖包出现超过最大调用堆栈大小","date":"2020-01-08T11:26:22.000Z","_content":"\n## 问题\n\n> **问题描述：**在使用`npm install`安装依赖包超过最大调用堆栈大小的`error `\n\n**错误信息：**\n\n```sh\nnpm ERR! Maximum call stack size exceeded\nnpm ERR! A complete log of this run can be found in:\n```\n\n## 解决方案\n\n> 思路：删除所有`npm `依赖项的内容，并强制性清除npm依赖的缓存，再重新`npm install`\n\n**强制清除npm依赖包的缓存**\n\n```sh\nnpm cache clean --force\n```\n\n**重新安装所需依赖**\n\n```sh\nnpm install -g babel-cli\n```\n\nOk, Done. 完美解决.\n\n## 参考链接\n\n> [*Maximum call stack size exceeded on npm install*](https://stackoverflow.com/questions/40566348/maximum-call-stack-size-exceeded-on-npm-install)\n\n","source":"_posts/2020-01-08-npm-install安装依赖包超过最大调用堆栈大小的error.md","raw":"---\ntitle: npm install安装依赖包出现超过最大调用堆栈大小\ndate: 2020-01-08 19:26:22\ntags:\n- 前端\n- npm\n- node\ncategory:\n- [前端]\n- [npm]\n---\n\n## 问题\n\n> **问题描述：**在使用`npm install`安装依赖包超过最大调用堆栈大小的`error `\n\n**错误信息：**\n\n```sh\nnpm ERR! Maximum call stack size exceeded\nnpm ERR! A complete log of this run can be found in:\n```\n\n## 解决方案\n\n> 思路：删除所有`npm `依赖项的内容，并强制性清除npm依赖的缓存，再重新`npm install`\n\n**强制清除npm依赖包的缓存**\n\n```sh\nnpm cache clean --force\n```\n\n**重新安装所需依赖**\n\n```sh\nnpm install -g babel-cli\n```\n\nOk, Done. 完美解决.\n\n## 参考链接\n\n> [*Maximum call stack size exceeded on npm install*](https://stackoverflow.com/questions/40566348/maximum-call-stack-size-exceeded-on-npm-install)\n\n","slug":"npm-install安装依赖包超过最大调用堆栈大小的error","published":1,"updated":"2020-01-08T11:35:01.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvu7000qm5snclv3fc6d","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><blockquote>\n<p><strong>问题描述：</strong>在使用<code>npm install</code>安装依赖包超过最大调用堆栈大小的<code>error</code></p>\n</blockquote>\n<p><strong>错误信息：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Maximum call stack size exceeded</span><br><span class=\"line\">npm ERR! A complete <span class=\"built_in\">log</span> of this run can be found <span class=\"keyword\">in</span>:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><blockquote>\n<p>思路：删除所有<code>npm</code>依赖项的内容，并强制性清除npm依赖的缓存，再重新<code>npm install</code></p>\n</blockquote>\n<p><strong>强制清除npm依赖包的缓存</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n\n<p><strong>重新安装所需依赖</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g babel-cli</span><br></pre></td></tr></table></figure>\n\n<p>Ok, Done. 完美解决.</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://stackoverflow.com/questions/40566348/maximum-call-stack-size-exceeded-on-npm-install\" target=\"_blank\" rel=\"noopener\"><em>Maximum call stack size exceeded on npm install</em></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><blockquote>\n<p><strong>问题描述：</strong>在使用<code>npm install</code>安装依赖包超过最大调用堆栈大小的<code>error</code></p>\n</blockquote>\n<p><strong>错误信息：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Maximum call stack size exceeded</span><br><span class=\"line\">npm ERR! A complete <span class=\"built_in\">log</span> of this run can be found <span class=\"keyword\">in</span>:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><blockquote>\n<p>思路：删除所有<code>npm</code>依赖项的内容，并强制性清除npm依赖的缓存，再重新<code>npm install</code></p>\n</blockquote>\n<p><strong>强制清除npm依赖包的缓存</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n\n<p><strong>重新安装所需依赖</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g babel-cli</span><br></pre></td></tr></table></figure>\n\n<p>Ok, Done. 完美解决.</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://stackoverflow.com/questions/40566348/maximum-call-stack-size-exceeded-on-npm-install\" target=\"_blank\" rel=\"noopener\"><em>Maximum call stack size exceeded on npm install</em></a></p>\n</blockquote>\n"},{"title":"语义化git提交信息","date":"2020-01-05T12:05:20.000Z","toc":true,"comments":1,"_content":"\n## 如何语义化你的git提交信息？\n\n**例子**\n\n```zh\nfeat: add hat wobble\n^--^ ^------------^\n| |\n| +-> Summary in present tense.\n|\n+-------> Type: chore, docs, feat, fix, refactor, style, or test.\n```\n\n## `Git Commit message` 的格式\n\n**每次提交，Commit message 都包括三个部分：Header，Body 和 Footer**\n\n```sh\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\n## Type\n\n**`feat`**: 新功能(A new feature)\n**`fix`**: 修复bug(A bug fix)\n**`docs`**: 修改文档(Documentation only changes)\n**`style`**: 格式（不影响代码运行的变动,空格、格式、缺少分号等）(Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n**`refactor`**: 重构(既不是新功能，也不是修复bug的代码变动)(A code change that neither fixes a bug nor adds a feature)\n**`perf`**: 代码性能提升(A code change that improves performance)\n**`test`**: 增加测试模块，不涉及生产环境的代码(Adding missing or correcting existing tests)\n**`chore`**: 更新核心模块，包配置文件，不涉及生产环境的代码；(Changes to the build process or auxiliary tools and libraries such as documentation generation)\n\n## `Git commit` 模板\n\n## 相关工具\n\n+ [Commitizen](https://github.com/commitizen/cz-cli)：一个撰写合格 Commit message 的工具\n+ [validate-commit-msg](https://github.com/conventional-changelog-archived-repos/validate-commit-msg)：用于检查 Node 项目的 Commit message 是否符合格式\n+ [conventional-change log](https://github.com/conventional-changelog/conventional-changelog)：生成 Change log 的工具\n\n## 参考链接\n> [*阮一峰-Commit message 和 Change log 编写指南*](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n> [*Github Angular Repositories commits message*](https://github.com/angular/angular/commits/master)\n> [*Angular 团队的规范*](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines)\n> [*Conventional Commits*](https://www.conventionalcommits.org/en/v1.0.0/)\n> [*git 工作流和git commit规范*](https://www.colabug.com/2019/0616/6449643/)\n> [*Github semantic-release*](https://github.com/semantic-release/semantic-release)\n> [*Github Commitizen/cz-cli*](https://github.com/commitizen/cz-cli)\n> [*如何写好 Git commit log?*](https://www.zhihu.com/question/21209619)\n> [*优雅的提交你的 Git Commit Message*](https://zhuanlan.zhihu.com/p/34223150)\n> [*Git Commit Msg*](http://karma-runner.github.io/0.10/dev/git-commit-msg.html)\n> [*Semantic Commit Messages*](https://seesparkbox.com/foundry/semantic_commit_messages)\n","source":"_posts/2020-01-05-语义化git提交信息.md","raw":"---\ntitle: 语义化git提交信息\ndate: 2020-01-05 20:05:20\ntags:\n  - 前端开发\n  - Git相关\n  - commits\n  - git-commits\ncategory:\n- [Git]\ntoc: true\ncomments: true\n---\n\n## 如何语义化你的git提交信息？\n\n**例子**\n\n```zh\nfeat: add hat wobble\n^--^ ^------------^\n| |\n| +-> Summary in present tense.\n|\n+-------> Type: chore, docs, feat, fix, refactor, style, or test.\n```\n\n## `Git Commit message` 的格式\n\n**每次提交，Commit message 都包括三个部分：Header，Body 和 Footer**\n\n```sh\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\n## Type\n\n**`feat`**: 新功能(A new feature)\n**`fix`**: 修复bug(A bug fix)\n**`docs`**: 修改文档(Documentation only changes)\n**`style`**: 格式（不影响代码运行的变动,空格、格式、缺少分号等）(Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n**`refactor`**: 重构(既不是新功能，也不是修复bug的代码变动)(A code change that neither fixes a bug nor adds a feature)\n**`perf`**: 代码性能提升(A code change that improves performance)\n**`test`**: 增加测试模块，不涉及生产环境的代码(Adding missing or correcting existing tests)\n**`chore`**: 更新核心模块，包配置文件，不涉及生产环境的代码；(Changes to the build process or auxiliary tools and libraries such as documentation generation)\n\n## `Git commit` 模板\n\n## 相关工具\n\n+ [Commitizen](https://github.com/commitizen/cz-cli)：一个撰写合格 Commit message 的工具\n+ [validate-commit-msg](https://github.com/conventional-changelog-archived-repos/validate-commit-msg)：用于检查 Node 项目的 Commit message 是否符合格式\n+ [conventional-change log](https://github.com/conventional-changelog/conventional-changelog)：生成 Change log 的工具\n\n## 参考链接\n> [*阮一峰-Commit message 和 Change log 编写指南*](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n> [*Github Angular Repositories commits message*](https://github.com/angular/angular/commits/master)\n> [*Angular 团队的规范*](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines)\n> [*Conventional Commits*](https://www.conventionalcommits.org/en/v1.0.0/)\n> [*git 工作流和git commit规范*](https://www.colabug.com/2019/0616/6449643/)\n> [*Github semantic-release*](https://github.com/semantic-release/semantic-release)\n> [*Github Commitizen/cz-cli*](https://github.com/commitizen/cz-cli)\n> [*如何写好 Git commit log?*](https://www.zhihu.com/question/21209619)\n> [*优雅的提交你的 Git Commit Message*](https://zhuanlan.zhihu.com/p/34223150)\n> [*Git Commit Msg*](http://karma-runner.github.io/0.10/dev/git-commit-msg.html)\n> [*Semantic Commit Messages*](https://seesparkbox.com/foundry/semantic_commit_messages)\n","slug":"语义化git提交信息","published":1,"updated":"2020-06-26T11:26:11.259Z","layout":"post","photos":[],"link":"","_id":"ckcctyvua000rm5sn9mrv95yk","content":"<h2 id=\"如何语义化你的git提交信息？\"><a href=\"#如何语义化你的git提交信息？\" class=\"headerlink\" title=\"如何语义化你的git提交信息？\"></a>如何语义化你的git提交信息？</h2><p><strong>例子</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat: add hat wobble</span><br><span class=\"line\">^--^ ^------------^</span><br><span class=\"line\">| |</span><br><span class=\"line\">| +-&gt; Summary in present tense.</span><br><span class=\"line\">|</span><br><span class=\"line\">+-------&gt; Type: chore, docs, feat, fix, refactor, style, or test.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git-Commit-message-的格式\"><a href=\"#Git-Commit-message-的格式\" class=\"headerlink\" title=\"Git Commit message 的格式\"></a><code>Git Commit message</code> 的格式</h2><p><strong>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h2><p><strong><code>feat</code></strong>: 新功能(A new feature)<br><strong><code>fix</code></strong>: 修复bug(A bug fix)<br><strong><code>docs</code></strong>: 修改文档(Documentation only changes)<br><strong><code>style</code></strong>: 格式（不影响代码运行的变动,空格、格式、缺少分号等）(Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)<br><strong><code>refactor</code></strong>: 重构(既不是新功能，也不是修复bug的代码变动)(A code change that neither fixes a bug nor adds a feature)<br><strong><code>perf</code></strong>: 代码性能提升(A code change that improves performance)<br><strong><code>test</code></strong>: 增加测试模块，不涉及生产环境的代码(Adding missing or correcting existing tests)<br><strong><code>chore</code></strong>: 更新核心模块，包配置文件，不涉及生产环境的代码；(Changes to the build process or auxiliary tools and libraries such as documentation generation)</p>\n<h2 id=\"Git-commit-模板\"><a href=\"#Git-commit-模板\" class=\"headerlink\" title=\"Git commit 模板\"></a><code>Git commit</code> 模板</h2><h2 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具\"></a>相关工具</h2><ul>\n<li><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\">Commitizen</a>：一个撰写合格 Commit message 的工具</li>\n<li><a href=\"https://github.com/conventional-changelog-archived-repos/validate-commit-msg\" target=\"_blank\" rel=\"noopener\">validate-commit-msg</a>：用于检查 Node 项目的 Commit message 是否符合格式</li>\n<li><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener\">conventional-change log</a>：生成 Change log 的工具</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\"><em>阮一峰-Commit message 和 Change log 编写指南</em></a><br><a href=\"https://github.com/angular/angular/commits/master\" target=\"_blank\" rel=\"noopener\"><em>Github Angular Repositories commits message</em></a><br><a href=\"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines\" target=\"_blank\" rel=\"noopener\"><em>Angular 团队的规范</em></a><br><a href=\"https://www.conventionalcommits.org/en/v1.0.0/\" target=\"_blank\" rel=\"noopener\"><em>Conventional Commits</em></a><br><a href=\"https://www.colabug.com/2019/0616/6449643/\" target=\"_blank\" rel=\"noopener\"><em>git 工作流和git commit规范</em></a><br><a href=\"https://github.com/semantic-release/semantic-release\" target=\"_blank\" rel=\"noopener\"><em>Github semantic-release</em></a><br><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\"><em>Github Commitizen/cz-cli</em></a><br><a href=\"https://www.zhihu.com/question/21209619\" target=\"_blank\" rel=\"noopener\"><em>如何写好 Git commit log?</em></a><br><a href=\"https://zhuanlan.zhihu.com/p/34223150\" target=\"_blank\" rel=\"noopener\"><em>优雅的提交你的 Git Commit Message</em></a><br><a href=\"http://karma-runner.github.io/0.10/dev/git-commit-msg.html\" target=\"_blank\" rel=\"noopener\"><em>Git Commit Msg</em></a><br><a href=\"https://seesparkbox.com/foundry/semantic_commit_messages\" target=\"_blank\" rel=\"noopener\"><em>Semantic Commit Messages</em></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何语义化你的git提交信息？\"><a href=\"#如何语义化你的git提交信息？\" class=\"headerlink\" title=\"如何语义化你的git提交信息？\"></a>如何语义化你的git提交信息？</h2><p><strong>例子</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat: add hat wobble</span><br><span class=\"line\">^--^ ^------------^</span><br><span class=\"line\">| |</span><br><span class=\"line\">| +-&gt; Summary in present tense.</span><br><span class=\"line\">|</span><br><span class=\"line\">+-------&gt; Type: chore, docs, feat, fix, refactor, style, or test.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git-Commit-message-的格式\"><a href=\"#Git-Commit-message-的格式\" class=\"headerlink\" title=\"Git Commit message 的格式\"></a><code>Git Commit message</code> 的格式</h2><p><strong>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h2><p><strong><code>feat</code></strong>: 新功能(A new feature)<br><strong><code>fix</code></strong>: 修复bug(A bug fix)<br><strong><code>docs</code></strong>: 修改文档(Documentation only changes)<br><strong><code>style</code></strong>: 格式（不影响代码运行的变动,空格、格式、缺少分号等）(Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)<br><strong><code>refactor</code></strong>: 重构(既不是新功能，也不是修复bug的代码变动)(A code change that neither fixes a bug nor adds a feature)<br><strong><code>perf</code></strong>: 代码性能提升(A code change that improves performance)<br><strong><code>test</code></strong>: 增加测试模块，不涉及生产环境的代码(Adding missing or correcting existing tests)<br><strong><code>chore</code></strong>: 更新核心模块，包配置文件，不涉及生产环境的代码；(Changes to the build process or auxiliary tools and libraries such as documentation generation)</p>\n<h2 id=\"Git-commit-模板\"><a href=\"#Git-commit-模板\" class=\"headerlink\" title=\"Git commit 模板\"></a><code>Git commit</code> 模板</h2><h2 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具\"></a>相关工具</h2><ul>\n<li><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\">Commitizen</a>：一个撰写合格 Commit message 的工具</li>\n<li><a href=\"https://github.com/conventional-changelog-archived-repos/validate-commit-msg\" target=\"_blank\" rel=\"noopener\">validate-commit-msg</a>：用于检查 Node 项目的 Commit message 是否符合格式</li>\n<li><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener\">conventional-change log</a>：生成 Change log 的工具</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\"><em>阮一峰-Commit message 和 Change log 编写指南</em></a><br><a href=\"https://github.com/angular/angular/commits/master\" target=\"_blank\" rel=\"noopener\"><em>Github Angular Repositories commits message</em></a><br><a href=\"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines\" target=\"_blank\" rel=\"noopener\"><em>Angular 团队的规范</em></a><br><a href=\"https://www.conventionalcommits.org/en/v1.0.0/\" target=\"_blank\" rel=\"noopener\"><em>Conventional Commits</em></a><br><a href=\"https://www.colabug.com/2019/0616/6449643/\" target=\"_blank\" rel=\"noopener\"><em>git 工作流和git commit规范</em></a><br><a href=\"https://github.com/semantic-release/semantic-release\" target=\"_blank\" rel=\"noopener\"><em>Github semantic-release</em></a><br><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\"><em>Github Commitizen/cz-cli</em></a><br><a href=\"https://www.zhihu.com/question/21209619\" target=\"_blank\" rel=\"noopener\"><em>如何写好 Git commit log?</em></a><br><a href=\"https://zhuanlan.zhihu.com/p/34223150\" target=\"_blank\" rel=\"noopener\"><em>优雅的提交你的 Git Commit Message</em></a><br><a href=\"http://karma-runner.github.io/0.10/dev/git-commit-msg.html\" target=\"_blank\" rel=\"noopener\"><em>Git Commit Msg</em></a><br><a href=\"https://seesparkbox.com/foundry/semantic_commit_messages\" target=\"_blank\" rel=\"noopener\"><em>Semantic Commit Messages</em></a></p>\n</blockquote>\n"},{"title":"JavaScript IIFE(Immediately Invoked Funtion Expression)立即执行函数表达式","date":"2020-01-12T14:32:22.000Z","_content":"\n## IIFE (Immediately-Invoked Function Expression) 立即执行函数表达式\n\n**请看下面的例子：**\n\n```javascript\nvar a = 2;\n(function foo(c) {\n  var a = 3;\n  console.log(c); // 1\n  console.log(a); // 3\n})(b = 1)\nconsole.log(a); // 2\n```\n\n```javascript\n(function () {/* Code */}()); \n// 或者\n(function () {/* Code */})();\n```\n\n函数被包含在一对`()`内部，成为了一个表达式，再通过在末尾加上另一个`()`可以立即执行这个函数，比如：`(function foo(){ .. })()`。第一个`()`将函数变成表达式，第二个`()`执行了这个函数。\n\n这种函数表达式被社区成为：[**IIFE(Immediately Invoked Function Expresstion)，立即执行函数表达式**](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)\n\n**IIFE**的函数名不是必须的，**IIFE**最常见的用法是使用一个匿名函数表达式**。\n\n```javascript\nvar a = 2;\n(function IIFE() {\n  // IIFE\n  var a = 3;\n  console.log(a); // 3\n})();\nconsole.log(a); // 2\n```\n\n**IIFE**也可以用箭头函数：\n\n```javascript\nvar a = 2;\n(() => {\n  /* Code */\n  let a = 3;\n  console.log(a); // 3\n})();\nconsole.log(a); // 2\n```\n\n另一个改进的形式：`(function(){ /* Code */ }())`\n\n仔细观察下面两个的区别：\n```javascript\n// IIFE 写法一\nvar a = 2;\n(function IIFE(){\n  var a = 3;\n  console.log(a); // 3\n})();\nconsole.log(a); // 2\n\n// IIFE写法二\nvar a = 2;\n(function IIFE(){\n  var a = 3;\n  console.log(a); // 3\n}());\nconsole.log(a); // 2\n```\n第一种形式中的函数表达式被包含在`()`中，然后在后面用另一个`()`括号来调用。\n第二种形式中用来调用的`()`括号被移进了用来包装的`()`的括号中。\n这两种形式在功能上是一致的\n\nIIFE的另一种用法：**把它们当作函数调用并传递参数进去**\n\n**例如：**\n\n```javascript\nvar a = 2;\n(function IIFE(global){\n  var a = 3;\n  console.log(a); // 3\n  console.log(global.a); // 2\n})(window);\nconsole.log(a); // 2\n```\n\n解决`undefined`标识符的默认值被错误覆盖导致的异常（并不常见）。\n将一个参数名为`undefined`，但是在对应的位置不传入任何值，这样就可以保证在代码中`undefined`标识符的值真的是`undefined`\n\n**请看下面的例子：**\n\n```javascript\nundefined = true;\n(function IIFE(){\n  var a; // undefined\n  if(a === undefined) {\n    console.log('Undefined is safe here!'); // Undefined is safe here!\n  }\n})();\n```\n**IIFE**还有一种变化的用途是倒置代码的运行顺序，将需要运行的函数放在第二位，当作`IIFE`执行之后的参数传递进去\n\n**请看下面的代码：**\n\n```javascript\nvar a = 2;\n(function (def){\n  def(window);\n})(function def(gobal){\n  var a = 3;\n  console.log(a); // 3\n  console.log(global.a); // 2 \n});\n```\n这里将函数表达式`def`定义在片段的第二部分，然后当作参数（这个参数也叫做`def`）被传递进`IIFE`函数定义的第一部分中，参数`def`（也就是传递进去的函数）被调用，并将`window`传入当作`global`参数的值。\n\n除了用`()`还有很多方法可以达到同样的目的\n\n```javascript\n// IIFE\nvar i = function () { return 10; }();\n\ntrue && function () { /* code */}();\n\n0, function () { /* code */ }();\n\n// IIFE\n~ (function (){ /* Code*/ })();\n// IIFE\n;(function (){ /* Code*/})();\n// IIFE\n+ (function (){ /* CodeE*/ })();\n// IIFEE\n! (function (){ /* Code */ })();\n// IIFEE\n- (function (){ /* Code */ })();\nvoid function () { /* Code */}();\n// new 关键字也能达到这个效果\nnew function () { /* Code */ };\nnew function () { /* Code */ }();\n```\n\n**为什么要使用`IIFE`，它解决了什么问题？**\n\n> 不必为函数命名，避免了污染全局变量；(封装一些外部无法读取的私有变量)\n> `IIFE` 内部形成了一个单独的作用域；(隔离作用域，在`ES6`之前`JavaScript`只有函数作用域，没有块级作用域)\n> 可以利用`IIFE`写`function`惰性载入\n\n```javascript\n// 写法一\nvar tmp = newData;\nprocessData(tmp);\nstoreData(tmp);\n\n// 写法二\n(function (){\n  var tmp = newData;\n  processData(tmp);\n  storeData(tmp);\n}());\n```\n\n上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。\n\n**请看下面的例子：**\n\n```javascript\n// 使用IIFE 获取时间，以年/月/日 时: 分: 秒的格式来赋给某个变量\nvar currTime = (function (){\n  var time = new Date();\n  var year = time.getFullYear();\n  var month = time.getMonth();\n  var date = time.getDate();\n  var hour = time.getHours();\n  var minute = time.getMinutes();\n  var sec = time.getSeconds();\n  return year + '/' + month + '/' + date + ' ' + hour + ':' + minute + ':' + sec;\n})();\nconsole.log(currTime);\n```\n\n## 参考链接\n\n> [Medium What is an IIFE in JavaScript?](https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174)\n> [JavaScript Immediately-invoked Function Expressions (IIFE)](https://flaviocopes.com/javascript-iife/)\n> [Mozilla Developer Network - IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)\n> [阮一峰-《JavaScript 标准参考教程（alpha）》](https://javascript.ruanyifeng.com/grammar/function.html#toc23)\n> [合理使用IIFE优化JS引擎的性能](https://zhuanlan.zhihu.com/p/23629542)\n","source":"_posts/2020-01-12-javascript-iife-immediately-invoked-function-expression-立即执行函数表达式.md","raw":"---\ntitle: JavaScript IIFE(Immediately Invoked Funtion Expression)立即执行函数表达式\ndate: 2020-01-12 22:32:22\ntags:\n  - 前端\n  - JavaScript\n  - Function\n  - IIFE\n  - 立即执行函数\n  - JavaScript 函数作用域\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n## IIFE (Immediately-Invoked Function Expression) 立即执行函数表达式\n\n**请看下面的例子：**\n\n```javascript\nvar a = 2;\n(function foo(c) {\n  var a = 3;\n  console.log(c); // 1\n  console.log(a); // 3\n})(b = 1)\nconsole.log(a); // 2\n```\n\n```javascript\n(function () {/* Code */}()); \n// 或者\n(function () {/* Code */})();\n```\n\n函数被包含在一对`()`内部，成为了一个表达式，再通过在末尾加上另一个`()`可以立即执行这个函数，比如：`(function foo(){ .. })()`。第一个`()`将函数变成表达式，第二个`()`执行了这个函数。\n\n这种函数表达式被社区成为：[**IIFE(Immediately Invoked Function Expresstion)，立即执行函数表达式**](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)\n\n**IIFE**的函数名不是必须的，**IIFE**最常见的用法是使用一个匿名函数表达式**。\n\n```javascript\nvar a = 2;\n(function IIFE() {\n  // IIFE\n  var a = 3;\n  console.log(a); // 3\n})();\nconsole.log(a); // 2\n```\n\n**IIFE**也可以用箭头函数：\n\n```javascript\nvar a = 2;\n(() => {\n  /* Code */\n  let a = 3;\n  console.log(a); // 3\n})();\nconsole.log(a); // 2\n```\n\n另一个改进的形式：`(function(){ /* Code */ }())`\n\n仔细观察下面两个的区别：\n```javascript\n// IIFE 写法一\nvar a = 2;\n(function IIFE(){\n  var a = 3;\n  console.log(a); // 3\n})();\nconsole.log(a); // 2\n\n// IIFE写法二\nvar a = 2;\n(function IIFE(){\n  var a = 3;\n  console.log(a); // 3\n}());\nconsole.log(a); // 2\n```\n第一种形式中的函数表达式被包含在`()`中，然后在后面用另一个`()`括号来调用。\n第二种形式中用来调用的`()`括号被移进了用来包装的`()`的括号中。\n这两种形式在功能上是一致的\n\nIIFE的另一种用法：**把它们当作函数调用并传递参数进去**\n\n**例如：**\n\n```javascript\nvar a = 2;\n(function IIFE(global){\n  var a = 3;\n  console.log(a); // 3\n  console.log(global.a); // 2\n})(window);\nconsole.log(a); // 2\n```\n\n解决`undefined`标识符的默认值被错误覆盖导致的异常（并不常见）。\n将一个参数名为`undefined`，但是在对应的位置不传入任何值，这样就可以保证在代码中`undefined`标识符的值真的是`undefined`\n\n**请看下面的例子：**\n\n```javascript\nundefined = true;\n(function IIFE(){\n  var a; // undefined\n  if(a === undefined) {\n    console.log('Undefined is safe here!'); // Undefined is safe here!\n  }\n})();\n```\n**IIFE**还有一种变化的用途是倒置代码的运行顺序，将需要运行的函数放在第二位，当作`IIFE`执行之后的参数传递进去\n\n**请看下面的代码：**\n\n```javascript\nvar a = 2;\n(function (def){\n  def(window);\n})(function def(gobal){\n  var a = 3;\n  console.log(a); // 3\n  console.log(global.a); // 2 \n});\n```\n这里将函数表达式`def`定义在片段的第二部分，然后当作参数（这个参数也叫做`def`）被传递进`IIFE`函数定义的第一部分中，参数`def`（也就是传递进去的函数）被调用，并将`window`传入当作`global`参数的值。\n\n除了用`()`还有很多方法可以达到同样的目的\n\n```javascript\n// IIFE\nvar i = function () { return 10; }();\n\ntrue && function () { /* code */}();\n\n0, function () { /* code */ }();\n\n// IIFE\n~ (function (){ /* Code*/ })();\n// IIFE\n;(function (){ /* Code*/})();\n// IIFE\n+ (function (){ /* CodeE*/ })();\n// IIFEE\n! (function (){ /* Code */ })();\n// IIFEE\n- (function (){ /* Code */ })();\nvoid function () { /* Code */}();\n// new 关键字也能达到这个效果\nnew function () { /* Code */ };\nnew function () { /* Code */ }();\n```\n\n**为什么要使用`IIFE`，它解决了什么问题？**\n\n> 不必为函数命名，避免了污染全局变量；(封装一些外部无法读取的私有变量)\n> `IIFE` 内部形成了一个单独的作用域；(隔离作用域，在`ES6`之前`JavaScript`只有函数作用域，没有块级作用域)\n> 可以利用`IIFE`写`function`惰性载入\n\n```javascript\n// 写法一\nvar tmp = newData;\nprocessData(tmp);\nstoreData(tmp);\n\n// 写法二\n(function (){\n  var tmp = newData;\n  processData(tmp);\n  storeData(tmp);\n}());\n```\n\n上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。\n\n**请看下面的例子：**\n\n```javascript\n// 使用IIFE 获取时间，以年/月/日 时: 分: 秒的格式来赋给某个变量\nvar currTime = (function (){\n  var time = new Date();\n  var year = time.getFullYear();\n  var month = time.getMonth();\n  var date = time.getDate();\n  var hour = time.getHours();\n  var minute = time.getMinutes();\n  var sec = time.getSeconds();\n  return year + '/' + month + '/' + date + ' ' + hour + ':' + minute + ':' + sec;\n})();\nconsole.log(currTime);\n```\n\n## 参考链接\n\n> [Medium What is an IIFE in JavaScript?](https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174)\n> [JavaScript Immediately-invoked Function Expressions (IIFE)](https://flaviocopes.com/javascript-iife/)\n> [Mozilla Developer Network - IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)\n> [阮一峰-《JavaScript 标准参考教程（alpha）》](https://javascript.ruanyifeng.com/grammar/function.html#toc23)\n> [合理使用IIFE优化JS引擎的性能](https://zhuanlan.zhihu.com/p/23629542)\n","slug":"javascript-iife-immediately-invoked-function-expression-立即执行函数表达式","published":1,"updated":"2020-01-14T01:56:09.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvuj000um5snaoci922g","content":"<h2 id=\"IIFE-Immediately-Invoked-Function-Expression-立即执行函数表达式\"><a href=\"#IIFE-Immediately-Invoked-Function-Expression-立即执行函数表达式\" class=\"headerlink\" title=\"IIFE (Immediately-Invoked Function Expression) 立即执行函数表达式\"></a>IIFE (Immediately-Invoked Function Expression) 立即执行函数表达式</h2><p><strong>请看下面的例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)(b = <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* Code */</span>&#125;()); </span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* Code */</span>&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>函数被包含在一对<code>()</code>内部，成为了一个表达式，再通过在末尾加上另一个<code>()</code>可以立即执行这个函数，比如：<code>(function foo(){ .. })()</code>。第一个<code>()</code>将函数变成表达式，第二个<code>()</code>执行了这个函数。</p>\n<p>这种函数表达式被社区成为：<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\" target=\"_blank\" rel=\"noopener\"><strong>IIFE(Immediately Invoked Function Expresstion)，立即执行函数表达式</strong></a></p>\n<p><strong>IIFE</strong>的函数名不是必须的，<strong>IIFE</strong>最常见的用法是使用一个匿名函数表达式**。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// IIFE</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>IIFE</strong>也可以用箭头函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Code */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>另一个改进的形式：<code>(function(){ /* Code */ }())</code></p>\n<p>仔细观察下面两个的区别：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IIFE写法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>第一种形式中的函数表达式被包含在<code>()</code>中，然后在后面用另一个<code>()</code>括号来调用。<br>第二种形式中用来调用的<code>()</code>括号被移进了用来包装的<code>()</code>的括号中。<br>这两种形式在功能上是一致的</p>\n<p>IIFE的另一种用法：<strong>把它们当作函数调用并传递参数进去</strong></p>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\">global</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(global.a); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>解决<code>undefined</code>标识符的默认值被错误覆盖导致的异常（并不常见）。<br>将一个参数名为<code>undefined</code>，但是在对应的位置不传入任何值，这样就可以保证在代码中<code>undefined</code>标识符的值真的是<code>undefined</code></p>\n<p><strong>请看下面的例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a; <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Undefined is safe here!'</span>); <span class=\"comment\">// Undefined is safe here!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p><strong>IIFE</strong>还有一种变化的用途是倒置代码的运行顺序，将需要运行的函数放在第二位，当作<code>IIFE</code>执行之后的参数传递进去</p>\n<p><strong>请看下面的代码：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">def</span>)</span>&#123;</span><br><span class=\"line\">  def(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">&#125;)(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">def</span>(<span class=\"params\">gobal</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(global.a); <span class=\"comment\">// 2 </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里将函数表达式<code>def</code>定义在片段的第二部分，然后当作参数（这个参数也叫做<code>def</code>）被传递进<code>IIFE</code>函数定义的第一部分中，参数<code>def</code>（也就是传递进去的函数）被调用，并将<code>window</code>传入当作<code>global</code>参数的值。</p>\n<p>除了用<code>()</code>还有很多方法可以达到同样的目的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">10</span>; &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span>&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\">~ (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* Code*/</span> &#125;)();</span><br><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* Code*/</span>&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\">+ (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* CodeE*/</span> &#125;)();</span><br><span class=\"line\"><span class=\"comment\">// IIFEE</span></span><br><span class=\"line\">! (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* Code */</span> &#125;)();</span><br><span class=\"line\"><span class=\"comment\">// IIFEE</span></span><br><span class=\"line\">- (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* Code */</span> &#125;)();</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* Code */</span>&#125;();</span><br><span class=\"line\"><span class=\"comment\">// new 关键字也能达到这个效果</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* Code */</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* Code */</span> &#125;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么要使用<code>IIFE</code>，它解决了什么问题？</strong></p>\n<blockquote>\n<p>不必为函数命名，避免了污染全局变量；(封装一些外部无法读取的私有变量)<br><code>IIFE</code> 内部形成了一个单独的作用域；(隔离作用域，在<code>ES6</code>之前<code>JavaScript</code>只有函数作用域，没有块级作用域)<br>可以利用<code>IIFE</code>写<code>function</code>惰性载入</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tmp = newData;</span><br><span class=\"line\">processData(tmp);</span><br><span class=\"line\">storeData(tmp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = newData;</span><br><span class=\"line\">  processData(tmp);</span><br><span class=\"line\">  storeData(tmp);</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。</p>\n<p><strong>请看下面的例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用IIFE 获取时间，以年/月/日 时: 分: 秒的格式来赋给某个变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currTime = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> year = time.getFullYear();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> month = time.getMonth();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> date = time.getDate();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hour = time.getHours();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> minute = time.getMinutes();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sec = time.getSeconds();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> year + <span class=\"string\">'/'</span> + month + <span class=\"string\">'/'</span> + date + <span class=\"string\">' '</span> + hour + <span class=\"string\">':'</span> + minute + <span class=\"string\">':'</span> + sec;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(currTime);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174\" target=\"_blank\" rel=\"noopener\">Medium What is an IIFE in JavaScript?</a><br><a href=\"https://flaviocopes.com/javascript-iife/\" target=\"_blank\" rel=\"noopener\">JavaScript Immediately-invoked Function Expressions (IIFE)</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\" target=\"_blank\" rel=\"noopener\">Mozilla Developer Network - IIFE</a><br><a href=\"https://javascript.ruanyifeng.com/grammar/function.html#toc23\" target=\"_blank\" rel=\"noopener\">阮一峰-《JavaScript 标准参考教程（alpha）》</a><br><a href=\"https://zhuanlan.zhihu.com/p/23629542\" target=\"_blank\" rel=\"noopener\">合理使用IIFE优化JS引擎的性能</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"IIFE-Immediately-Invoked-Function-Expression-立即执行函数表达式\"><a href=\"#IIFE-Immediately-Invoked-Function-Expression-立即执行函数表达式\" class=\"headerlink\" title=\"IIFE (Immediately-Invoked Function Expression) 立即执行函数表达式\"></a>IIFE (Immediately-Invoked Function Expression) 立即执行函数表达式</h2><p><strong>请看下面的例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)(b = <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* Code */</span>&#125;()); </span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* Code */</span>&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>函数被包含在一对<code>()</code>内部，成为了一个表达式，再通过在末尾加上另一个<code>()</code>可以立即执行这个函数，比如：<code>(function foo(){ .. })()</code>。第一个<code>()</code>将函数变成表达式，第二个<code>()</code>执行了这个函数。</p>\n<p>这种函数表达式被社区成为：<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\" target=\"_blank\" rel=\"noopener\"><strong>IIFE(Immediately Invoked Function Expresstion)，立即执行函数表达式</strong></a></p>\n<p><strong>IIFE</strong>的函数名不是必须的，<strong>IIFE</strong>最常见的用法是使用一个匿名函数表达式**。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// IIFE</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>IIFE</strong>也可以用箭头函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Code */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>另一个改进的形式：<code>(function(){ /* Code */ }())</code></p>\n<p>仔细观察下面两个的区别：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IIFE写法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>第一种形式中的函数表达式被包含在<code>()</code>中，然后在后面用另一个<code>()</code>括号来调用。<br>第二种形式中用来调用的<code>()</code>括号被移进了用来包装的<code>()</code>的括号中。<br>这两种形式在功能上是一致的</p>\n<p>IIFE的另一种用法：<strong>把它们当作函数调用并传递参数进去</strong></p>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\">global</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(global.a); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>解决<code>undefined</code>标识符的默认值被错误覆盖导致的异常（并不常见）。<br>将一个参数名为<code>undefined</code>，但是在对应的位置不传入任何值，这样就可以保证在代码中<code>undefined</code>标识符的值真的是<code>undefined</code></p>\n<p><strong>请看下面的例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a; <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Undefined is safe here!'</span>); <span class=\"comment\">// Undefined is safe here!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p><strong>IIFE</strong>还有一种变化的用途是倒置代码的运行顺序，将需要运行的函数放在第二位，当作<code>IIFE</code>执行之后的参数传递进去</p>\n<p><strong>请看下面的代码：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">def</span>)</span>&#123;</span><br><span class=\"line\">  def(<span class=\"built_in\">window</span>);</span><br><span class=\"line\">&#125;)(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">def</span>(<span class=\"params\">gobal</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(global.a); <span class=\"comment\">// 2 </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里将函数表达式<code>def</code>定义在片段的第二部分，然后当作参数（这个参数也叫做<code>def</code>）被传递进<code>IIFE</code>函数定义的第一部分中，参数<code>def</code>（也就是传递进去的函数）被调用，并将<code>window</code>传入当作<code>global</code>参数的值。</p>\n<p>除了用<code>()</code>还有很多方法可以达到同样的目的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">10</span>; &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span>&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\">~ (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* Code*/</span> &#125;)();</span><br><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* Code*/</span>&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\">+ (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* CodeE*/</span> &#125;)();</span><br><span class=\"line\"><span class=\"comment\">// IIFEE</span></span><br><span class=\"line\">! (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* Code */</span> &#125;)();</span><br><span class=\"line\"><span class=\"comment\">// IIFEE</span></span><br><span class=\"line\">- (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* Code */</span> &#125;)();</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* Code */</span>&#125;();</span><br><span class=\"line\"><span class=\"comment\">// new 关键字也能达到这个效果</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* Code */</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* Code */</span> &#125;();</span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么要使用<code>IIFE</code>，它解决了什么问题？</strong></p>\n<blockquote>\n<p>不必为函数命名，避免了污染全局变量；(封装一些外部无法读取的私有变量)<br><code>IIFE</code> 内部形成了一个单独的作用域；(隔离作用域，在<code>ES6</code>之前<code>JavaScript</code>只有函数作用域，没有块级作用域)<br>可以利用<code>IIFE</code>写<code>function</code>惰性载入</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tmp = newData;</span><br><span class=\"line\">processData(tmp);</span><br><span class=\"line\">storeData(tmp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = newData;</span><br><span class=\"line\">  processData(tmp);</span><br><span class=\"line\">  storeData(tmp);</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。</p>\n<p><strong>请看下面的例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用IIFE 获取时间，以年/月/日 时: 分: 秒的格式来赋给某个变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currTime = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> year = time.getFullYear();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> month = time.getMonth();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> date = time.getDate();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hour = time.getHours();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> minute = time.getMinutes();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sec = time.getSeconds();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> year + <span class=\"string\">'/'</span> + month + <span class=\"string\">'/'</span> + date + <span class=\"string\">' '</span> + hour + <span class=\"string\">':'</span> + minute + <span class=\"string\">':'</span> + sec;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(currTime);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174\" target=\"_blank\" rel=\"noopener\">Medium What is an IIFE in JavaScript?</a><br><a href=\"https://flaviocopes.com/javascript-iife/\" target=\"_blank\" rel=\"noopener\">JavaScript Immediately-invoked Function Expressions (IIFE)</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\" target=\"_blank\" rel=\"noopener\">Mozilla Developer Network - IIFE</a><br><a href=\"https://javascript.ruanyifeng.com/grammar/function.html#toc23\" target=\"_blank\" rel=\"noopener\">阮一峰-《JavaScript 标准参考教程（alpha）》</a><br><a href=\"https://zhuanlan.zhihu.com/p/23629542\" target=\"_blank\" rel=\"noopener\">合理使用IIFE优化JS引擎的性能</a></p>\n</blockquote>\n"},{"title":"JavaScript长字符串拆分并换行处理","date":"2020-02-28T17:45:16.000Z","_content":"\n\n# JavaScript 如何将一个长段字符串进行拆分并换行？\n\n**如：**\n\n```javascript\nlet str = '这是一个很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串';\n```\n\n**解决方案：**\n\n利用 `<br/>` 进行换行\n```javascript\nvar reg = new RegExp(' ', '\\g');\n    str = str.replace(reg, '<br />');\n    console.log(str);\n```\n\n**整体思路：**\n1、利用`split()`进行切割，占位符( )\n2、遍历切割后的数组\n3、[splice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)将切分后的数组拼接换行符再拼接完整的字符串\n\n## 参考链接\n\n+ [*怎么用JavaScript拆分字符串并换行*](https://segmentfault.com/q/1010000012225245)\n+ [*怎么用JavaScript拆分字符串并换行*](http://www.imooc.com/wenda/detail/501889)\n+ [*MDN-Array.prototype.splice()*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n","source":"_posts/2020-02-29-JavaScript长字符串拆分并换行处理.md","raw":"---\ntitle: JavaScript长字符串拆分并换行处理\ndate: 2020-02-29 01:45:16\ntags:\n  - 前端\n  - JavaScript\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n\n# JavaScript 如何将一个长段字符串进行拆分并换行？\n\n**如：**\n\n```javascript\nlet str = '这是一个很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串';\n```\n\n**解决方案：**\n\n利用 `<br/>` 进行换行\n```javascript\nvar reg = new RegExp(' ', '\\g');\n    str = str.replace(reg, '<br />');\n    console.log(str);\n```\n\n**整体思路：**\n1、利用`split()`进行切割，占位符( )\n2、遍历切割后的数组\n3、[splice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)将切分后的数组拼接换行符再拼接完整的字符串\n\n## 参考链接\n\n+ [*怎么用JavaScript拆分字符串并换行*](https://segmentfault.com/q/1010000012225245)\n+ [*怎么用JavaScript拆分字符串并换行*](http://www.imooc.com/wenda/detail/501889)\n+ [*MDN-Array.prototype.splice()*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n","slug":"JavaScript长字符串拆分并换行处理","published":1,"updated":"2020-04-08T11:47:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvuo000vm5snge631zev","content":"<h1 id=\"JavaScript-如何将一个长段字符串进行拆分并换行？\"><a href=\"#JavaScript-如何将一个长段字符串进行拆分并换行？\" class=\"headerlink\" title=\"JavaScript 如何将一个长段字符串进行拆分并换行？\"></a>JavaScript 如何将一个长段字符串进行拆分并换行？</h1><p><strong>如：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'这是一个很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串'</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方案：</strong></p>\n<p>利用 <code>&lt;br/&gt;</code> 进行换行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">' '</span>, <span class=\"string\">'\\g'</span>);</span><br><span class=\"line\">    str = str.replace(reg, <span class=\"string\">'&lt;br /&gt;'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<p><strong>整体思路：</strong><br>1、利用<code>split()</code>进行切割，占位符( )<br>2、遍历切割后的数组<br>3、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\" rel=\"noopener\">splice</a>将切分后的数组拼接换行符再拼接完整的字符串</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://segmentfault.com/q/1010000012225245\" target=\"_blank\" rel=\"noopener\"><em>怎么用JavaScript拆分字符串并换行</em></a></li>\n<li><a href=\"http://www.imooc.com/wenda/detail/501889\" target=\"_blank\" rel=\"noopener\"><em>怎么用JavaScript拆分字符串并换行</em></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\" rel=\"noopener\"><em>MDN-Array.prototype.splice()</em></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript-如何将一个长段字符串进行拆分并换行？\"><a href=\"#JavaScript-如何将一个长段字符串进行拆分并换行？\" class=\"headerlink\" title=\"JavaScript 如何将一个长段字符串进行拆分并换行？\"></a>JavaScript 如何将一个长段字符串进行拆分并换行？</h1><p><strong>如：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'这是一个很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串 很长很长的字符串'</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方案：</strong></p>\n<p>利用 <code>&lt;br/&gt;</code> 进行换行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">' '</span>, <span class=\"string\">'\\g'</span>);</span><br><span class=\"line\">    str = str.replace(reg, <span class=\"string\">'&lt;br /&gt;'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n\n<p><strong>整体思路：</strong><br>1、利用<code>split()</code>进行切割，占位符( )<br>2、遍历切割后的数组<br>3、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\" rel=\"noopener\">splice</a>将切分后的数组拼接换行符再拼接完整的字符串</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://segmentfault.com/q/1010000012225245\" target=\"_blank\" rel=\"noopener\"><em>怎么用JavaScript拆分字符串并换行</em></a></li>\n<li><a href=\"http://www.imooc.com/wenda/detail/501889\" target=\"_blank\" rel=\"noopener\"><em>怎么用JavaScript拆分字符串并换行</em></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\" rel=\"noopener\"><em>MDN-Array.prototype.splice()</em></a></li>\n</ul>\n"},{"title":"CSS文本换行、不换行、超出部分显示省略号处理","date":"2020-04-10T09:12:55.000Z","_content":"\n**CSS实现不换行、自动换行、强制换行**\n```scss\n// 自动换行\n.summary {\n word-wrap: break-word;\n word-break: normal;\n}\n\n// 强制不换行\n.summary {\n  white-space: nowrap;\n}\n\n// 强制英文单词换行\n.summary {\n  word-break: break-all;\n}\n```\n\n**CSS实现超出部分显示省略号**\n```scss\n// 单行文本不换行多余文本显示省略号\n.summary {\n  width: 200px; // For Element Width\n  white-space: nowrap; // 规定段落中的文本不进行换行\n  overflow: hidden; // 超出部分隐藏\n  text-overflow: ellipsis; // 超出部分显示省略号\n}\n\n// 多行文本超出隐藏多余文本显示省略号\n.summary {\n  display: -webkit-box; // 将对象作为弹性伸缩盒子模型显示  *必须结合的属性*\n  overflow: hidden; // 超出部分隐藏\n  text-overflow: ellipsis; // 超出部分显示省略号\n  -webkit-line-clamp: 3; // 用来限制在一个块元素中显示的文本的行数\n  -webkit-box-orient: vertical; // 设置伸缩盒对象的子元素的排列方式  *必须结合的属性*\n  word-break: break-all; // 让浏览器实现在任意位置的换行 *break-all为允许在单词内换行*\n}\n```\n\n**table表格中单元格单行文本不换行**\n```scss\n// table表格中单元格单行文本不换行\n  table {\n   table-layout: fixed;\n   tr {\n     td {\n        width: 60%;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n     }\n   }\n}\n```\n\n## 参考链接\n> [*CSS实现不换行/自动换行/文本超出隐藏显示省略号*](https://www.cnblogs.com/coolsboy/p/11495836.html)\n","source":"_posts/2020-04-10-CSS文本换行、不换行、超出部分显示省略号处理.md","raw":"---\ntitle: CSS文本换行、不换行、超出部分显示省略号处理\ndate: 2020-04-10 17:12:55\ntags:\n  - 前端开发\n  - CSS\n  - CSS 文本换行\n  - CSS 不换行\n  - CSS 超出部分显示省略号\ncategory:\n- [CSS]\n---\n\n**CSS实现不换行、自动换行、强制换行**\n```scss\n// 自动换行\n.summary {\n word-wrap: break-word;\n word-break: normal;\n}\n\n// 强制不换行\n.summary {\n  white-space: nowrap;\n}\n\n// 强制英文单词换行\n.summary {\n  word-break: break-all;\n}\n```\n\n**CSS实现超出部分显示省略号**\n```scss\n// 单行文本不换行多余文本显示省略号\n.summary {\n  width: 200px; // For Element Width\n  white-space: nowrap; // 规定段落中的文本不进行换行\n  overflow: hidden; // 超出部分隐藏\n  text-overflow: ellipsis; // 超出部分显示省略号\n}\n\n// 多行文本超出隐藏多余文本显示省略号\n.summary {\n  display: -webkit-box; // 将对象作为弹性伸缩盒子模型显示  *必须结合的属性*\n  overflow: hidden; // 超出部分隐藏\n  text-overflow: ellipsis; // 超出部分显示省略号\n  -webkit-line-clamp: 3; // 用来限制在一个块元素中显示的文本的行数\n  -webkit-box-orient: vertical; // 设置伸缩盒对象的子元素的排列方式  *必须结合的属性*\n  word-break: break-all; // 让浏览器实现在任意位置的换行 *break-all为允许在单词内换行*\n}\n```\n\n**table表格中单元格单行文本不换行**\n```scss\n// table表格中单元格单行文本不换行\n  table {\n   table-layout: fixed;\n   tr {\n     td {\n        width: 60%;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n     }\n   }\n}\n```\n\n## 参考链接\n> [*CSS实现不换行/自动换行/文本超出隐藏显示省略号*](https://www.cnblogs.com/coolsboy/p/11495836.html)\n","slug":"CSS文本换行、不换行、超出部分显示省略号处理","published":1,"updated":"2020-06-25T06:08:01.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvur000xm5sn82ah28fd","content":"<p><strong>CSS实现不换行、自动换行、强制换行</strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动换行</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\"> <span class=\"attribute\">word-break</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强制不换行</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强制英文单词换行</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>CSS实现超出部分显示省略号</strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行文本不换行多余文本显示省略号</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; <span class=\"comment\">// For Element Width</span></span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap; <span class=\"comment\">// 规定段落中的文本不进行换行</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">// 超出部分隐藏</span></span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis; <span class=\"comment\">// 超出部分显示省略号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多行文本超出隐藏多余文本显示省略号</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box; <span class=\"comment\">// 将对象作为弹性伸缩盒子模型显示  *必须结合的属性*</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">// 超出部分隐藏</span></span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis; <span class=\"comment\">// 超出部分显示省略号</span></span><br><span class=\"line\">  -webkit-line-clamp: <span class=\"number\">3</span>; <span class=\"comment\">// 用来限制在一个块元素中显示的文本的行数</span></span><br><span class=\"line\">  -webkit-box-orient: vertical; <span class=\"comment\">// 设置伸缩盒对象的子元素的排列方式  *必须结合的属性*</span></span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all; <span class=\"comment\">// 让浏览器实现在任意位置的换行 *break-all为允许在单词内换行*</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>table表格中单元格单行文本不换行</strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// table表格中单元格单行文本不换行</span></span><br><span class=\"line\">  <span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">   <span class=\"selector-tag\">table</span>-layout: fixed;</span><br><span class=\"line\">   <span class=\"selector-tag\">tr</span> &#123;</span><br><span class=\"line\">     <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">        <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/coolsboy/p/11495836.html\" target=\"_blank\" rel=\"noopener\"><em>CSS实现不换行/自动换行/文本超出隐藏显示省略号</em></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>CSS实现不换行、自动换行、强制换行</strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动换行</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\"> <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\"> <span class=\"attribute\">word-break</span>: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强制不换行</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 强制英文单词换行</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>CSS实现超出部分显示省略号</strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行文本不换行多余文本显示省略号</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; <span class=\"comment\">// For Element Width</span></span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap; <span class=\"comment\">// 规定段落中的文本不进行换行</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">// 超出部分隐藏</span></span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis; <span class=\"comment\">// 超出部分显示省略号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多行文本超出隐藏多余文本显示省略号</span></span><br><span class=\"line\"><span class=\"selector-class\">.summary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box; <span class=\"comment\">// 将对象作为弹性伸缩盒子模型显示  *必须结合的属性*</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; <span class=\"comment\">// 超出部分隐藏</span></span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis; <span class=\"comment\">// 超出部分显示省略号</span></span><br><span class=\"line\">  -webkit-line-clamp: <span class=\"number\">3</span>; <span class=\"comment\">// 用来限制在一个块元素中显示的文本的行数</span></span><br><span class=\"line\">  -webkit-box-orient: vertical; <span class=\"comment\">// 设置伸缩盒对象的子元素的排列方式  *必须结合的属性*</span></span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all; <span class=\"comment\">// 让浏览器实现在任意位置的换行 *break-all为允许在单词内换行*</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>table表格中单元格单行文本不换行</strong></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// table表格中单元格单行文本不换行</span></span><br><span class=\"line\">  <span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">   <span class=\"selector-tag\">table</span>-layout: fixed;</span><br><span class=\"line\">   <span class=\"selector-tag\">tr</span> &#123;</span><br><span class=\"line\">     <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">        <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/coolsboy/p/11495836.html\" target=\"_blank\" rel=\"noopener\"><em>CSS实现不换行/自动换行/文本超出隐藏显示省略号</em></a></p>\n</blockquote>\n"},{"title":"EcmaScript 6 Arrow Function (箭头函数)","date":"2020-06-25T06:00:52.000Z","_content":"\n## 基本语法\n\nES6 允许使用“箭头”（`=>`）定义函数\n```javascript\nvar f = v => v;\n\n// 等同于\nvar f = function (v) {\n return v;\n};\n\n```\n\n如果箭头函数不需要参数或需要多个参数，使用一个圆括号代表参数部分\n```javascript\nvar f = () => 5;\n// 等同于\nvar f = function () { return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function (num1, num2) {\n  return num1 + num2;\n};\n```\n\n## 箭头函数（arrow function）和普通函数(function)的区别？\n\n1、语法更加简洁、清晰\n2、箭头函数不会创建自己的`this`\n> 箭头函数不会创建自己的this，所以它没有自己的this，它只会从自己的作用域链的上一层继承this。\n\n3、箭头函数继承而来的`this`指向永远不变\n4、`.call()`/`.apply()`/`.bind()`无法改变箭头函数中`this`的指向\n5、箭头函数不能作为构造函数使用\n```javascript\nvar Foo = () => {};\nvar foo = new Foo(); // TypeError: Foo is not a constructor\n```\n\n6、箭头函数没有自己的`arguments`\n> 箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。\n\n7、箭头函数没有原型`Prototype`，即指向`undefined`；\n```javascript\nvar Foo = () => {};\nconsole.log(Foo.prototype); // undefined\n```\n8、箭头函数不能用作`Generator`函数，不能使用`yeild`关键字\n9、不绑定 `super` 和 `new.target`;\n","source":"_posts/2020-06-25-ES6箭头函数.md","raw":"---\ntitle: EcmaScript 6 Arrow Function (箭头函数)\ndate: 2020-06-25 14:00:52\ntags:\n- 前端\n- 前端基础\n- JavaScript\n- JavaScript 基础\n- ES6\n- arrow function expressions\n- JavaScript\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n## 基本语法\n\nES6 允许使用“箭头”（`=>`）定义函数\n```javascript\nvar f = v => v;\n\n// 等同于\nvar f = function (v) {\n return v;\n};\n\n```\n\n如果箭头函数不需要参数或需要多个参数，使用一个圆括号代表参数部分\n```javascript\nvar f = () => 5;\n// 等同于\nvar f = function () { return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function (num1, num2) {\n  return num1 + num2;\n};\n```\n\n## 箭头函数（arrow function）和普通函数(function)的区别？\n\n1、语法更加简洁、清晰\n2、箭头函数不会创建自己的`this`\n> 箭头函数不会创建自己的this，所以它没有自己的this，它只会从自己的作用域链的上一层继承this。\n\n3、箭头函数继承而来的`this`指向永远不变\n4、`.call()`/`.apply()`/`.bind()`无法改变箭头函数中`this`的指向\n5、箭头函数不能作为构造函数使用\n```javascript\nvar Foo = () => {};\nvar foo = new Foo(); // TypeError: Foo is not a constructor\n```\n\n6、箭头函数没有自己的`arguments`\n> 箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。\n\n7、箭头函数没有原型`Prototype`，即指向`undefined`；\n```javascript\nvar Foo = () => {};\nconsole.log(Foo.prototype); // undefined\n```\n8、箭头函数不能用作`Generator`函数，不能使用`yeild`关键字\n9、不绑定 `super` 和 `new.target`;\n","slug":"ES6箭头函数","published":1,"updated":"2020-07-07T06:09:49.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvuv000zm5snex7behqd","content":"<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>ES6 允许使用“箭头”（<code>=&gt;</code>）定义函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果箭头函数不需要参数或需要多个参数，使用一个圆括号代表参数部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数（arrow-function）和普通函数-function-的区别？\"><a href=\"#箭头函数（arrow-function）和普通函数-function-的区别？\" class=\"headerlink\" title=\"箭头函数（arrow function）和普通函数(function)的区别？\"></a>箭头函数（arrow function）和普通函数(function)的区别？</h2><p>1、语法更加简洁、清晰<br>2、箭头函数不会创建自己的<code>this</code></p>\n<blockquote>\n<p>箭头函数不会创建自己的this，所以它没有自己的this，它只会从自己的作用域链的上一层继承this。</p>\n</blockquote>\n<p>3、箭头函数继承而来的<code>this</code>指向永远不变<br>4、<code>.call()</code>/<code>.apply()</code>/<code>.bind()</code>无法改变箭头函数中<code>this</code>的指向<br>5、箭头函数不能作为构造函数使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo(); <span class=\"comment\">// TypeError: Foo is not a constructor</span></span><br></pre></td></tr></table></figure>\n\n<p>6、箭头函数没有自己的<code>arguments</code></p>\n<blockquote>\n<p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。</p>\n</blockquote>\n<p>7、箭头函数没有原型<code>Prototype</code>，即指向<code>undefined</code>；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo.prototype); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>8、箭头函数不能用作<code>Generator</code>函数，不能使用<code>yeild</code>关键字<br>9、不绑定 <code>super</code> 和 <code>new.target</code>;</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>ES6 允许使用“箭头”（<code>=&gt;</code>）定义函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果箭头函数不需要参数或需要多个参数，使用一个圆括号代表参数部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数（arrow-function）和普通函数-function-的区别？\"><a href=\"#箭头函数（arrow-function）和普通函数-function-的区别？\" class=\"headerlink\" title=\"箭头函数（arrow function）和普通函数(function)的区别？\"></a>箭头函数（arrow function）和普通函数(function)的区别？</h2><p>1、语法更加简洁、清晰<br>2、箭头函数不会创建自己的<code>this</code></p>\n<blockquote>\n<p>箭头函数不会创建自己的this，所以它没有自己的this，它只会从自己的作用域链的上一层继承this。</p>\n</blockquote>\n<p>3、箭头函数继承而来的<code>this</code>指向永远不变<br>4、<code>.call()</code>/<code>.apply()</code>/<code>.bind()</code>无法改变箭头函数中<code>this</code>的指向<br>5、箭头函数不能作为构造函数使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo(); <span class=\"comment\">// TypeError: Foo is not a constructor</span></span><br></pre></td></tr></table></figure>\n\n<p>6、箭头函数没有自己的<code>arguments</code></p>\n<blockquote>\n<p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。</p>\n</blockquote>\n<p>7、箭头函数没有原型<code>Prototype</code>，即指向<code>undefined</code>；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Foo.prototype); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>8、箭头函数不能用作<code>Generator</code>函数，不能使用<code>yeild</code>关键字<br>9、不绑定 <code>super</code> 和 <code>new.target</code>;</p>\n"},{"title":"JavaScript实现斐波那契数列的几种方式","date":"2020-06-26T05:47:58.000Z","_content":"\n## 什么是斐波那契？\n\n### 斐波那契数列\n\n> 斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：`F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n≥3，n ∈ N*）`(来自——[百度百科](https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145?fr=aladdin))\n>\n> 在数学上，斐波那契数列是以递归的方式来定义,斐波那契數列由0和1開始，之後的斐波那契數就是由之前的兩數相加而得出。首幾個斐波那契數是：`0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……`（来自——[WikiPedia维基百科](https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97)）\n\n```javascript\n// 数学计算等式如下\nF0 = 0;\nF1 = 1;\nFn = (Fn-1) + (Fn-2) // (n>= 2)\n```\n\n**类似于以下的数列：**\n> 1, 1, 2, 3, 5, 8, 13, ....\n\n伪代码表示，第n个数由数列的前两个相加而来：`f(n) = f(n - 1) + f(n -2)`\n\n## 斐波那契数列的实现\n\n### 递归实现\n\n```javascript\n// 递归实现\nlet fibonacciNum = (n) {\n  if (n < = 2) {\n    return 1;\n  }\n  return fibonacciNum(n-1) + fibonacciNum(n-2);\n};\n// 递归层数越来越深容易递归爆栈=\n```\n- 优点：代码量少，容易理解\n- 缺点：当n较大时很快产生栈溢出，引发原因是“调用帧”过多\n\n### 空间换时间的处理方式\n\n**利用闭包实现缓存**\n```javascript\n// 闭包 + 缓存数组\nconst fibonacci2 = (function() {\n  const f = [0];\n  return function(n) {\n    if(f[n] !== undefined) return f[n];\n    return f[n] = ( n === 1 || n === 2 ? 1 : fibonacci2(n-1) + fibonacci2(n-2))\n  }\n})()\n```\n- 优点：\n- 缺点：会增加额外的消耗，比如直接计算 `fibonacci(1000)` ,这个时候数组中会先初始化中间的其他数组项为 `undefined` 这里会小一些时间，但是计算完毕之后`1-1000`之间的斐波那契数列都填充完毕了。\n\n**用对象替换数组来进行缓存**\n\n```javascript\n// 闭包 + 缓存对象\n// 减少了填充 undefined 的时间\nconst fibonacci = (function (){\n  const f = {};\n  return function (n) {\n    if ( n === 0 || n === 1) {\n      return n;\n    }\n    if (f[n-2] === undefined) {\n      f[n-2] = fibonacci(n-2);\n    }\n    if (f[n-1] === undefined) {\n      f[n-1] = fibonacci(n-1);\n    }\n    return f[n] = f[n-1] + f[n-2];\n  }\n})()\n```\n\n**函数属性实现**\n> 将缓存作为函数的属性，减少闭包的使用；缓存逻辑和业务逻辑不混合使用，添加函数属性的方式会让程序的理解变为复杂。\n\n```javascript\nconst fibonacci = (n) => {\n  // 创建缓存\n  if (!fibonacci.f) {fibonacci.f = {}};\n  // 计算\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  if (fibonacci.f[n-2] === undefined) {\n    fibnoacci.f[n-2] = fibonacci(n-2);\n  }\n  if (fibonacci.f[n-1] === undefined) {\n    fibnoacci.f[n-1] = fibonacci(n-1);\n  }\n  return fibonacci.f[n] = fibonacci.f[n-1] + fibonacci.f[n-2];\n}\n```\n总结：使用空间换时间的好处能够复用之前的计算结果，提升性能，减少计算代价；但是这种方式难以做负载测试和算法复杂度评估，因为输出结果依赖之前的输入。\n\n### 尾递归优化\n\n> 尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，就是指某个函数的最后一步是调用另一个函数。\n\n当计算的数值较大时会出现递归爆栈的现象，有一种解决办法就是尾递归。但这种方法需改写函数的参数，将结算结果作为参数传递下去，在实际使用的使用的时候没什么问题修改接口就行。尾递归优化可参考：[ruanyifeng-尾调用优化](https://ruanyifeng.com/blog/2015/04/tail-call.html)\n\n```javascript\nfunction fibonacci(n, n1, n2) {\n  if (n <= 1) {\n    return n2;\n  }\n  return fibonacci(n-1, n2, n1 + n2);\n}\n```\n\n### 递推\n\n递归算法中我们获取某一项的值时是从后一步步往前推，现在我们换成从前往后推，即递推。既然三项中的前两项相加等于第三项，写成表达式就是`res[i-2] + res[i-1] = res[i]`\n\n**for循环**\n\n```javascript\nlet fib = function(n) {\n  if(n <= 2) {\n    return 1\n  }\n  let sum = 0\n  let prev = 1\n  let next = 1\n  for(let i = 3; i <= n; i++) {\n    sum = prev + next;\n    prev = next;\n    next = sum;\n  }\n  return sum;\n}\n```\n\n**while循环**\n```javascript\nlet fib = function(n) {\n  let i = 2\n  let res = [0,1,1]\n  while(i <= n) {\n      res[i] = res[i - 1] + res[i - 2]\n      i++\n  }\n  return res[n]\n}\n```\n\n### 其他方法收集\n\n**采用解构赋值**\n```javascript\nconst fibonacci = (n) => {\n  let a = 0;\n  let b = 1;\n  let i = 1;\n  while (i++ <=n) {\n    [a, b] = [b, a+b]\n  }\n  return a;\n}\n```\n\n**闭包实现**\n```javascript\nconst fibonacci=((s) => (f=(i) => s[i] || (s[i]=f(i-1)+f(i-2))))([0,1,1])\n```\n\n**ES6 `reduce()`实现**\n```javascript\nconst fibonacci = n => [...Array(n)].reduce(\n  (acc, val, i) => acc.concat(\n    i > 1 ? acc[i - 1] + acc[i - 2] : i\n  ), []\n)\n```\n\n## 参考链接\n\n> [记忆化斐波那契函数的思考（JavaScript）](https://juejin.im/post/5df1b02d51882512561b6c63)\n> [斐波那契数列的js实现](https://juejin.im/post/5eec2840f265da02b80e0373)\n> [Fibonacci series in JavaScript](https://stackoverflow.com/questions/51111870/fibonacci-series-in-javascript/51111896)\n> [ruanyifeng-尾调用优化](https://ruanyifeng.com/blog/2015/04/tail-call.html)\n> [leetcode-斐波那契数列](https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/xun-huan-fa-bei-wang-lu-javascriptda-shu-shi-xian-/)\n","source":"_posts/2020-06-26-JavaScript实现斐波那契数列的几种方式.md","raw":"---\ntitle: JavaScript实现斐波那契数列的几种方式\ndate: 2020-06-26 13:47:58\ntags:\n- 前端\n- 前端基础\n- ES6\n- JavaScript 算法\n- JavaScript 基础\ncategory:\n- [前端]\n- [前端算法]\n- [JavaScript]\n---\n\n## 什么是斐波那契？\n\n### 斐波那契数列\n\n> 斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：`F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n≥3，n ∈ N*）`(来自——[百度百科](https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145?fr=aladdin))\n>\n> 在数学上，斐波那契数列是以递归的方式来定义,斐波那契數列由0和1開始，之後的斐波那契數就是由之前的兩數相加而得出。首幾個斐波那契數是：`0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……`（来自——[WikiPedia维基百科](https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97)）\n\n```javascript\n// 数学计算等式如下\nF0 = 0;\nF1 = 1;\nFn = (Fn-1) + (Fn-2) // (n>= 2)\n```\n\n**类似于以下的数列：**\n> 1, 1, 2, 3, 5, 8, 13, ....\n\n伪代码表示，第n个数由数列的前两个相加而来：`f(n) = f(n - 1) + f(n -2)`\n\n## 斐波那契数列的实现\n\n### 递归实现\n\n```javascript\n// 递归实现\nlet fibonacciNum = (n) {\n  if (n < = 2) {\n    return 1;\n  }\n  return fibonacciNum(n-1) + fibonacciNum(n-2);\n};\n// 递归层数越来越深容易递归爆栈=\n```\n- 优点：代码量少，容易理解\n- 缺点：当n较大时很快产生栈溢出，引发原因是“调用帧”过多\n\n### 空间换时间的处理方式\n\n**利用闭包实现缓存**\n```javascript\n// 闭包 + 缓存数组\nconst fibonacci2 = (function() {\n  const f = [0];\n  return function(n) {\n    if(f[n] !== undefined) return f[n];\n    return f[n] = ( n === 1 || n === 2 ? 1 : fibonacci2(n-1) + fibonacci2(n-2))\n  }\n})()\n```\n- 优点：\n- 缺点：会增加额外的消耗，比如直接计算 `fibonacci(1000)` ,这个时候数组中会先初始化中间的其他数组项为 `undefined` 这里会小一些时间，但是计算完毕之后`1-1000`之间的斐波那契数列都填充完毕了。\n\n**用对象替换数组来进行缓存**\n\n```javascript\n// 闭包 + 缓存对象\n// 减少了填充 undefined 的时间\nconst fibonacci = (function (){\n  const f = {};\n  return function (n) {\n    if ( n === 0 || n === 1) {\n      return n;\n    }\n    if (f[n-2] === undefined) {\n      f[n-2] = fibonacci(n-2);\n    }\n    if (f[n-1] === undefined) {\n      f[n-1] = fibonacci(n-1);\n    }\n    return f[n] = f[n-1] + f[n-2];\n  }\n})()\n```\n\n**函数属性实现**\n> 将缓存作为函数的属性，减少闭包的使用；缓存逻辑和业务逻辑不混合使用，添加函数属性的方式会让程序的理解变为复杂。\n\n```javascript\nconst fibonacci = (n) => {\n  // 创建缓存\n  if (!fibonacci.f) {fibonacci.f = {}};\n  // 计算\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  if (fibonacci.f[n-2] === undefined) {\n    fibnoacci.f[n-2] = fibonacci(n-2);\n  }\n  if (fibonacci.f[n-1] === undefined) {\n    fibnoacci.f[n-1] = fibonacci(n-1);\n  }\n  return fibonacci.f[n] = fibonacci.f[n-1] + fibonacci.f[n-2];\n}\n```\n总结：使用空间换时间的好处能够复用之前的计算结果，提升性能，减少计算代价；但是这种方式难以做负载测试和算法复杂度评估，因为输出结果依赖之前的输入。\n\n### 尾递归优化\n\n> 尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，就是指某个函数的最后一步是调用另一个函数。\n\n当计算的数值较大时会出现递归爆栈的现象，有一种解决办法就是尾递归。但这种方法需改写函数的参数，将结算结果作为参数传递下去，在实际使用的使用的时候没什么问题修改接口就行。尾递归优化可参考：[ruanyifeng-尾调用优化](https://ruanyifeng.com/blog/2015/04/tail-call.html)\n\n```javascript\nfunction fibonacci(n, n1, n2) {\n  if (n <= 1) {\n    return n2;\n  }\n  return fibonacci(n-1, n2, n1 + n2);\n}\n```\n\n### 递推\n\n递归算法中我们获取某一项的值时是从后一步步往前推，现在我们换成从前往后推，即递推。既然三项中的前两项相加等于第三项，写成表达式就是`res[i-2] + res[i-1] = res[i]`\n\n**for循环**\n\n```javascript\nlet fib = function(n) {\n  if(n <= 2) {\n    return 1\n  }\n  let sum = 0\n  let prev = 1\n  let next = 1\n  for(let i = 3; i <= n; i++) {\n    sum = prev + next;\n    prev = next;\n    next = sum;\n  }\n  return sum;\n}\n```\n\n**while循环**\n```javascript\nlet fib = function(n) {\n  let i = 2\n  let res = [0,1,1]\n  while(i <= n) {\n      res[i] = res[i - 1] + res[i - 2]\n      i++\n  }\n  return res[n]\n}\n```\n\n### 其他方法收集\n\n**采用解构赋值**\n```javascript\nconst fibonacci = (n) => {\n  let a = 0;\n  let b = 1;\n  let i = 1;\n  while (i++ <=n) {\n    [a, b] = [b, a+b]\n  }\n  return a;\n}\n```\n\n**闭包实现**\n```javascript\nconst fibonacci=((s) => (f=(i) => s[i] || (s[i]=f(i-1)+f(i-2))))([0,1,1])\n```\n\n**ES6 `reduce()`实现**\n```javascript\nconst fibonacci = n => [...Array(n)].reduce(\n  (acc, val, i) => acc.concat(\n    i > 1 ? acc[i - 1] + acc[i - 2] : i\n  ), []\n)\n```\n\n## 参考链接\n\n> [记忆化斐波那契函数的思考（JavaScript）](https://juejin.im/post/5df1b02d51882512561b6c63)\n> [斐波那契数列的js实现](https://juejin.im/post/5eec2840f265da02b80e0373)\n> [Fibonacci series in JavaScript](https://stackoverflow.com/questions/51111870/fibonacci-series-in-javascript/51111896)\n> [ruanyifeng-尾调用优化](https://ruanyifeng.com/blog/2015/04/tail-call.html)\n> [leetcode-斐波那契数列](https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/xun-huan-fa-bei-wang-lu-javascriptda-shu-shi-xian-/)\n","slug":"JavaScript实现斐波那契数列的几种方式","published":1,"updated":"2020-07-07T06:09:42.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvuz0012m5sncrv7d577","content":"<h2 id=\"什么是斐波那契？\"><a href=\"#什么是斐波那契？\" class=\"headerlink\" title=\"什么是斐波那契？\"></a>什么是斐波那契？</h2><h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><blockquote>\n<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：<code>F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n≥3，n ∈ N*）</code>(来自——<a href=\"https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科</a>)</p>\n<p>在数学上，斐波那契数列是以递归的方式来定义,斐波那契數列由0和1開始，之後的斐波那契數就是由之前的兩數相加而得出。首幾個斐波那契數是：<code>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……</code>（来自——<a href=\"https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\" target=\"_blank\" rel=\"noopener\">WikiPedia维基百科</a>）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数学计算等式如下</span></span><br><span class=\"line\">F0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">F1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">Fn = (Fn<span class=\"number\">-1</span>) + (Fn<span class=\"number\">-2</span>) <span class=\"comment\">// (n&gt;= 2)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>类似于以下的数列：</strong></p>\n<blockquote>\n<p>1, 1, 2, 3, 5, 8, 13, ….</p>\n</blockquote>\n<p>伪代码表示，第n个数由数列的前两个相加而来：<code>f(n) = f(n - 1) + f(n -2)</code></p>\n<h2 id=\"斐波那契数列的实现\"><a href=\"#斐波那契数列的实现\" class=\"headerlink\" title=\"斐波那契数列的实现\"></a>斐波那契数列的实现</h2><h3 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fibonacciNum = (n) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; = <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fibonacciNum(n<span class=\"number\">-1</span>) + fibonacciNum(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 递归层数越来越深容易递归爆栈=</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：代码量少，容易理解</li>\n<li>缺点：当n较大时很快产生栈溢出，引发原因是“调用帧”过多</li>\n</ul>\n<h3 id=\"空间换时间的处理方式\"><a href=\"#空间换时间的处理方式\" class=\"headerlink\" title=\"空间换时间的处理方式\"></a>空间换时间的处理方式</h3><p><strong>利用闭包实现缓存</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包 + 缓存数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fibonacci2 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = [<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n] !== <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> f[n];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[n] = ( n === <span class=\"number\">1</span> || n === <span class=\"number\">2</span> ? <span class=\"number\">1</span> : fibonacci2(n<span class=\"number\">-1</span>) + fibonacci2(n<span class=\"number\">-2</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：</li>\n<li>缺点：会增加额外的消耗，比如直接计算 <code>fibonacci(1000)</code> ,这个时候数组中会先初始化中间的其他数组项为 <code>undefined</code> 这里会小一些时间，但是计算完毕之后<code>1-1000</code>之间的斐波那契数列都填充完毕了。</li>\n</ul>\n<p><strong>用对象替换数组来进行缓存</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包 + 缓存对象</span></span><br><span class=\"line\"><span class=\"comment\">// 减少了填充 undefined 的时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[n<span class=\"number\">-2</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      f[n<span class=\"number\">-2</span>] = fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[n<span class=\"number\">-1</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      f[n<span class=\"number\">-1</span>] = fibonacci(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[n] = f[n<span class=\"number\">-1</span>] + f[n<span class=\"number\">-2</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数属性实现</strong></p>\n<blockquote>\n<p>将缓存作为函数的属性，减少闭包的使用；缓存逻辑和业务逻辑不混合使用，添加函数属性的方式会让程序的理解变为复杂。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建缓存</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fibonacci.f) &#123;fibonacci.f = &#123;&#125;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 计算</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fibonacci.f[n<span class=\"number\">-2</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    fibnoacci.f[n<span class=\"number\">-2</span>] = fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fibonacci.f[n<span class=\"number\">-1</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    fibnoacci.f[n<span class=\"number\">-1</span>] = fibonacci(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fibonacci.f[n] = fibonacci.f[n<span class=\"number\">-1</span>] + fibonacci.f[n<span class=\"number\">-2</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：使用空间换时间的好处能够复用之前的计算结果，提升性能，减少计算代价；但是这种方式难以做负载测试和算法复杂度评估，因为输出结果依赖之前的输入。</p>\n<h3 id=\"尾递归优化\"><a href=\"#尾递归优化\" class=\"headerlink\" title=\"尾递归优化\"></a>尾递归优化</h3><blockquote>\n<p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，就是指某个函数的最后一步是调用另一个函数。</p>\n</blockquote>\n<p>当计算的数值较大时会出现递归爆栈的现象，有一种解决办法就是尾递归。但这种方法需改写函数的参数，将结算结果作为参数传递下去，在实际使用的使用的时候没什么问题修改接口就行。尾递归优化可参考：<a href=\"https://ruanyifeng.com/blog/2015/04/tail-call.html\" target=\"_blank\" rel=\"noopener\">ruanyifeng-尾调用优化</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n, n1, n2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-1</span>, n2, n1 + n2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递推\"><a href=\"#递推\" class=\"headerlink\" title=\"递推\"></a>递推</h3><p>递归算法中我们获取某一项的值时是从后一步步往前推，现在我们换成从前往后推，即递推。既然三项中的前两项相加等于第三项，写成表达式就是<code>res[i-2] + res[i-1] = res[i]</code></p>\n<p><strong>for循环</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fib = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> next = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    sum = prev + next;</span><br><span class=\"line\">    prev = next;</span><br><span class=\"line\">    next = sum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>while循环</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fib = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt;= n) &#123;</span><br><span class=\"line\">      res[i] = res[i - <span class=\"number\">1</span>] + res[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">      i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res[n]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他方法收集\"><a href=\"#其他方法收集\" class=\"headerlink\" title=\"其他方法收集\"></a>其他方法收集</h3><p><strong>采用解构赋值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i++ <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=n)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">    [a, b] = [b, a+b]</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  return a;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>闭包实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci=<span class=\"function\">(<span class=\"params\">(s</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">f=(i</span>) =&gt;</span> s[i] || (s[i]=f(i<span class=\"number\">-1</span>)+f(i<span class=\"number\">-2</span>))))([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n\n<p><strong>ES6 <code>reduce()</code>实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> [...Array(n)].reduce(</span><br><span class=\"line\">  (acc, val, i) =&gt; acc.concat(</span><br><span class=\"line\">    i &gt; <span class=\"number\">1</span> ? acc[i - <span class=\"number\">1</span>] + acc[i - <span class=\"number\">2</span>] : i</span><br><span class=\"line\">  ), []</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://juejin.im/post/5df1b02d51882512561b6c63\" target=\"_blank\" rel=\"noopener\">记忆化斐波那契函数的思考（JavaScript）</a><br><a href=\"https://juejin.im/post/5eec2840f265da02b80e0373\" target=\"_blank\" rel=\"noopener\">斐波那契数列的js实现</a><br><a href=\"https://stackoverflow.com/questions/51111870/fibonacci-series-in-javascript/51111896\" target=\"_blank\" rel=\"noopener\">Fibonacci series in JavaScript</a><br><a href=\"https://ruanyifeng.com/blog/2015/04/tail-call.html\" target=\"_blank\" rel=\"noopener\">ruanyifeng-尾调用优化</a><br><a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/xun-huan-fa-bei-wang-lu-javascriptda-shu-shi-xian-/\" target=\"_blank\" rel=\"noopener\">leetcode-斐波那契数列</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是斐波那契？\"><a href=\"#什么是斐波那契？\" class=\"headerlink\" title=\"什么是斐波那契？\"></a>什么是斐波那契？</h2><h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><blockquote>\n<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：<code>F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n≥3，n ∈ N*）</code>(来自——<a href=\"https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科</a>)</p>\n<p>在数学上，斐波那契数列是以递归的方式来定义,斐波那契數列由0和1開始，之後的斐波那契數就是由之前的兩數相加而得出。首幾個斐波那契數是：<code>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……</code>（来自——<a href=\"https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\" target=\"_blank\" rel=\"noopener\">WikiPedia维基百科</a>）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数学计算等式如下</span></span><br><span class=\"line\">F0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">F1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">Fn = (Fn<span class=\"number\">-1</span>) + (Fn<span class=\"number\">-2</span>) <span class=\"comment\">// (n&gt;= 2)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>类似于以下的数列：</strong></p>\n<blockquote>\n<p>1, 1, 2, 3, 5, 8, 13, ….</p>\n</blockquote>\n<p>伪代码表示，第n个数由数列的前两个相加而来：<code>f(n) = f(n - 1) + f(n -2)</code></p>\n<h2 id=\"斐波那契数列的实现\"><a href=\"#斐波那契数列的实现\" class=\"headerlink\" title=\"斐波那契数列的实现\"></a>斐波那契数列的实现</h2><h3 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fibonacciNum = (n) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; = <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fibonacciNum(n<span class=\"number\">-1</span>) + fibonacciNum(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 递归层数越来越深容易递归爆栈=</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：代码量少，容易理解</li>\n<li>缺点：当n较大时很快产生栈溢出，引发原因是“调用帧”过多</li>\n</ul>\n<h3 id=\"空间换时间的处理方式\"><a href=\"#空间换时间的处理方式\" class=\"headerlink\" title=\"空间换时间的处理方式\"></a>空间换时间的处理方式</h3><p><strong>利用闭包实现缓存</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包 + 缓存数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fibonacci2 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = [<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n] !== <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> f[n];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[n] = ( n === <span class=\"number\">1</span> || n === <span class=\"number\">2</span> ? <span class=\"number\">1</span> : fibonacci2(n<span class=\"number\">-1</span>) + fibonacci2(n<span class=\"number\">-2</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：</li>\n<li>缺点：会增加额外的消耗，比如直接计算 <code>fibonacci(1000)</code> ,这个时候数组中会先初始化中间的其他数组项为 <code>undefined</code> 这里会小一些时间，但是计算完毕之后<code>1-1000</code>之间的斐波那契数列都填充完毕了。</li>\n</ul>\n<p><strong>用对象替换数组来进行缓存</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包 + 缓存对象</span></span><br><span class=\"line\"><span class=\"comment\">// 减少了填充 undefined 的时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[n<span class=\"number\">-2</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      f[n<span class=\"number\">-2</span>] = fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[n<span class=\"number\">-1</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      f[n<span class=\"number\">-1</span>] = fibonacci(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[n] = f[n<span class=\"number\">-1</span>] + f[n<span class=\"number\">-2</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数属性实现</strong></p>\n<blockquote>\n<p>将缓存作为函数的属性，减少闭包的使用；缓存逻辑和业务逻辑不混合使用，添加函数属性的方式会让程序的理解变为复杂。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建缓存</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fibonacci.f) &#123;fibonacci.f = &#123;&#125;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 计算</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fibonacci.f[n<span class=\"number\">-2</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    fibnoacci.f[n<span class=\"number\">-2</span>] = fibonacci(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fibonacci.f[n<span class=\"number\">-1</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    fibnoacci.f[n<span class=\"number\">-1</span>] = fibonacci(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fibonacci.f[n] = fibonacci.f[n<span class=\"number\">-1</span>] + fibonacci.f[n<span class=\"number\">-2</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：使用空间换时间的好处能够复用之前的计算结果，提升性能，减少计算代价；但是这种方式难以做负载测试和算法复杂度评估，因为输出结果依赖之前的输入。</p>\n<h3 id=\"尾递归优化\"><a href=\"#尾递归优化\" class=\"headerlink\" title=\"尾递归优化\"></a>尾递归优化</h3><blockquote>\n<p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，就是指某个函数的最后一步是调用另一个函数。</p>\n</blockquote>\n<p>当计算的数值较大时会出现递归爆栈的现象，有一种解决办法就是尾递归。但这种方法需改写函数的参数，将结算结果作为参数传递下去，在实际使用的使用的时候没什么问题修改接口就行。尾递归优化可参考：<a href=\"https://ruanyifeng.com/blog/2015/04/tail-call.html\" target=\"_blank\" rel=\"noopener\">ruanyifeng-尾调用优化</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n, n1, n2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fibonacci(n<span class=\"number\">-1</span>, n2, n1 + n2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递推\"><a href=\"#递推\" class=\"headerlink\" title=\"递推\"></a>递推</h3><p>递归算法中我们获取某一项的值时是从后一步步往前推，现在我们换成从前往后推，即递推。既然三项中的前两项相加等于第三项，写成表达式就是<code>res[i-2] + res[i-1] = res[i]</code></p>\n<p><strong>for循环</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fib = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> next = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    sum = prev + next;</span><br><span class=\"line\">    prev = next;</span><br><span class=\"line\">    next = sum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>while循环</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fib = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(i &lt;= n) &#123;</span><br><span class=\"line\">      res[i] = res[i - <span class=\"number\">1</span>] + res[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">      i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res[n]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他方法收集\"><a href=\"#其他方法收集\" class=\"headerlink\" title=\"其他方法收集\"></a>其他方法收集</h3><p><strong>采用解构赋值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i++ <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">=n)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">    [a, b] = [b, a+b]</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  return a;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>闭包实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci=<span class=\"function\">(<span class=\"params\">(s</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">f=(i</span>) =&gt;</span> s[i] || (s[i]=f(i<span class=\"number\">-1</span>)+f(i<span class=\"number\">-2</span>))))([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n\n<p><strong>ES6 <code>reduce()</code>实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fibonacci = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> [...Array(n)].reduce(</span><br><span class=\"line\">  (acc, val, i) =&gt; acc.concat(</span><br><span class=\"line\">    i &gt; <span class=\"number\">1</span> ? acc[i - <span class=\"number\">1</span>] + acc[i - <span class=\"number\">2</span>] : i</span><br><span class=\"line\">  ), []</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://juejin.im/post/5df1b02d51882512561b6c63\" target=\"_blank\" rel=\"noopener\">记忆化斐波那契函数的思考（JavaScript）</a><br><a href=\"https://juejin.im/post/5eec2840f265da02b80e0373\" target=\"_blank\" rel=\"noopener\">斐波那契数列的js实现</a><br><a href=\"https://stackoverflow.com/questions/51111870/fibonacci-series-in-javascript/51111896\" target=\"_blank\" rel=\"noopener\">Fibonacci series in JavaScript</a><br><a href=\"https://ruanyifeng.com/blog/2015/04/tail-call.html\" target=\"_blank\" rel=\"noopener\">ruanyifeng-尾调用优化</a><br><a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/xun-huan-fa-bei-wang-lu-javascriptda-shu-shi-xian-/\" target=\"_blank\" rel=\"noopener\">leetcode-斐波那契数列</a></p>\n</blockquote>\n"},{"title":"JavaScript 执行机制原理","date":"2020-01-13T02:14:47.000Z","_content":"\n\n# JavaScript 运行机制原理\n\n\n> “`JavaScript` 是单线程、异步、非阻塞、解释型脚本语言。”\n\n## JavaScript 运行机制\n\n### 同步任务(synchronous)\n\n\n### 异步任务(asynchronous)\n\n\n*在所有同步任务执行完之前，任何的异步任务是不会执行的*\n\n**那么有哪些会进入异步任务队列？**\n> `setTimeout`和`setlnterval`\n> `JavaScript DOM`事件\n> `ES6`中的`Promise`\n> `Ajax`异步请求\n\n\n### 微任务(Microtask)与宏任务(Macrotask)\n\n> 异步任务又分为：微任务(Microtask)和宏任务(Macrotask)\n> 宏任务队列可以有多个，微任务队列只有一个\n\n**JavaScript异步任务中那些是微任务？那些是宏任务？**\n\n> 微任务包括: `new Promise().then(回调)`, `process.nextTick`, `Object.observe(已废弃)`, `MutationObserver`(`html5`新特性)\n> 宏任务包括：`script`(全局任务), `setTimeout`, `setInterval`, `setImmediate`, `I/O`, `UI rendering`。\n\n\n## 理解`Event Loop`\n\n**单线程如何实现异步？**\n> 通过`Event loop`（事件循环）实现，从`Event loop`谈`JavaScript`运行机制\n\n\n\n**请看下面例子：**\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6, 7];\nfor (var i = 0; i < arr.length; i++) {\n  setTimeout(function() {\n    console.log(i);\n  });\n};\n// 打印出来的结果是7个7\n```\n\n思考一下最后结果会输出什么？\n\n**答案：7个7**\n\n**为什么不是按照我们预期的结果来输出？**\n\n`setTimeout()`是个异步定时函数，`JavaScript`是单线程，所以就算延时为0，它也是要等到`for`循环语句执行完了，才到它执行，每执行一次`for`语句就会就会产生一个异步执行，放在等待队列里，所以最后执行时就是输出7个7了\n\n**将上面的代码再进行改造一下：**\n\n```javascript\n// 方法一\nvar arr = [1, 2, 3, 4, 5, 6, 7];\nfor (let i = 0; i < arr.length; i++) {\n  setTimeout(function() {\n    console.log(i);\n  });\n};\n// 0, 1, 2, 3, 4, 5, 6\n\n// 方法二\nvar arr = [1, 2, 3, 4, 5, 6, 7];\nfor (var i = 0; i < arr.length; i++) {\n  setTimeout(function(i) {\n    console.log(i);\n  }(i));\n};\n// 0, 1, 2, 3, 4, 5, 6\n\n```\n\n\n## 参考文章\n\n> [Understanding JS: The Event Loop](https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40)\n> [The JavaScript Event Loop: Explained](https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/)\n> [JavaScript 运行机制详解：深入理解Event Loop](https://blog.csdn.net/Rnger/article/details/81908070)\n> [阮一峰 - 什么是 Event Loop？](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n> [阮一峰 - JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n> [稀土掘金 - 一次性搞懂JavaScript 执行机制](https://juejin.im/post/5b4dfb94f265da0f955cc606)\n> [稀土掘金 - 这一次，彻底弄懂 JavaScript 执行机制](https://juejin.im/post/59e85eebf265da430d571f89)\n> [稀土掘金 - 从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理](https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-6)\n> [稀土掘金 - 微任务、宏任务与Event-Loop](https://juejin.im/post/5b73d7a6518825610072b42b)\n> [Mozilla Developer Networks - Worker](https://developer.mozilla.org/en-US/docs/Web/API/Worker)\n> [详解JavaScript中的Event Loop（事件循环）机制](https://zhuanlan.zhihu.com/p/33058983)\n> [深入浅出JavaScript运行机制](https://segmentfault.com/a/1190000016834449)\n","source":"_posts/2020-01-13-javascript-执行机制原理.md","raw":"---\ntitle: JavaScript 执行机制原理\ndate: 2020-01-13 10:14:47\ntags:\n  - 前端\n  - 前端面试题\n  - JavaScript 执行机制\n  - JavaScript event loop\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n\n# JavaScript 运行机制原理\n\n\n> “`JavaScript` 是单线程、异步、非阻塞、解释型脚本语言。”\n\n## JavaScript 运行机制\n\n### 同步任务(synchronous)\n\n\n### 异步任务(asynchronous)\n\n\n*在所有同步任务执行完之前，任何的异步任务是不会执行的*\n\n**那么有哪些会进入异步任务队列？**\n> `setTimeout`和`setlnterval`\n> `JavaScript DOM`事件\n> `ES6`中的`Promise`\n> `Ajax`异步请求\n\n\n### 微任务(Microtask)与宏任务(Macrotask)\n\n> 异步任务又分为：微任务(Microtask)和宏任务(Macrotask)\n> 宏任务队列可以有多个，微任务队列只有一个\n\n**JavaScript异步任务中那些是微任务？那些是宏任务？**\n\n> 微任务包括: `new Promise().then(回调)`, `process.nextTick`, `Object.observe(已废弃)`, `MutationObserver`(`html5`新特性)\n> 宏任务包括：`script`(全局任务), `setTimeout`, `setInterval`, `setImmediate`, `I/O`, `UI rendering`。\n\n\n## 理解`Event Loop`\n\n**单线程如何实现异步？**\n> 通过`Event loop`（事件循环）实现，从`Event loop`谈`JavaScript`运行机制\n\n\n\n**请看下面例子：**\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6, 7];\nfor (var i = 0; i < arr.length; i++) {\n  setTimeout(function() {\n    console.log(i);\n  });\n};\n// 打印出来的结果是7个7\n```\n\n思考一下最后结果会输出什么？\n\n**答案：7个7**\n\n**为什么不是按照我们预期的结果来输出？**\n\n`setTimeout()`是个异步定时函数，`JavaScript`是单线程，所以就算延时为0，它也是要等到`for`循环语句执行完了，才到它执行，每执行一次`for`语句就会就会产生一个异步执行，放在等待队列里，所以最后执行时就是输出7个7了\n\n**将上面的代码再进行改造一下：**\n\n```javascript\n// 方法一\nvar arr = [1, 2, 3, 4, 5, 6, 7];\nfor (let i = 0; i < arr.length; i++) {\n  setTimeout(function() {\n    console.log(i);\n  });\n};\n// 0, 1, 2, 3, 4, 5, 6\n\n// 方法二\nvar arr = [1, 2, 3, 4, 5, 6, 7];\nfor (var i = 0; i < arr.length; i++) {\n  setTimeout(function(i) {\n    console.log(i);\n  }(i));\n};\n// 0, 1, 2, 3, 4, 5, 6\n\n```\n\n\n## 参考文章\n\n> [Understanding JS: The Event Loop](https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40)\n> [The JavaScript Event Loop: Explained](https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/)\n> [JavaScript 运行机制详解：深入理解Event Loop](https://blog.csdn.net/Rnger/article/details/81908070)\n> [阮一峰 - 什么是 Event Loop？](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n> [阮一峰 - JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n> [稀土掘金 - 一次性搞懂JavaScript 执行机制](https://juejin.im/post/5b4dfb94f265da0f955cc606)\n> [稀土掘金 - 这一次，彻底弄懂 JavaScript 执行机制](https://juejin.im/post/59e85eebf265da430d571f89)\n> [稀土掘金 - 从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理](https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-6)\n> [稀土掘金 - 微任务、宏任务与Event-Loop](https://juejin.im/post/5b73d7a6518825610072b42b)\n> [Mozilla Developer Networks - Worker](https://developer.mozilla.org/en-US/docs/Web/API/Worker)\n> [详解JavaScript中的Event Loop（事件循环）机制](https://zhuanlan.zhihu.com/p/33058983)\n> [深入浅出JavaScript运行机制](https://segmentfault.com/a/1190000016834449)\n","slug":"javascript-执行机制原理","published":1,"updated":"2020-01-14T01:56:19.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvv20014m5sng56z1dqa","content":"<h1 id=\"JavaScript-运行机制原理\"><a href=\"#JavaScript-运行机制原理\" class=\"headerlink\" title=\"JavaScript 运行机制原理\"></a>JavaScript 运行机制原理</h1><blockquote>\n<p>“<code>JavaScript</code> 是单线程、异步、非阻塞、解释型脚本语言。”</p>\n</blockquote>\n<h2 id=\"JavaScript-运行机制\"><a href=\"#JavaScript-运行机制\" class=\"headerlink\" title=\"JavaScript 运行机制\"></a>JavaScript 运行机制</h2><h3 id=\"同步任务-synchronous\"><a href=\"#同步任务-synchronous\" class=\"headerlink\" title=\"同步任务(synchronous)\"></a>同步任务(synchronous)</h3><h3 id=\"异步任务-asynchronous\"><a href=\"#异步任务-asynchronous\" class=\"headerlink\" title=\"异步任务(asynchronous)\"></a>异步任务(asynchronous)</h3><p><em>在所有同步任务执行完之前，任何的异步任务是不会执行的</em></p>\n<p><strong>那么有哪些会进入异步任务队列？</strong></p>\n<blockquote>\n<p><code>setTimeout</code>和<code>setlnterval</code><br><code>JavaScript DOM</code>事件<br><code>ES6</code>中的<code>Promise</code><br><code>Ajax</code>异步请求</p>\n</blockquote>\n<h3 id=\"微任务-Microtask-与宏任务-Macrotask\"><a href=\"#微任务-Microtask-与宏任务-Macrotask\" class=\"headerlink\" title=\"微任务(Microtask)与宏任务(Macrotask)\"></a>微任务(Microtask)与宏任务(Macrotask)</h3><blockquote>\n<p>异步任务又分为：微任务(Microtask)和宏任务(Macrotask)<br>宏任务队列可以有多个，微任务队列只有一个</p>\n</blockquote>\n<p><strong>JavaScript异步任务中那些是微任务？那些是宏任务？</strong></p>\n<blockquote>\n<p>微任务包括: <code>new Promise().then(回调)</code>, <code>process.nextTick</code>, <code>Object.observe(已废弃)</code>, <code>MutationObserver</code>(<code>html5</code>新特性)<br>宏任务包括：<code>script</code>(全局任务), <code>setTimeout</code>, <code>setInterval</code>, <code>setImmediate</code>, <code>I/O</code>, <code>UI rendering</code>。</p>\n</blockquote>\n<h2 id=\"理解Event-Loop\"><a href=\"#理解Event-Loop\" class=\"headerlink\" title=\"理解Event Loop\"></a>理解<code>Event Loop</code></h2><p><strong>单线程如何实现异步？</strong></p>\n<blockquote>\n<p>通过<code>Event loop</code>（事件循环）实现，从<code>Event loop</code>谈<code>JavaScript</code>运行机制</p>\n</blockquote>\n<p><strong>请看下面例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 打印出来的结果是7个7</span></span><br></pre></td></tr></table></figure>\n\n<p>思考一下最后结果会输出什么？</p>\n<p><strong>答案：7个7</strong></p>\n<p><strong>为什么不是按照我们预期的结果来输出？</strong></p>\n<p><code>setTimeout()</code>是个异步定时函数，<code>JavaScript</code>是单线程，所以就算延时为0，它也是要等到<code>for</code>循环语句执行完了，才到它执行，每执行一次<code>for</code>语句就会就会产生一个异步执行，放在等待队列里，所以最后执行时就是输出7个7了</p>\n<p><strong>将上面的代码再进行改造一下：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 0, 1, 2, 3, 4, 5, 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;(i));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 0, 1, 2, 3, 4, 5, 6</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40\" target=\"_blank\" rel=\"noopener\">Understanding JS: The Event Loop</a><br><a href=\"https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/\" target=\"_blank\" rel=\"noopener\">The JavaScript Event Loop: Explained</a><br><a href=\"https://blog.csdn.net/Rnger/article/details/81908070\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：深入理解Event Loop</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">阮一峰 - 什么是 Event Loop？</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">阮一峰 - JavaScript 运行机制详解：再谈Event Loop</a><br><a href=\"https://juejin.im/post/5b4dfb94f265da0f955cc606\" target=\"_blank\" rel=\"noopener\">稀土掘金 - 一次性搞懂JavaScript 执行机制</a><br><a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">稀土掘金 - 这一次，彻底弄懂 JavaScript 执行机制</a><br><a href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-6\" target=\"_blank\" rel=\"noopener\">稀土掘金 - 从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a><br><a href=\"https://juejin.im/post/5b73d7a6518825610072b42b\" target=\"_blank\" rel=\"noopener\">稀土掘金 - 微任务、宏任务与Event-Loop</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\" target=\"_blank\" rel=\"noopener\">Mozilla Developer Networks - Worker</a><br><a href=\"https://zhuanlan.zhihu.com/p/33058983\" target=\"_blank\" rel=\"noopener\">详解JavaScript中的Event Loop（事件循环）机制</a><br><a href=\"https://segmentfault.com/a/1190000016834449\" target=\"_blank\" rel=\"noopener\">深入浅出JavaScript运行机制</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript-运行机制原理\"><a href=\"#JavaScript-运行机制原理\" class=\"headerlink\" title=\"JavaScript 运行机制原理\"></a>JavaScript 运行机制原理</h1><blockquote>\n<p>“<code>JavaScript</code> 是单线程、异步、非阻塞、解释型脚本语言。”</p>\n</blockquote>\n<h2 id=\"JavaScript-运行机制\"><a href=\"#JavaScript-运行机制\" class=\"headerlink\" title=\"JavaScript 运行机制\"></a>JavaScript 运行机制</h2><h3 id=\"同步任务-synchronous\"><a href=\"#同步任务-synchronous\" class=\"headerlink\" title=\"同步任务(synchronous)\"></a>同步任务(synchronous)</h3><h3 id=\"异步任务-asynchronous\"><a href=\"#异步任务-asynchronous\" class=\"headerlink\" title=\"异步任务(asynchronous)\"></a>异步任务(asynchronous)</h3><p><em>在所有同步任务执行完之前，任何的异步任务是不会执行的</em></p>\n<p><strong>那么有哪些会进入异步任务队列？</strong></p>\n<blockquote>\n<p><code>setTimeout</code>和<code>setlnterval</code><br><code>JavaScript DOM</code>事件<br><code>ES6</code>中的<code>Promise</code><br><code>Ajax</code>异步请求</p>\n</blockquote>\n<h3 id=\"微任务-Microtask-与宏任务-Macrotask\"><a href=\"#微任务-Microtask-与宏任务-Macrotask\" class=\"headerlink\" title=\"微任务(Microtask)与宏任务(Macrotask)\"></a>微任务(Microtask)与宏任务(Macrotask)</h3><blockquote>\n<p>异步任务又分为：微任务(Microtask)和宏任务(Macrotask)<br>宏任务队列可以有多个，微任务队列只有一个</p>\n</blockquote>\n<p><strong>JavaScript异步任务中那些是微任务？那些是宏任务？</strong></p>\n<blockquote>\n<p>微任务包括: <code>new Promise().then(回调)</code>, <code>process.nextTick</code>, <code>Object.observe(已废弃)</code>, <code>MutationObserver</code>(<code>html5</code>新特性)<br>宏任务包括：<code>script</code>(全局任务), <code>setTimeout</code>, <code>setInterval</code>, <code>setImmediate</code>, <code>I/O</code>, <code>UI rendering</code>。</p>\n</blockquote>\n<h2 id=\"理解Event-Loop\"><a href=\"#理解Event-Loop\" class=\"headerlink\" title=\"理解Event Loop\"></a>理解<code>Event Loop</code></h2><p><strong>单线程如何实现异步？</strong></p>\n<blockquote>\n<p>通过<code>Event loop</code>（事件循环）实现，从<code>Event loop</code>谈<code>JavaScript</code>运行机制</p>\n</blockquote>\n<p><strong>请看下面例子：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 打印出来的结果是7个7</span></span><br></pre></td></tr></table></figure>\n\n<p>思考一下最后结果会输出什么？</p>\n<p><strong>答案：7个7</strong></p>\n<p><strong>为什么不是按照我们预期的结果来输出？</strong></p>\n<p><code>setTimeout()</code>是个异步定时函数，<code>JavaScript</code>是单线程，所以就算延时为0，它也是要等到<code>for</code>循环语句执行完了，才到它执行，每执行一次<code>for</code>语句就会就会产生一个异步执行，放在等待队列里，所以最后执行时就是输出7个7了</p>\n<p><strong>将上面的代码再进行改造一下：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 0, 1, 2, 3, 4, 5, 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;(i));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 0, 1, 2, 3, 4, 5, 6</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40\" target=\"_blank\" rel=\"noopener\">Understanding JS: The Event Loop</a><br><a href=\"https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/\" target=\"_blank\" rel=\"noopener\">The JavaScript Event Loop: Explained</a><br><a href=\"https://blog.csdn.net/Rnger/article/details/81908070\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：深入理解Event Loop</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">阮一峰 - 什么是 Event Loop？</a><br><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">阮一峰 - JavaScript 运行机制详解：再谈Event Loop</a><br><a href=\"https://juejin.im/post/5b4dfb94f265da0f955cc606\" target=\"_blank\" rel=\"noopener\">稀土掘金 - 一次性搞懂JavaScript 执行机制</a><br><a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">稀土掘金 - 这一次，彻底弄懂 JavaScript 执行机制</a><br><a href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-6\" target=\"_blank\" rel=\"noopener\">稀土掘金 - 从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a><br><a href=\"https://juejin.im/post/5b73d7a6518825610072b42b\" target=\"_blank\" rel=\"noopener\">稀土掘金 - 微任务、宏任务与Event-Loop</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\" target=\"_blank\" rel=\"noopener\">Mozilla Developer Networks - Worker</a><br><a href=\"https://zhuanlan.zhihu.com/p/33058983\" target=\"_blank\" rel=\"noopener\">详解JavaScript中的Event Loop（事件循环）机制</a><br><a href=\"https://segmentfault.com/a/1190000016834449\" target=\"_blank\" rel=\"noopener\">深入浅出JavaScript运行机制</a></p>\n</blockquote>\n"},{"title":"深入理解CSS中BFC（Block Formatting Context）块级格式上下文","date":"2020-06-27T16:56:32.000Z","_content":"\n## 常见定位方案\n\n**普通流 (normal flow)**\n> 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。\n\n**浮动 (float)**\n> 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。\n\n**绝对定位 (absolute positioning)**\n> 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。\n\n## BFC 概念\n\n> BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。\n**什么是BFC？**\n> 块格式化上下文（Block Formatting Context，BFC）是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。\n> 具有BFC特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。\n\n## 触发BFC\n\n**触发条件**\n> 根元素`<html>`\n> 浮动元素(元素的`float`属性不为`none`)\n> 绝对定位元素（元素的`position`为`absolute`或`fixed`）\n> 行内块元素 (元素的`display`为`inline-block`)\n> 表格单元格(元素的`display`为`table-cell`，`html`表格单元格默认为该值)\n> 表格标题(元素的`display`为`table-caption`，`html`表格标题默认为该值)\n> 匿名表格单元格元素(元素的`display`为`table`、`table-row`、`table-row-group`、`table-header-group`、`table-footer-group`（分别是`HTML table`、`row`、`tbody`、`thead`、`tfoot`的默认属性）或`inline-block`)\n> `overflow`值不为`visible`的快元素\n> `display`值为`flow-root`的元素\n> `contain` 值为`layout`、`content`或`paint`的元素\n> 弹性元素（`display`为`flex`或`inline-flex`元素的直接子元素）\n> 网格元素（`display`为`grid`或`inline-grid`元素的直接子元素）\n> 多列容器（元素的`column-count`或`column-width`不为`auto`，包括 `column-count`为1）\n> `column-span`为`all`的元素始终会创建一个新的*BFC*，即使该元素没有包裹在一个多列容器中\n\n## BFC 特性及应用\n\n**同一个BFC下外边距会发生折叠**\n\n```html\n<head>\n  <style>\n    div {\n      width: 100px;\n      height: 100px;\n      background: lightblue;\n      margin: 100px;\n    }\n  </style>\n</head>\n<body>\n  <div></div>\n  <div></div>\n</body>\n```\n**想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。**\n\n**改造一下代码**\n\n```html\n<head>\n  <style>\n    .container {\n      overflow: hidden;\n    }\n    p {\n      margin: 100px;\n      width: 100px;\n      height: 100px;\n      background: lightblue;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <p></p>\n  </div>\n  <div class=\"container\">\n    <p></p>\n  </div>\n</body>\n```\n\n**BFC 可以包含浮动的元素（清除内部浮动）**\n\n> **浮动原理：** 浮动的元素会脱离普通文档流，导致父元素的高度塌陷\n> **清楚浮动原理：** 触发父元素的BFC属性，使下面的子元素都处在父元素的同一个BFC区域之内，此时已成功清除浮动\n\n```html\n<head>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n    .parent {\n      border: 1px solid #000;\n      overflow: hidden;\n    }\n    .child {\n      float: left;\n      width: 100px;\n      height: 100px;\n      background: #eee;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n**BFC 可以阻止元素被float box重叠**\n\n```html\n<head>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n    .box1 {\n      float: left;\n      width: 100px;\n      height: 100px;\n      background: lightblue;\n    }\n    .box2 {\n      overflow: hidden;\n      height: 100px;\n      background: #eee;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"box1\">left float elements</div>\n  <div class=\"box2\">没有设置浮动，也没有触发BFC元素，width: 200px; height: 200px; background: #eee;</div>\n</body>\n```\n\n*PS：用于实现两列自适应布局，左边的宽度固定，右边的内容自适应宽度*\n\n## BFC 与 Layout\n\n在IE浏览器中不支持BFC标准，于是IE中有了Layout，**Layout 和 BFC 基本是等价的**，为了处理IE的兼容性，在需要触发BFC时，除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对IE浏览器使用`zoom: 1;`来触发IE浏览器的Layout。\n\n```html\n<head>\n  <style>\n    .parent {\n      width: 300px;\n      margin-top: 3rem;\n      border: 5px solid #fcc;\n    }\n    .child {\n      float: left;\n      border: 5px solid #f66;\n      width: 100px;\n      height: 100px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"parent\"></div>\n  <div class=\"child\"></div>\n</body>\n```\n\n**BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。**\n\n**文字环绕`float`**\n\n```html\n<head>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n    .box1 {\n      float: left;\n      width: 100px;\n      height: 100px;\n      background: #000;\n    }\n    .box2 {\n      height: 200px;\n      background: #aaa;\n    }\n    .red-box {\n      width: 30px;\n      height: 30px;\n      background: red;\n    }\n  </style>\n</head>\n<body>\n<div class=\"box-1\"></div>\n<div class=\"box-2\">\n  <div class=\"red-box\"></div>\n  <p>content</p><p>content</p><p>content</p><p>content</p><p>content</p>\n</div>\n</body>\n```\n\n**`float`的定义和用法：**\n\n> `float` 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，**使文本围绕在图像周围**，不过在CSS中，**任何元素都可以浮动**。浮动元素会生成一个块级框，而不论它本身是何种元素。\n\n可以看到，`box-2`盒子的左上角被`box-1`盒子覆盖了，而文本却没有被`box-1`盒子覆盖。\n\n盒子会被float的盒子所覆盖，但盒子但文本却没有被float的盒子覆盖\n\n是因为，**`float`设计初衷是为了使文本围绕在浮动对象的周围。**\n\n## 参考链接\n\n> [博客园-前端精选文摘：BFC 神奇背后的原理](https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html)\n> [知乎-10分钟理解BFC](https://zhuanlan.zhihu.com/p/25321647)\n> [CSS深入理解流体特性和BFC特性下多栏自适应布局](https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/)\n> [MDN-块格式化上下文（Block Formatting Context, BFC）](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)\n> [stackoverflow-How does the CSS Block Formatting Context work?](https://stackoverflow.com/questions/6196725/how-does-the-css-block-formatting-context-work)\n> [w3g-Block-formatting-contexts](https://www.w3.org/TR/CSS2/visuren.html#block-formatting)\n","source":"_posts/2020-06-28-深入理解CSS中BFC（Block-Formatting-Context）块级格式上下文.md","raw":"---\ntitle: 深入理解CSS中BFC（Block Formatting Context）块级格式上下文\ndate: 2020-06-28 00:56:32\ntags:\n  - 前端开发\n  - CSS\n  - CSS BFC\n  - CSS Layout\n  - CSS 布局\n  - CSS 块级格式上下文\ncategory:\n- [CSS]\n- 前端\n---\n\n## 常见定位方案\n\n**普通流 (normal flow)**\n> 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。\n\n**浮动 (float)**\n> 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。\n\n**绝对定位 (absolute positioning)**\n> 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。\n\n## BFC 概念\n\n> BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。\n**什么是BFC？**\n> 块格式化上下文（Block Formatting Context，BFC）是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。\n> 具有BFC特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。\n\n## 触发BFC\n\n**触发条件**\n> 根元素`<html>`\n> 浮动元素(元素的`float`属性不为`none`)\n> 绝对定位元素（元素的`position`为`absolute`或`fixed`）\n> 行内块元素 (元素的`display`为`inline-block`)\n> 表格单元格(元素的`display`为`table-cell`，`html`表格单元格默认为该值)\n> 表格标题(元素的`display`为`table-caption`，`html`表格标题默认为该值)\n> 匿名表格单元格元素(元素的`display`为`table`、`table-row`、`table-row-group`、`table-header-group`、`table-footer-group`（分别是`HTML table`、`row`、`tbody`、`thead`、`tfoot`的默认属性）或`inline-block`)\n> `overflow`值不为`visible`的快元素\n> `display`值为`flow-root`的元素\n> `contain` 值为`layout`、`content`或`paint`的元素\n> 弹性元素（`display`为`flex`或`inline-flex`元素的直接子元素）\n> 网格元素（`display`为`grid`或`inline-grid`元素的直接子元素）\n> 多列容器（元素的`column-count`或`column-width`不为`auto`，包括 `column-count`为1）\n> `column-span`为`all`的元素始终会创建一个新的*BFC*，即使该元素没有包裹在一个多列容器中\n\n## BFC 特性及应用\n\n**同一个BFC下外边距会发生折叠**\n\n```html\n<head>\n  <style>\n    div {\n      width: 100px;\n      height: 100px;\n      background: lightblue;\n      margin: 100px;\n    }\n  </style>\n</head>\n<body>\n  <div></div>\n  <div></div>\n</body>\n```\n**想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。**\n\n**改造一下代码**\n\n```html\n<head>\n  <style>\n    .container {\n      overflow: hidden;\n    }\n    p {\n      margin: 100px;\n      width: 100px;\n      height: 100px;\n      background: lightblue;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <p></p>\n  </div>\n  <div class=\"container\">\n    <p></p>\n  </div>\n</body>\n```\n\n**BFC 可以包含浮动的元素（清除内部浮动）**\n\n> **浮动原理：** 浮动的元素会脱离普通文档流，导致父元素的高度塌陷\n> **清楚浮动原理：** 触发父元素的BFC属性，使下面的子元素都处在父元素的同一个BFC区域之内，此时已成功清除浮动\n\n```html\n<head>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n    .parent {\n      border: 1px solid #000;\n      overflow: hidden;\n    }\n    .child {\n      float: left;\n      width: 100px;\n      height: 100px;\n      background: #eee;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n**BFC 可以阻止元素被float box重叠**\n\n```html\n<head>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n    .box1 {\n      float: left;\n      width: 100px;\n      height: 100px;\n      background: lightblue;\n    }\n    .box2 {\n      overflow: hidden;\n      height: 100px;\n      background: #eee;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"box1\">left float elements</div>\n  <div class=\"box2\">没有设置浮动，也没有触发BFC元素，width: 200px; height: 200px; background: #eee;</div>\n</body>\n```\n\n*PS：用于实现两列自适应布局，左边的宽度固定，右边的内容自适应宽度*\n\n## BFC 与 Layout\n\n在IE浏览器中不支持BFC标准，于是IE中有了Layout，**Layout 和 BFC 基本是等价的**，为了处理IE的兼容性，在需要触发BFC时，除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对IE浏览器使用`zoom: 1;`来触发IE浏览器的Layout。\n\n```html\n<head>\n  <style>\n    .parent {\n      width: 300px;\n      margin-top: 3rem;\n      border: 5px solid #fcc;\n    }\n    .child {\n      float: left;\n      border: 5px solid #f66;\n      width: 100px;\n      height: 100px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"parent\"></div>\n  <div class=\"child\"></div>\n</body>\n```\n\n**BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。**\n\n**文字环绕`float`**\n\n```html\n<head>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n    }\n    .box1 {\n      float: left;\n      width: 100px;\n      height: 100px;\n      background: #000;\n    }\n    .box2 {\n      height: 200px;\n      background: #aaa;\n    }\n    .red-box {\n      width: 30px;\n      height: 30px;\n      background: red;\n    }\n  </style>\n</head>\n<body>\n<div class=\"box-1\"></div>\n<div class=\"box-2\">\n  <div class=\"red-box\"></div>\n  <p>content</p><p>content</p><p>content</p><p>content</p><p>content</p>\n</div>\n</body>\n```\n\n**`float`的定义和用法：**\n\n> `float` 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，**使文本围绕在图像周围**，不过在CSS中，**任何元素都可以浮动**。浮动元素会生成一个块级框，而不论它本身是何种元素。\n\n可以看到，`box-2`盒子的左上角被`box-1`盒子覆盖了，而文本却没有被`box-1`盒子覆盖。\n\n盒子会被float的盒子所覆盖，但盒子但文本却没有被float的盒子覆盖\n\n是因为，**`float`设计初衷是为了使文本围绕在浮动对象的周围。**\n\n## 参考链接\n\n> [博客园-前端精选文摘：BFC 神奇背后的原理](https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html)\n> [知乎-10分钟理解BFC](https://zhuanlan.zhihu.com/p/25321647)\n> [CSS深入理解流体特性和BFC特性下多栏自适应布局](https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/)\n> [MDN-块格式化上下文（Block Formatting Context, BFC）](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)\n> [stackoverflow-How does the CSS Block Formatting Context work?](https://stackoverflow.com/questions/6196725/how-does-the-css-block-formatting-context-work)\n> [w3g-Block-formatting-contexts](https://www.w3.org/TR/CSS2/visuren.html#block-formatting)\n","slug":"深入理解CSS中BFC（Block-Formatting-Context）块级格式上下文","published":1,"updated":"2020-07-06T09:06:06.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvv60016m5sn48h89s8n","content":"<h2 id=\"常见定位方案\"><a href=\"#常见定位方案\" class=\"headerlink\" title=\"常见定位方案\"></a>常见定位方案</h2><p><strong>普通流 (normal flow)</strong></p>\n<blockquote>\n<p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p>\n</blockquote>\n<p><strong>浮动 (float)</strong></p>\n<blockquote>\n<p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p>\n</blockquote>\n<p><strong>绝对定位 (absolute positioning)</strong></p>\n<blockquote>\n<p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p>\n</blockquote>\n<h2 id=\"BFC-概念\"><a href=\"#BFC-概念\" class=\"headerlink\" title=\"BFC 概念\"></a>BFC 概念</h2><blockquote>\n<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。<br><strong>什么是BFC？</strong><br>块格式化上下文（Block Formatting Context，BFC）是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。<br>具有BFC特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。</p>\n</blockquote>\n<h2 id=\"触发BFC\"><a href=\"#触发BFC\" class=\"headerlink\" title=\"触发BFC\"></a>触发BFC</h2><p><strong>触发条件</strong></p>\n<blockquote>\n<p>根元素<code>&lt;html&gt;</code><br>浮动元素(元素的<code>float</code>属性不为<code>none</code>)<br>绝对定位元素（元素的<code>position</code>为<code>absolute</code>或<code>fixed</code>）<br>行内块元素 (元素的<code>display</code>为<code>inline-block</code>)<br>表格单元格(元素的<code>display</code>为<code>table-cell</code>，<code>html</code>表格单元格默认为该值)<br>表格标题(元素的<code>display</code>为<code>table-caption</code>，<code>html</code>表格标题默认为该值)<br>匿名表格单元格元素(元素的<code>display</code>为<code>table</code>、<code>table-row</code>、<code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是<code>HTML table</code>、<code>row</code>、<code>tbody</code>、<code>thead</code>、<code>tfoot</code>的默认属性）或<code>inline-block</code>)<br><code>overflow</code>值不为<code>visible</code>的快元素<br><code>display</code>值为<code>flow-root</code>的元素<br><code>contain</code> 值为<code>layout</code>、<code>content</code>或<code>paint</code>的元素<br>弹性元素（<code>display</code>为<code>flex</code>或<code>inline-flex</code>元素的直接子元素）<br>网格元素（<code>display</code>为<code>grid</code>或<code>inline-grid</code>元素的直接子元素）<br>多列容器（元素的<code>column-count</code>或<code>column-width</code>不为<code>auto</code>，包括 <code>column-count</code>为1）<br><code>column-span</code>为<code>all</code>的元素始终会创建一个新的<em>BFC</em>，即使该元素没有包裹在一个多列容器中</p>\n</blockquote>\n<h2 id=\"BFC-特性及应用\"><a href=\"#BFC-特性及应用\" class=\"headerlink\" title=\"BFC 特性及应用\"></a>BFC 特性及应用</h2><p><strong>同一个BFC下外边距会发生折叠</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    div &#123;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      background: lightblue;</span><br><span class=\"line\">      margin: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</strong></p>\n<p><strong>改造一下代码</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\">      margin: 100px;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      background: lightblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>BFC 可以包含浮动的元素（清除内部浮动）</strong></p>\n<blockquote>\n<p><strong>浮动原理：</strong> 浮动的元素会脱离普通文档流，导致父元素的高度塌陷<br><strong>清楚浮动原理：</strong> 触发父元素的BFC属性，使下面的子元素都处在父元素的同一个BFC区域之内，此时已成功清除浮动</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>BFC 可以阻止元素被float box重叠</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box1</span> &#123;</span></span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      background: lightblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box2</span> &#123;</span></span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span>&gt;</span>left float elements<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box2\"</span>&gt;</span>没有设置浮动，也没有触发BFC元素，width: 200px; height: 200px; background: #eee;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>PS：用于实现两列自适应布局，左边的宽度固定，右边的内容自适应宽度</em></p>\n<h2 id=\"BFC-与-Layout\"><a href=\"#BFC-与-Layout\" class=\"headerlink\" title=\"BFC 与 Layout\"></a>BFC 与 Layout</h2><p>在IE浏览器中不支持BFC标准，于是IE中有了Layout，<strong>Layout 和 BFC 基本是等价的</strong>，为了处理IE的兼容性，在需要触发BFC时，除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对IE浏览器使用<code>zoom: 1;</code>来触发IE浏览器的Layout。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">      width: 300px;</span><br><span class=\"line\">      margin-top: 3rem;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">border</span>: 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#fcc</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">      float: left;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">border</span>: 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#f66</span>;</span></span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</strong></p>\n<p><strong>文字环绕<code>float</code></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box1</span> &#123;</span></span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box2</span> &#123;</span></span><br><span class=\"line\">      height: 200px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#aaa</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.red-box</span> &#123;</span></span><br><span class=\"line\">      width: 30px;</span><br><span class=\"line\">      height: 30px;</span><br><span class=\"line\">      background: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red-box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>float</code>的定义和用法：</strong></p>\n<blockquote>\n<p><code>float</code> 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，<strong>使文本围绕在图像周围</strong>，不过在CSS中，<strong>任何元素都可以浮动</strong>。浮动元素会生成一个块级框，而不论它本身是何种元素。</p>\n</blockquote>\n<p>可以看到，<code>box-2</code>盒子的左上角被<code>box-1</code>盒子覆盖了，而文本却没有被<code>box-1</code>盒子覆盖。</p>\n<p>盒子会被float的盒子所覆盖，但盒子但文本却没有被float的盒子覆盖</p>\n<p>是因为，<strong><code>float</code>设计初衷是为了使文本围绕在浮动对象的周围。</strong></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\" target=\"_blank\" rel=\"noopener\">博客园-前端精选文摘：BFC 神奇背后的原理</a><br><a href=\"https://zhuanlan.zhihu.com/p/25321647\" target=\"_blank\" rel=\"noopener\">知乎-10分钟理解BFC</a><br><a href=\"https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/\" target=\"_blank\" rel=\"noopener\">CSS深入理解流体特性和BFC特性下多栏自适应布局</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"noopener\">MDN-块格式化上下文（Block Formatting Context, BFC）</a><br><a href=\"https://stackoverflow.com/questions/6196725/how-does-the-css-block-formatting-context-work\" target=\"_blank\" rel=\"noopener\">stackoverflow-How does the CSS Block Formatting Context work?</a><br><a href=\"https://www.w3.org/TR/CSS2/visuren.html#block-formatting\" target=\"_blank\" rel=\"noopener\">w3g-Block-formatting-contexts</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常见定位方案\"><a href=\"#常见定位方案\" class=\"headerlink\" title=\"常见定位方案\"></a>常见定位方案</h2><p><strong>普通流 (normal flow)</strong></p>\n<blockquote>\n<p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p>\n</blockquote>\n<p><strong>浮动 (float)</strong></p>\n<blockquote>\n<p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p>\n</blockquote>\n<p><strong>绝对定位 (absolute positioning)</strong></p>\n<blockquote>\n<p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</p>\n</blockquote>\n<h2 id=\"BFC-概念\"><a href=\"#BFC-概念\" class=\"headerlink\" title=\"BFC 概念\"></a>BFC 概念</h2><blockquote>\n<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。<br><strong>什么是BFC？</strong><br>块格式化上下文（Block Formatting Context，BFC）是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。<br>具有BFC特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。</p>\n</blockquote>\n<h2 id=\"触发BFC\"><a href=\"#触发BFC\" class=\"headerlink\" title=\"触发BFC\"></a>触发BFC</h2><p><strong>触发条件</strong></p>\n<blockquote>\n<p>根元素<code>&lt;html&gt;</code><br>浮动元素(元素的<code>float</code>属性不为<code>none</code>)<br>绝对定位元素（元素的<code>position</code>为<code>absolute</code>或<code>fixed</code>）<br>行内块元素 (元素的<code>display</code>为<code>inline-block</code>)<br>表格单元格(元素的<code>display</code>为<code>table-cell</code>，<code>html</code>表格单元格默认为该值)<br>表格标题(元素的<code>display</code>为<code>table-caption</code>，<code>html</code>表格标题默认为该值)<br>匿名表格单元格元素(元素的<code>display</code>为<code>table</code>、<code>table-row</code>、<code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是<code>HTML table</code>、<code>row</code>、<code>tbody</code>、<code>thead</code>、<code>tfoot</code>的默认属性）或<code>inline-block</code>)<br><code>overflow</code>值不为<code>visible</code>的快元素<br><code>display</code>值为<code>flow-root</code>的元素<br><code>contain</code> 值为<code>layout</code>、<code>content</code>或<code>paint</code>的元素<br>弹性元素（<code>display</code>为<code>flex</code>或<code>inline-flex</code>元素的直接子元素）<br>网格元素（<code>display</code>为<code>grid</code>或<code>inline-grid</code>元素的直接子元素）<br>多列容器（元素的<code>column-count</code>或<code>column-width</code>不为<code>auto</code>，包括 <code>column-count</code>为1）<br><code>column-span</code>为<code>all</code>的元素始终会创建一个新的<em>BFC</em>，即使该元素没有包裹在一个多列容器中</p>\n</blockquote>\n<h2 id=\"BFC-特性及应用\"><a href=\"#BFC-特性及应用\" class=\"headerlink\" title=\"BFC 特性及应用\"></a>BFC 特性及应用</h2><p><strong>同一个BFC下外边距会发生折叠</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    div &#123;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      background: lightblue;</span><br><span class=\"line\">      margin: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</strong></p>\n<p><strong>改造一下代码</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\">      margin: 100px;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      background: lightblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>BFC 可以包含浮动的元素（清除内部浮动）</strong></p>\n<blockquote>\n<p><strong>浮动原理：</strong> 浮动的元素会脱离普通文档流，导致父元素的高度塌陷<br><strong>清楚浮动原理：</strong> 触发父元素的BFC属性，使下面的子元素都处在父元素的同一个BFC区域之内，此时已成功清除浮动</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>BFC 可以阻止元素被float box重叠</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box1</span> &#123;</span></span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">      background: lightblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box2</span> &#123;</span></span><br><span class=\"line\">      overflow: hidden;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#eee</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span>&gt;</span>left float elements<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box2\"</span>&gt;</span>没有设置浮动，也没有触发BFC元素，width: 200px; height: 200px; background: #eee;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>PS：用于实现两列自适应布局，左边的宽度固定，右边的内容自适应宽度</em></p>\n<h2 id=\"BFC-与-Layout\"><a href=\"#BFC-与-Layout\" class=\"headerlink\" title=\"BFC 与 Layout\"></a>BFC 与 Layout</h2><p>在IE浏览器中不支持BFC标准，于是IE中有了Layout，<strong>Layout 和 BFC 基本是等价的</strong>，为了处理IE的兼容性，在需要触发BFC时，除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对IE浏览器使用<code>zoom: 1;</code>来触发IE浏览器的Layout。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\">      width: 300px;</span><br><span class=\"line\">      margin-top: 3rem;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">border</span>: 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#fcc</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\">      float: left;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">border</span>: 5<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#f66</span>;</span></span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</strong></p>\n<p><strong>文字环绕<code>float</code></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    * &#123;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box1</span> &#123;</span></span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      width: 100px;</span><br><span class=\"line\">      height: 100px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#000</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.box2</span> &#123;</span></span><br><span class=\"line\">      height: 200px;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#aaa</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.red-box</span> &#123;</span></span><br><span class=\"line\">      width: 30px;</span><br><span class=\"line\">      height: 30px;</span><br><span class=\"line\">      background: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box-2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red-box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>float</code>的定义和用法：</strong></p>\n<blockquote>\n<p><code>float</code> 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，<strong>使文本围绕在图像周围</strong>，不过在CSS中，<strong>任何元素都可以浮动</strong>。浮动元素会生成一个块级框，而不论它本身是何种元素。</p>\n</blockquote>\n<p>可以看到，<code>box-2</code>盒子的左上角被<code>box-1</code>盒子覆盖了，而文本却没有被<code>box-1</code>盒子覆盖。</p>\n<p>盒子会被float的盒子所覆盖，但盒子但文本却没有被float的盒子覆盖</p>\n<p>是因为，<strong><code>float</code>设计初衷是为了使文本围绕在浮动对象的周围。</strong></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\" target=\"_blank\" rel=\"noopener\">博客园-前端精选文摘：BFC 神奇背后的原理</a><br><a href=\"https://zhuanlan.zhihu.com/p/25321647\" target=\"_blank\" rel=\"noopener\">知乎-10分钟理解BFC</a><br><a href=\"https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/\" target=\"_blank\" rel=\"noopener\">CSS深入理解流体特性和BFC特性下多栏自适应布局</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"noopener\">MDN-块格式化上下文（Block Formatting Context, BFC）</a><br><a href=\"https://stackoverflow.com/questions/6196725/how-does-the-css-block-formatting-context-work\" target=\"_blank\" rel=\"noopener\">stackoverflow-How does the CSS Block Formatting Context work?</a><br><a href=\"https://www.w3.org/TR/CSS2/visuren.html#block-formatting\" target=\"_blank\" rel=\"noopener\">w3g-Block-formatting-contexts</a></p>\n</blockquote>\n"},{"title":"JavaScript 获取当前时间戳的几种方式","date":"2020-04-21T07:43:33.000Z","_content":"\n## [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)\n\n```javascript\nlet timestamp = Date.parse(new Date());\n\nConsole.log(timestamp);\n// 1587452848000 获取的时间戳是把毫秒改成000显示，因为这种方式只精确到秒\n```\n\n## [`Date.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)\n\n```javascript\nlet timestamp = (new Date()).valueOf();\n\nconsole.log(timestamp);\n// 1587452987750 获取当前毫秒的时间戳\n```\n\n## [`Date.prototype.getTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)\n\n```javascript\nlet timestamp = new Date().getTime();\n\nconsole.log(timestamp);\n// 1587453889920 获取当前毫秒的时间戳\n```\n","source":"_posts/2020-04-21-JavaScript-获取当前时间戳的几种方式.md","raw":"---\ntitle: JavaScript 获取当前时间戳的几种方式\ndate: 2020-04-21 15:43:33\ntags:\n- 前端\n- 前端基础\n- JavaScript\n- JavaScript 基础\n- JavaScript 时间戳\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n## [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)\n\n```javascript\nlet timestamp = Date.parse(new Date());\n\nConsole.log(timestamp);\n// 1587452848000 获取的时间戳是把毫秒改成000显示，因为这种方式只精确到秒\n```\n\n## [`Date.prototype.valueOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)\n\n```javascript\nlet timestamp = (new Date()).valueOf();\n\nconsole.log(timestamp);\n// 1587452987750 获取当前毫秒的时间戳\n```\n\n## [`Date.prototype.getTime()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)\n\n```javascript\nlet timestamp = new Date().getTime();\n\nconsole.log(timestamp);\n// 1587453889920 获取当前毫秒的时间戳\n```\n","slug":"JavaScript-获取当前时间戳的几种方式","published":1,"updated":"2020-04-29T06:48:53.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvve0018m5sne8peewk4","content":"<h2 id=\"Date-parse\"><a href=\"#Date-parse\" class=\"headerlink\" title=\"Date.parse()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\" target=\"_blank\" rel=\"noopener\"><code>Date.parse()</code></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timestamp = <span class=\"built_in\">Date</span>.parse(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">Console.log(timestamp);</span><br><span class=\"line\"><span class=\"comment\">// 1587452848000 获取的时间戳是把毫秒改成000显示，因为这种方式只精确到秒</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Date-prototype-valueOf\"><a href=\"#Date-prototype-valueOf\" class=\"headerlink\" title=\"Date.prototype.valueOf()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\" target=\"_blank\" rel=\"noopener\"><code>Date.prototype.valueOf()</code></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timestamp = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).valueOf();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(timestamp);</span><br><span class=\"line\"><span class=\"comment\">// 1587452987750 获取当前毫秒的时间戳</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Date-prototype-getTime\"><a href=\"#Date-prototype-getTime\" class=\"headerlink\" title=\"Date.prototype.getTime()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\" target=\"_blank\" rel=\"noopener\"><code>Date.prototype.getTime()</code></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(timestamp);</span><br><span class=\"line\"><span class=\"comment\">// 1587453889920 获取当前毫秒的时间戳</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Date-parse\"><a href=\"#Date-parse\" class=\"headerlink\" title=\"Date.parse()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\" target=\"_blank\" rel=\"noopener\"><code>Date.parse()</code></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timestamp = <span class=\"built_in\">Date</span>.parse(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">Console.log(timestamp);</span><br><span class=\"line\"><span class=\"comment\">// 1587452848000 获取的时间戳是把毫秒改成000显示，因为这种方式只精确到秒</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Date-prototype-valueOf\"><a href=\"#Date-prototype-valueOf\" class=\"headerlink\" title=\"Date.prototype.valueOf()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\" target=\"_blank\" rel=\"noopener\"><code>Date.prototype.valueOf()</code></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timestamp = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).valueOf();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(timestamp);</span><br><span class=\"line\"><span class=\"comment\">// 1587452987750 获取当前毫秒的时间戳</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Date-prototype-getTime\"><a href=\"#Date-prototype-getTime\" class=\"headerlink\" title=\"Date.prototype.getTime()\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\" target=\"_blank\" rel=\"noopener\"><code>Date.prototype.getTime()</code></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(timestamp);</span><br><span class=\"line\"><span class=\"comment\">// 1587453889920 获取当前毫秒的时间戳</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Mac 常见的一些问题","date":"2020-04-29T06:43:45.000Z","_content":"\n\n## 外接显示器，屏幕不亮、无信号输入问题\n\n**背景：**\n\nMac长时间连接显示器，不经常关机，会出现这种情况，显示器不亮、显示无信号输入。\n\n尝试各种拔线、插入，电脑重启，`系统设置` -> `显示器` -> 按住`option`键 -> 检测显示器 也不管用\n\n\n**解决办法：**\n\n1、强制关机\n\n```sh\nShift(⇧) + Control(⌃) + Option(⌥) + 关机键 // 强制关机\n```\n2、重启电脑\n\n电脑重启后再重新连接显示器即可\n\n\n## 运行速度变慢，重置`NVRAM` or `PRAM`\n\n**解决办法：**\n\n1、点击左上角苹果图标 \n2、选择关机\n3、找到电脑上对应的`Option(⌥)`、`Command(⌘)`、`P`、`R`键并同时按住\n4、然后出现带有苹果标志的黑屏继续按住Mac重启，大概15秒后放开\n\n\n\n## 参考连接\n\n> [显示器连接mac后，屏幕不亮无信号输入问题](https://blog.csdn.net/pearl8899/article/details/80746651)\n> [Reset NVRAM or PRAM on your Mac](https://support.apple.com/en-us/HT204063)\n","source":"_posts/2020-04-29-Mac-外接显示器不响应问题.md","raw":"---\ntitle: Mac 常见的一些问题\ndate: 2020-04-29 14:43:45\ntags:\n- Mac\n- MacBook Pro\n- macOS Catalina\ncategory:\n- [Mac]\n- [macOS]\n- [硬件问题]\n---\n\n\n## 外接显示器，屏幕不亮、无信号输入问题\n\n**背景：**\n\nMac长时间连接显示器，不经常关机，会出现这种情况，显示器不亮、显示无信号输入。\n\n尝试各种拔线、插入，电脑重启，`系统设置` -> `显示器` -> 按住`option`键 -> 检测显示器 也不管用\n\n\n**解决办法：**\n\n1、强制关机\n\n```sh\nShift(⇧) + Control(⌃) + Option(⌥) + 关机键 // 强制关机\n```\n2、重启电脑\n\n电脑重启后再重新连接显示器即可\n\n\n## 运行速度变慢，重置`NVRAM` or `PRAM`\n\n**解决办法：**\n\n1、点击左上角苹果图标 \n2、选择关机\n3、找到电脑上对应的`Option(⌥)`、`Command(⌘)`、`P`、`R`键并同时按住\n4、然后出现带有苹果标志的黑屏继续按住Mac重启，大概15秒后放开\n\n\n\n## 参考连接\n\n> [显示器连接mac后，屏幕不亮无信号输入问题](https://blog.csdn.net/pearl8899/article/details/80746651)\n> [Reset NVRAM or PRAM on your Mac](https://support.apple.com/en-us/HT204063)\n","slug":"Mac-外接显示器不响应问题","published":1,"updated":"2020-04-29T07:09:38.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvvh0019m5snhzlmdcgo","content":"<h2 id=\"外接显示器，屏幕不亮、无信号输入问题\"><a href=\"#外接显示器，屏幕不亮、无信号输入问题\" class=\"headerlink\" title=\"外接显示器，屏幕不亮、无信号输入问题\"></a>外接显示器，屏幕不亮、无信号输入问题</h2><p><strong>背景：</strong></p>\n<p>Mac长时间连接显示器，不经常关机，会出现这种情况，显示器不亮、显示无信号输入。</p>\n<p>尝试各种拔线、插入，电脑重启，<code>系统设置</code> -&gt; <code>显示器</code> -&gt; 按住<code>option</code>键 -&gt; 检测显示器 也不管用</p>\n<p><strong>解决办法：</strong></p>\n<p>1、强制关机</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shift(⇧) + Control(⌃) + Option(⌥) + 关机键 // 强制关机</span><br></pre></td></tr></table></figure>\n<p>2、重启电脑</p>\n<p>电脑重启后再重新连接显示器即可</p>\n<h2 id=\"运行速度变慢，重置NVRAM-or-PRAM\"><a href=\"#运行速度变慢，重置NVRAM-or-PRAM\" class=\"headerlink\" title=\"运行速度变慢，重置NVRAM or PRAM\"></a>运行速度变慢，重置<code>NVRAM</code> or <code>PRAM</code></h2><p><strong>解决办法：</strong></p>\n<p>1、点击左上角苹果图标<br>2、选择关机<br>3、找到电脑上对应的<code>Option(⌥)</code>、<code>Command(⌘)</code>、<code>P</code>、<code>R</code>键并同时按住<br>4、然后出现带有苹果标志的黑屏继续按住Mac重启，大概15秒后放开</p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/pearl8899/article/details/80746651\" target=\"_blank\" rel=\"noopener\">显示器连接mac后，屏幕不亮无信号输入问题</a><br><a href=\"https://support.apple.com/en-us/HT204063\" target=\"_blank\" rel=\"noopener\">Reset NVRAM or PRAM on your Mac</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"外接显示器，屏幕不亮、无信号输入问题\"><a href=\"#外接显示器，屏幕不亮、无信号输入问题\" class=\"headerlink\" title=\"外接显示器，屏幕不亮、无信号输入问题\"></a>外接显示器，屏幕不亮、无信号输入问题</h2><p><strong>背景：</strong></p>\n<p>Mac长时间连接显示器，不经常关机，会出现这种情况，显示器不亮、显示无信号输入。</p>\n<p>尝试各种拔线、插入，电脑重启，<code>系统设置</code> -&gt; <code>显示器</code> -&gt; 按住<code>option</code>键 -&gt; 检测显示器 也不管用</p>\n<p><strong>解决办法：</strong></p>\n<p>1、强制关机</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shift(⇧) + Control(⌃) + Option(⌥) + 关机键 // 强制关机</span><br></pre></td></tr></table></figure>\n<p>2、重启电脑</p>\n<p>电脑重启后再重新连接显示器即可</p>\n<h2 id=\"运行速度变慢，重置NVRAM-or-PRAM\"><a href=\"#运行速度变慢，重置NVRAM-or-PRAM\" class=\"headerlink\" title=\"运行速度变慢，重置NVRAM or PRAM\"></a>运行速度变慢，重置<code>NVRAM</code> or <code>PRAM</code></h2><p><strong>解决办法：</strong></p>\n<p>1、点击左上角苹果图标<br>2、选择关机<br>3、找到电脑上对应的<code>Option(⌥)</code>、<code>Command(⌘)</code>、<code>P</code>、<code>R</code>键并同时按住<br>4、然后出现带有苹果标志的黑屏继续按住Mac重启，大概15秒后放开</p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/pearl8899/article/details/80746651\" target=\"_blank\" rel=\"noopener\">显示器连接mac后，屏幕不亮无信号输入问题</a><br><a href=\"https://support.apple.com/en-us/HT204063\" target=\"_blank\" rel=\"noopener\">Reset NVRAM or PRAM on your Mac</a></p>\n</blockquote>\n"},{"title":"JavaScript中常用的继承方案","date":"2020-06-29T12:30:16.000Z","category":null,"_content":"\n> 大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，**JavaScript语言的继承不通过class，而是通过“原型对象”（prototype）实现**\n\n**什么是原型以及什么是原型链**\n\n> 原型（prototype）：\n\n> 原型链（prototype chain）：\n\n**JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享**\n\n## 原型链继承\n\n## 借用构造函数继承\n\n## 组合继承\n\n## 原型式继承\n\n## 寄生式继承\n\n## 寄生组合式继承\n\n## 混入方式继承多个对象\n\n## [`Object.create`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)实现类式继承\n\n```javascript\n// Shape - superclass\nfunction Shape () {\n  this.x = 0;\n  this.y = 0;\n}\n// superclass method\nShape.prototype.move = function (x, y) {\n  this.x += x;\n  this.y += y;\n  console.log('Shape moved')\n}\n\n// Rectangle - superclass\nfunction Rectangle() {\n  Shape.call(this); // call super constructor\n}\n\n// subclass extends superclass\n\n```\n\n## ES6 `Class`类继承`extends`\n\n## 参考链接\n\n> [MDM-继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n> [Javascript继承机制的设计思想](http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html)\n> [JavaScript常用八种继承方案](https://juejin.im/post/5bcb2e295188255c55472db0)\n> [JavaScript实现继承的多种方式（ES5）](https://juejin.im/post/5b188852e51d4506df277095)\n> [阮一峰-javascript继承思想](Javascript继承机制的设计思想)\n> [阮一峰-javascript教程-对象与继承](https://javascript.ruanyifeng.com/oop/prototype.html)\n> [阮一峰-javascript教程-对象的继承](https://wangdoc.com/javascript/oop/prototype.html)\n\nhttps://juejin.im/post/5e2ff7dce51d4558021a1a4d\n","source":"_posts/2020-06-29-JavaScript中常用的继承方案.md","raw":"---\ntitle: JavaScript中常用的继承方案\ndate: 2020-06-29 20:30:16\ntags:\ncategory:\n---\n\n> 大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，**JavaScript语言的继承不通过class，而是通过“原型对象”（prototype）实现**\n\n**什么是原型以及什么是原型链**\n\n> 原型（prototype）：\n\n> 原型链（prototype chain）：\n\n**JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享**\n\n## 原型链继承\n\n## 借用构造函数继承\n\n## 组合继承\n\n## 原型式继承\n\n## 寄生式继承\n\n## 寄生组合式继承\n\n## 混入方式继承多个对象\n\n## [`Object.create`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)实现类式继承\n\n```javascript\n// Shape - superclass\nfunction Shape () {\n  this.x = 0;\n  this.y = 0;\n}\n// superclass method\nShape.prototype.move = function (x, y) {\n  this.x += x;\n  this.y += y;\n  console.log('Shape moved')\n}\n\n// Rectangle - superclass\nfunction Rectangle() {\n  Shape.call(this); // call super constructor\n}\n\n// subclass extends superclass\n\n```\n\n## ES6 `Class`类继承`extends`\n\n## 参考链接\n\n> [MDM-继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n> [Javascript继承机制的设计思想](http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html)\n> [JavaScript常用八种继承方案](https://juejin.im/post/5bcb2e295188255c55472db0)\n> [JavaScript实现继承的多种方式（ES5）](https://juejin.im/post/5b188852e51d4506df277095)\n> [阮一峰-javascript继承思想](Javascript继承机制的设计思想)\n> [阮一峰-javascript教程-对象与继承](https://javascript.ruanyifeng.com/oop/prototype.html)\n> [阮一峰-javascript教程-对象的继承](https://wangdoc.com/javascript/oop/prototype.html)\n\nhttps://juejin.im/post/5e2ff7dce51d4558021a1a4d\n","slug":"JavaScript中常用的继承方案","published":1,"updated":"2020-07-07T06:27:25.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvvm001cm5snhz3534da","content":"<blockquote>\n<p>大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，<strong>JavaScript语言的继承不通过class，而是通过“原型对象”（prototype）实现</strong></p>\n</blockquote>\n<p><strong>什么是原型以及什么是原型链</strong></p>\n<blockquote>\n<p>原型（prototype）：</p>\n</blockquote>\n<blockquote>\n<p>原型链（prototype chain）：</p>\n</blockquote>\n<p><strong>JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享</strong></p>\n<h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><h2 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h2><h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2><h2 id=\"混入方式继承多个对象\"><a href=\"#混入方式继承多个对象\" class=\"headerlink\" title=\"混入方式继承多个对象\"></a>混入方式继承多个对象</h2><h2 id=\"Object-create实现类式继承\"><a href=\"#Object-create实现类式继承\" class=\"headerlink\" title=\"Object.create实现类式继承\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\"><code>Object.create</code></a>实现类式继承</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Shape - superclass</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Shape</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// superclass method</span></span><br><span class=\"line\">Shape.prototype.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x += x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y += y;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Shape moved'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Rectangle - superclass</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Shape.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// call super constructor</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// subclass extends superclass</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6-Class类继承extends\"><a href=\"#ES6-Class类继承extends\" class=\"headerlink\" title=\"ES6 Class类继承extends\"></a>ES6 <code>Class</code>类继承<code>extends</code></h2><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">MDM-继承与原型链</a><br><a href=\"http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript继承机制的设计思想</a><br><a href=\"https://juejin.im/post/5bcb2e295188255c55472db0\" target=\"_blank\" rel=\"noopener\">JavaScript常用八种继承方案</a><br><a href=\"https://juejin.im/post/5b188852e51d4506df277095\" target=\"_blank\" rel=\"noopener\">JavaScript实现继承的多种方式（ES5）</a><br><a href=\"Javascript继承机制的设计思想\">阮一峰-javascript继承思想</a><br><a href=\"https://javascript.ruanyifeng.com/oop/prototype.html\" target=\"_blank\" rel=\"noopener\">阮一峰-javascript教程-对象与继承</a><br><a href=\"https://wangdoc.com/javascript/oop/prototype.html\" target=\"_blank\" rel=\"noopener\">阮一峰-javascript教程-对象的继承</a></p>\n</blockquote>\n<p><a href=\"https://juejin.im/post/5e2ff7dce51d4558021a1a4d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5e2ff7dce51d4558021a1a4d</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>大部分面向对象的编程语言，都是通过“类”（class）实现对象的继承。传统上，<strong>JavaScript语言的继承不通过class，而是通过“原型对象”（prototype）实现</strong></p>\n</blockquote>\n<p><strong>什么是原型以及什么是原型链</strong></p>\n<blockquote>\n<p>原型（prototype）：</p>\n</blockquote>\n<blockquote>\n<p>原型链（prototype chain）：</p>\n</blockquote>\n<p><strong>JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享</strong></p>\n<h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><h2 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h2><h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2><h2 id=\"混入方式继承多个对象\"><a href=\"#混入方式继承多个对象\" class=\"headerlink\" title=\"混入方式继承多个对象\"></a>混入方式继承多个对象</h2><h2 id=\"Object-create实现类式继承\"><a href=\"#Object-create实现类式继承\" class=\"headerlink\" title=\"Object.create实现类式继承\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\"><code>Object.create</code></a>实现类式继承</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Shape - superclass</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Shape</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// superclass method</span></span><br><span class=\"line\">Shape.prototype.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x += x;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y += y;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Shape moved'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Rectangle - superclass</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Shape.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// call super constructor</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// subclass extends superclass</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6-Class类继承extends\"><a href=\"#ES6-Class类继承extends\" class=\"headerlink\" title=\"ES6 Class类继承extends\"></a>ES6 <code>Class</code>类继承<code>extends</code></h2><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">MDM-继承与原型链</a><br><a href=\"http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript继承机制的设计思想</a><br><a href=\"https://juejin.im/post/5bcb2e295188255c55472db0\" target=\"_blank\" rel=\"noopener\">JavaScript常用八种继承方案</a><br><a href=\"https://juejin.im/post/5b188852e51d4506df277095\" target=\"_blank\" rel=\"noopener\">JavaScript实现继承的多种方式（ES5）</a><br><a href=\"Javascript继承机制的设计思想\">阮一峰-javascript继承思想</a><br><a href=\"https://javascript.ruanyifeng.com/oop/prototype.html\" target=\"_blank\" rel=\"noopener\">阮一峰-javascript教程-对象与继承</a><br><a href=\"https://wangdoc.com/javascript/oop/prototype.html\" target=\"_blank\" rel=\"noopener\">阮一峰-javascript教程-对象的继承</a></p>\n</blockquote>\n<p><a href=\"https://juejin.im/post/5e2ff7dce51d4558021a1a4d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5e2ff7dce51d4558021a1a4d</a></p>\n"},{"title":"Vue的生命周期过程","date":"2020-07-01T11:32:15.000Z","_content":"\n## 生命周期钩子（Lifecycle hooks）\n\n**Vue生命周期的流程图**\n![vue-life-cycle-hooks](../../../../images/vue_life_cycle.png)\n\n> 来源：[Vue生命周期图示](https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA)\n\n### [`beforeCreate()`](https://cn.vuejs.org/v2/api/#beforeCreate)\n\n> 在实例初始化之后，数据观测 (`data observer`) 和 `event/watcher` 事件配置之前被调用。\n> 简单理解就是整个页面创建之前调用，创建之前调用的钩子函数\n\n### [`created()`](https://cn.vuejs.org/v2/api/#created)\n\n> 在实例创建完成后被立即调用。\n> 实例已完成以下的配置：数据观测 (`data observer`)，`property`和方法的运算，`watch/event` 事件回调。挂载阶段还没开始，`$el property` 目前尚不可用。\n\n### [`beforeMount()`](https://cn.vuejs.org/v2/api/#beforeMount)\n\n> 在挂载开始之前被调用\n> 相关的`render`函数首次被调用。\n\n### [`mounted()`](https://cn.vuejs.org/v2/api/#mounted)\n\n> 实例被挂载成功后调用，这时 `el` 被新创建的 `vm.$el` 替换了。\n\n### [`beforeUpdate()`](https://cn.vuejs.org/v2/api/#beforeUpdate)\n\n> 数据更新时调用，数据变化之前，发生在`Virtual DOM`打补丁之前。\n\n### [`updated()`](https://cn.vuejs.org/v2/api/#updated)\n\n> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n> 组件 DOM 已经更新，此时可以执行依赖于DOM的操作。\n> 如果要相应状态改变，通常最好使用计算属性（`Computer`）或 `Watcher` 取而代之。\n\n### [`activated()`](https://cn.vuejs.org/v2/api/#activated)\n\n> 被 `keep-alive` 缓存的组件激活时调用。\n\n### [`deactivated()`](https://cn.vuejs.org/v2/api/#deactivated)\n\n> 被 `keep-alive` 缓存的组件停用时调用。\n\n### [`beforeDestroy()`](https://cn.vuejs.org/v2/api/#beforeDestroy)\n\n> 实例销毁之前调用。（实例还可以使用）\n\n### [`destroyed()`](https://cn.vuejs.org/v2/api/#destroyed)\n\n> 实例销毁后调用。被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。\n\n### [`errorCaptured`](https://cn.vuejs.org/v2/api/#errorCaptured)\n\n> 捕获一个来自子孙组件的错误时被调用。\n> 接受三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。\n\n## Vue单个组件生命周期的一个完整执行过程\n\n```javascript\nbeforeCreate()-> created()-> beforeMounted()-> mounted()->\nbeforeUpdate()-> updated()-> activated()-> deactivated()-> beforeDestroy()-> destroyed()-> errorCaptured()\n```\n\n**DOM 渲染在 哪个周期中就已经完成？**\n> DOM 渲染在 mounted() 中就已经完成了。\n\n**简单描述每个周期具体适合哪些场景？**\n> `beforeCreate()`: 可以在这加个`loading`事件，在加载实例时触发\n> `created()` : 初始化完成时的事件写在这里，如在这结束`loading`事件，异步请求也适宜在这里调用\n> `mounted()`: 挂载元素，获取到DOM节点\n> `updated()`: 如果对数据统一处理，在这里写上相应函数\n> `beforeDestroy()`: 可以做一个确认停止事件的确认框\n> `nextTick`: 更新数据后立即操作DOM\n\n那么，当父子组件嵌套时，父组件和子组件各拥有各自独立的钩子函数，**这些父子组件的这些钩子是如何交融执行，且执行顺序又是怎样的呢?**\n\n## Vue父子组件生命周期执行顺序\n\n> 组件，分别在他们的钩子函数中打印日志，观察执行顺序。\n> 结论：父组件先创建，然后子组件创建；子组件先挂载，然后父组件挂载。\n\n```javascript\n父beforeCreate()-> 父create()-> 子beforeCreate() -> 子created() -> 子mounted() -> 父mounted()\n```\n\n> 子组件挂载完成后，父组件还未挂载。组件数据回显的时候，在父组件`mounted`中获取api的数据，子组件的`mounted`是拿不到的。\n\n**加载渲染过程**\n```javascript\n父beforeCreate()-> 父created()-> 父beforeMount()-> 子beforeCreate()-> 子created()-> 子beforeMount()-> 子mounted()-> 父mounted()\n```\n\n**更新过程**\n```javascript\n父beforeUpdate()-> 子beforeUpdate()-> 子updated()-> 父updated()\n```\n\n**销毁过程**\n```javascript\n父beforeDestroy()-> 子beforeDestroy()-> 子destroyed()-> 父destroyed()\n```\n\n**常用钩子简易版**\n```javascript\n父create()-> 子created()-> 子mounted()-> 父mounted()\n```\n\n## 参考链接\n\n> [Lifecycle Hooks](https://vuejs.org/v2/guide/migration.html#Lifecycle-Hooks)\n> [Vue中父子组件生命周期执行顺序回顾](https://juejin.im/post/5e86d76d518825739379e402)\n> [详解 Vue 生命周期实现](https://juejin.im/post/5c6d48e36fb9a049eb3c84ff)\n> [详解vue生命周期](https://segmentfault.com/a/1190000011381906)\n","source":"_posts/2020-07-01-Vue的生命周期过程.md","raw":"---\ntitle: Vue的生命周期过程\ndate: 2020-07-01 19:32:15\ntags:\n- Vue\n- 前端\n- Vue生命周期\n- VueLifeClcle\ncategory:\n- [Vue]\n- [前端]\n---\n\n## 生命周期钩子（Lifecycle hooks）\n\n**Vue生命周期的流程图**\n![vue-life-cycle-hooks](../../../../images/vue_life_cycle.png)\n\n> 来源：[Vue生命周期图示](https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA)\n\n### [`beforeCreate()`](https://cn.vuejs.org/v2/api/#beforeCreate)\n\n> 在实例初始化之后，数据观测 (`data observer`) 和 `event/watcher` 事件配置之前被调用。\n> 简单理解就是整个页面创建之前调用，创建之前调用的钩子函数\n\n### [`created()`](https://cn.vuejs.org/v2/api/#created)\n\n> 在实例创建完成后被立即调用。\n> 实例已完成以下的配置：数据观测 (`data observer`)，`property`和方法的运算，`watch/event` 事件回调。挂载阶段还没开始，`$el property` 目前尚不可用。\n\n### [`beforeMount()`](https://cn.vuejs.org/v2/api/#beforeMount)\n\n> 在挂载开始之前被调用\n> 相关的`render`函数首次被调用。\n\n### [`mounted()`](https://cn.vuejs.org/v2/api/#mounted)\n\n> 实例被挂载成功后调用，这时 `el` 被新创建的 `vm.$el` 替换了。\n\n### [`beforeUpdate()`](https://cn.vuejs.org/v2/api/#beforeUpdate)\n\n> 数据更新时调用，数据变化之前，发生在`Virtual DOM`打补丁之前。\n\n### [`updated()`](https://cn.vuejs.org/v2/api/#updated)\n\n> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n> 组件 DOM 已经更新，此时可以执行依赖于DOM的操作。\n> 如果要相应状态改变，通常最好使用计算属性（`Computer`）或 `Watcher` 取而代之。\n\n### [`activated()`](https://cn.vuejs.org/v2/api/#activated)\n\n> 被 `keep-alive` 缓存的组件激活时调用。\n\n### [`deactivated()`](https://cn.vuejs.org/v2/api/#deactivated)\n\n> 被 `keep-alive` 缓存的组件停用时调用。\n\n### [`beforeDestroy()`](https://cn.vuejs.org/v2/api/#beforeDestroy)\n\n> 实例销毁之前调用。（实例还可以使用）\n\n### [`destroyed()`](https://cn.vuejs.org/v2/api/#destroyed)\n\n> 实例销毁后调用。被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。\n\n### [`errorCaptured`](https://cn.vuejs.org/v2/api/#errorCaptured)\n\n> 捕获一个来自子孙组件的错误时被调用。\n> 接受三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。\n\n## Vue单个组件生命周期的一个完整执行过程\n\n```javascript\nbeforeCreate()-> created()-> beforeMounted()-> mounted()->\nbeforeUpdate()-> updated()-> activated()-> deactivated()-> beforeDestroy()-> destroyed()-> errorCaptured()\n```\n\n**DOM 渲染在 哪个周期中就已经完成？**\n> DOM 渲染在 mounted() 中就已经完成了。\n\n**简单描述每个周期具体适合哪些场景？**\n> `beforeCreate()`: 可以在这加个`loading`事件，在加载实例时触发\n> `created()` : 初始化完成时的事件写在这里，如在这结束`loading`事件，异步请求也适宜在这里调用\n> `mounted()`: 挂载元素，获取到DOM节点\n> `updated()`: 如果对数据统一处理，在这里写上相应函数\n> `beforeDestroy()`: 可以做一个确认停止事件的确认框\n> `nextTick`: 更新数据后立即操作DOM\n\n那么，当父子组件嵌套时，父组件和子组件各拥有各自独立的钩子函数，**这些父子组件的这些钩子是如何交融执行，且执行顺序又是怎样的呢?**\n\n## Vue父子组件生命周期执行顺序\n\n> 组件，分别在他们的钩子函数中打印日志，观察执行顺序。\n> 结论：父组件先创建，然后子组件创建；子组件先挂载，然后父组件挂载。\n\n```javascript\n父beforeCreate()-> 父create()-> 子beforeCreate() -> 子created() -> 子mounted() -> 父mounted()\n```\n\n> 子组件挂载完成后，父组件还未挂载。组件数据回显的时候，在父组件`mounted`中获取api的数据，子组件的`mounted`是拿不到的。\n\n**加载渲染过程**\n```javascript\n父beforeCreate()-> 父created()-> 父beforeMount()-> 子beforeCreate()-> 子created()-> 子beforeMount()-> 子mounted()-> 父mounted()\n```\n\n**更新过程**\n```javascript\n父beforeUpdate()-> 子beforeUpdate()-> 子updated()-> 父updated()\n```\n\n**销毁过程**\n```javascript\n父beforeDestroy()-> 子beforeDestroy()-> 子destroyed()-> 父destroyed()\n```\n\n**常用钩子简易版**\n```javascript\n父create()-> 子created()-> 子mounted()-> 父mounted()\n```\n\n## 参考链接\n\n> [Lifecycle Hooks](https://vuejs.org/v2/guide/migration.html#Lifecycle-Hooks)\n> [Vue中父子组件生命周期执行顺序回顾](https://juejin.im/post/5e86d76d518825739379e402)\n> [详解 Vue 生命周期实现](https://juejin.im/post/5c6d48e36fb9a049eb3c84ff)\n> [详解vue生命周期](https://segmentfault.com/a/1190000011381906)\n","slug":"Vue的生命周期过程","published":1,"updated":"2020-07-07T10:42:34.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvvq001em5sn6qbjgdxn","content":"<h2 id=\"生命周期钩子（Lifecycle-hooks）\"><a href=\"#生命周期钩子（Lifecycle-hooks）\" class=\"headerlink\" title=\"生命周期钩子（Lifecycle hooks）\"></a>生命周期钩子（Lifecycle hooks）</h2><p><strong>Vue生命周期的流程图</strong><br><img src=\"../../../../images/vue_life_cycle.png\" alt=\"vue-life-cycle-hooks\"></p>\n<blockquote>\n<p>来源：<a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA\" target=\"_blank\" rel=\"noopener\">Vue生命周期图示</a></p>\n</blockquote>\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate()\"></a><a href=\"https://cn.vuejs.org/v2/api/#beforeCreate\" target=\"_blank\" rel=\"noopener\"><code>beforeCreate()</code></a></h3><blockquote>\n<p>在实例初始化之后，数据观测 (<code>data observer</code>) 和 <code>event/watcher</code> 事件配置之前被调用。<br>简单理解就是整个页面创建之前调用，创建之前调用的钩子函数</p>\n</blockquote>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created()\"></a><a href=\"https://cn.vuejs.org/v2/api/#created\" target=\"_blank\" rel=\"noopener\"><code>created()</code></a></h3><blockquote>\n<p>在实例创建完成后被立即调用。<br>实例已完成以下的配置：数据观测 (<code>data observer</code>)，<code>property</code>和方法的运算，<code>watch/event</code> 事件回调。挂载阶段还没开始，<code>$el property</code> 目前尚不可用。</p>\n</blockquote>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount()\"></a><a href=\"https://cn.vuejs.org/v2/api/#beforeMount\" target=\"_blank\" rel=\"noopener\"><code>beforeMount()</code></a></h3><blockquote>\n<p>在挂载开始之前被调用<br>相关的<code>render</code>函数首次被调用。</p>\n</blockquote>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted()\"></a><a href=\"https://cn.vuejs.org/v2/api/#mounted\" target=\"_blank\" rel=\"noopener\"><code>mounted()</code></a></h3><blockquote>\n<p>实例被挂载成功后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。</p>\n</blockquote>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate()\"></a><a href=\"https://cn.vuejs.org/v2/api/#beforeUpdate\" target=\"_blank\" rel=\"noopener\"><code>beforeUpdate()</code></a></h3><blockquote>\n<p>数据更新时调用，数据变化之前，发生在<code>Virtual DOM</code>打补丁之前。</p>\n</blockquote>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated()\"></a><a href=\"https://cn.vuejs.org/v2/api/#updated\" target=\"_blank\" rel=\"noopener\"><code>updated()</code></a></h3><blockquote>\n<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<br>组件 DOM 已经更新，此时可以执行依赖于DOM的操作。<br>如果要相应状态改变，通常最好使用计算属性（<code>Computer</code>）或 <code>Watcher</code> 取而代之。</p>\n</blockquote>\n<h3 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated()\"></a><a href=\"https://cn.vuejs.org/v2/api/#activated\" target=\"_blank\" rel=\"noopener\"><code>activated()</code></a></h3><blockquote>\n<p>被 <code>keep-alive</code> 缓存的组件激活时调用。</p>\n</blockquote>\n<h3 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated()\"></a><a href=\"https://cn.vuejs.org/v2/api/#deactivated\" target=\"_blank\" rel=\"noopener\"><code>deactivated()</code></a></h3><blockquote>\n<p>被 <code>keep-alive</code> 缓存的组件停用时调用。</p>\n</blockquote>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy()\"></a><a href=\"https://cn.vuejs.org/v2/api/#beforeDestroy\" target=\"_blank\" rel=\"noopener\"><code>beforeDestroy()</code></a></h3><blockquote>\n<p>实例销毁之前调用。（实例还可以使用）</p>\n</blockquote>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed()\"></a><a href=\"https://cn.vuejs.org/v2/api/#destroyed\" target=\"_blank\" rel=\"noopener\"><code>destroyed()</code></a></h3><blockquote>\n<p>实例销毁后调用。被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p>\n</blockquote>\n<h3 id=\"errorCaptured\"><a href=\"#errorCaptured\" class=\"headerlink\" title=\"errorCaptured\"></a><a href=\"https://cn.vuejs.org/v2/api/#errorCaptured\" target=\"_blank\" rel=\"noopener\"><code>errorCaptured</code></a></h3><blockquote>\n<p>捕获一个来自子孙组件的错误时被调用。<br>接受三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。</p>\n</blockquote>\n<h2 id=\"Vue单个组件生命周期的一个完整执行过程\"><a href=\"#Vue单个组件生命周期的一个完整执行过程\" class=\"headerlink\" title=\"Vue单个组件生命周期的一个完整执行过程\"></a>Vue单个组件生命周期的一个完整执行过程</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeCreate()-&gt; created()-&gt; beforeMounted()-&gt; mounted()-&gt;</span><br><span class=\"line\">beforeUpdate()-&gt; updated()-&gt; activated()-&gt; deactivated()-&gt; beforeDestroy()-&gt; destroyed()-&gt; errorCaptured()</span><br></pre></td></tr></table></figure>\n\n<p><strong>DOM 渲染在 哪个周期中就已经完成？</strong></p>\n<blockquote>\n<p>DOM 渲染在 mounted() 中就已经完成了。</p>\n</blockquote>\n<p><strong>简单描述每个周期具体适合哪些场景？</strong></p>\n<blockquote>\n<p><code>beforeCreate()</code>: 可以在这加个<code>loading</code>事件，在加载实例时触发<br><code>created()</code> : 初始化完成时的事件写在这里，如在这结束<code>loading</code>事件，异步请求也适宜在这里调用<br><code>mounted()</code>: 挂载元素，获取到DOM节点<br><code>updated()</code>: 如果对数据统一处理，在这里写上相应函数<br><code>beforeDestroy()</code>: 可以做一个确认停止事件的确认框<br><code>nextTick</code>: 更新数据后立即操作DOM</p>\n</blockquote>\n<p>那么，当父子组件嵌套时，父组件和子组件各拥有各自独立的钩子函数，<strong>这些父子组件的这些钩子是如何交融执行，且执行顺序又是怎样的呢?</strong></p>\n<h2 id=\"Vue父子组件生命周期执行顺序\"><a href=\"#Vue父子组件生命周期执行顺序\" class=\"headerlink\" title=\"Vue父子组件生命周期执行顺序\"></a>Vue父子组件生命周期执行顺序</h2><blockquote>\n<p>组件，分别在他们的钩子函数中打印日志，观察执行顺序。<br>结论：父组件先创建，然后子组件创建；子组件先挂载，然后父组件挂载。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父beforeCreate()-&gt; 父create()-&gt; 子beforeCreate() -&gt; 子created() -&gt; 子mounted() -&gt; 父mounted()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件挂载完成后，父组件还未挂载。组件数据回显的时候，在父组件<code>mounted</code>中获取api的数据，子组件的<code>mounted</code>是拿不到的。</p>\n</blockquote>\n<p><strong>加载渲染过程</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父beforeCreate()-&gt; 父created()-&gt; 父beforeMount()-&gt; 子beforeCreate()-&gt; 子created()-&gt; 子beforeMount()-&gt; 子mounted()-&gt; 父mounted()</span><br></pre></td></tr></table></figure>\n\n<p><strong>更新过程</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父beforeUpdate()-&gt; 子beforeUpdate()-&gt; 子updated()-&gt; 父updated()</span><br></pre></td></tr></table></figure>\n\n<p><strong>销毁过程</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父beforeDestroy()-&gt; 子beforeDestroy()-&gt; 子destroyed()-&gt; 父destroyed()</span><br></pre></td></tr></table></figure>\n\n<p><strong>常用钩子简易版</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父create()-&gt; 子created()-&gt; 子mounted()-&gt; 父mounted()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://vuejs.org/v2/guide/migration.html#Lifecycle-Hooks\" target=\"_blank\" rel=\"noopener\">Lifecycle Hooks</a><br><a href=\"https://juejin.im/post/5e86d76d518825739379e402\" target=\"_blank\" rel=\"noopener\">Vue中父子组件生命周期执行顺序回顾</a><br><a href=\"https://juejin.im/post/5c6d48e36fb9a049eb3c84ff\" target=\"_blank\" rel=\"noopener\">详解 Vue 生命周期实现</a><br><a href=\"https://segmentfault.com/a/1190000011381906\" target=\"_blank\" rel=\"noopener\">详解vue生命周期</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生命周期钩子（Lifecycle-hooks）\"><a href=\"#生命周期钩子（Lifecycle-hooks）\" class=\"headerlink\" title=\"生命周期钩子（Lifecycle hooks）\"></a>生命周期钩子（Lifecycle hooks）</h2><p><strong>Vue生命周期的流程图</strong><br><img src=\"../../../../images/vue_life_cycle.png\" alt=\"vue-life-cycle-hooks\"></p>\n<blockquote>\n<p>来源：<a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA\" target=\"_blank\" rel=\"noopener\">Vue生命周期图示</a></p>\n</blockquote>\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate()\"></a><a href=\"https://cn.vuejs.org/v2/api/#beforeCreate\" target=\"_blank\" rel=\"noopener\"><code>beforeCreate()</code></a></h3><blockquote>\n<p>在实例初始化之后，数据观测 (<code>data observer</code>) 和 <code>event/watcher</code> 事件配置之前被调用。<br>简单理解就是整个页面创建之前调用，创建之前调用的钩子函数</p>\n</blockquote>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created()\"></a><a href=\"https://cn.vuejs.org/v2/api/#created\" target=\"_blank\" rel=\"noopener\"><code>created()</code></a></h3><blockquote>\n<p>在实例创建完成后被立即调用。<br>实例已完成以下的配置：数据观测 (<code>data observer</code>)，<code>property</code>和方法的运算，<code>watch/event</code> 事件回调。挂载阶段还没开始，<code>$el property</code> 目前尚不可用。</p>\n</blockquote>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount()\"></a><a href=\"https://cn.vuejs.org/v2/api/#beforeMount\" target=\"_blank\" rel=\"noopener\"><code>beforeMount()</code></a></h3><blockquote>\n<p>在挂载开始之前被调用<br>相关的<code>render</code>函数首次被调用。</p>\n</blockquote>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted()\"></a><a href=\"https://cn.vuejs.org/v2/api/#mounted\" target=\"_blank\" rel=\"noopener\"><code>mounted()</code></a></h3><blockquote>\n<p>实例被挂载成功后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。</p>\n</blockquote>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate()\"></a><a href=\"https://cn.vuejs.org/v2/api/#beforeUpdate\" target=\"_blank\" rel=\"noopener\"><code>beforeUpdate()</code></a></h3><blockquote>\n<p>数据更新时调用，数据变化之前，发生在<code>Virtual DOM</code>打补丁之前。</p>\n</blockquote>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated()\"></a><a href=\"https://cn.vuejs.org/v2/api/#updated\" target=\"_blank\" rel=\"noopener\"><code>updated()</code></a></h3><blockquote>\n<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<br>组件 DOM 已经更新，此时可以执行依赖于DOM的操作。<br>如果要相应状态改变，通常最好使用计算属性（<code>Computer</code>）或 <code>Watcher</code> 取而代之。</p>\n</blockquote>\n<h3 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated()\"></a><a href=\"https://cn.vuejs.org/v2/api/#activated\" target=\"_blank\" rel=\"noopener\"><code>activated()</code></a></h3><blockquote>\n<p>被 <code>keep-alive</code> 缓存的组件激活时调用。</p>\n</blockquote>\n<h3 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated()\"></a><a href=\"https://cn.vuejs.org/v2/api/#deactivated\" target=\"_blank\" rel=\"noopener\"><code>deactivated()</code></a></h3><blockquote>\n<p>被 <code>keep-alive</code> 缓存的组件停用时调用。</p>\n</blockquote>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy()\"></a><a href=\"https://cn.vuejs.org/v2/api/#beforeDestroy\" target=\"_blank\" rel=\"noopener\"><code>beforeDestroy()</code></a></h3><blockquote>\n<p>实例销毁之前调用。（实例还可以使用）</p>\n</blockquote>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed()\"></a><a href=\"https://cn.vuejs.org/v2/api/#destroyed\" target=\"_blank\" rel=\"noopener\"><code>destroyed()</code></a></h3><blockquote>\n<p>实例销毁后调用。被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p>\n</blockquote>\n<h3 id=\"errorCaptured\"><a href=\"#errorCaptured\" class=\"headerlink\" title=\"errorCaptured\"></a><a href=\"https://cn.vuejs.org/v2/api/#errorCaptured\" target=\"_blank\" rel=\"noopener\"><code>errorCaptured</code></a></h3><blockquote>\n<p>捕获一个来自子孙组件的错误时被调用。<br>接受三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。</p>\n</blockquote>\n<h2 id=\"Vue单个组件生命周期的一个完整执行过程\"><a href=\"#Vue单个组件生命周期的一个完整执行过程\" class=\"headerlink\" title=\"Vue单个组件生命周期的一个完整执行过程\"></a>Vue单个组件生命周期的一个完整执行过程</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeCreate()-&gt; created()-&gt; beforeMounted()-&gt; mounted()-&gt;</span><br><span class=\"line\">beforeUpdate()-&gt; updated()-&gt; activated()-&gt; deactivated()-&gt; beforeDestroy()-&gt; destroyed()-&gt; errorCaptured()</span><br></pre></td></tr></table></figure>\n\n<p><strong>DOM 渲染在 哪个周期中就已经完成？</strong></p>\n<blockquote>\n<p>DOM 渲染在 mounted() 中就已经完成了。</p>\n</blockquote>\n<p><strong>简单描述每个周期具体适合哪些场景？</strong></p>\n<blockquote>\n<p><code>beforeCreate()</code>: 可以在这加个<code>loading</code>事件，在加载实例时触发<br><code>created()</code> : 初始化完成时的事件写在这里，如在这结束<code>loading</code>事件，异步请求也适宜在这里调用<br><code>mounted()</code>: 挂载元素，获取到DOM节点<br><code>updated()</code>: 如果对数据统一处理，在这里写上相应函数<br><code>beforeDestroy()</code>: 可以做一个确认停止事件的确认框<br><code>nextTick</code>: 更新数据后立即操作DOM</p>\n</blockquote>\n<p>那么，当父子组件嵌套时，父组件和子组件各拥有各自独立的钩子函数，<strong>这些父子组件的这些钩子是如何交融执行，且执行顺序又是怎样的呢?</strong></p>\n<h2 id=\"Vue父子组件生命周期执行顺序\"><a href=\"#Vue父子组件生命周期执行顺序\" class=\"headerlink\" title=\"Vue父子组件生命周期执行顺序\"></a>Vue父子组件生命周期执行顺序</h2><blockquote>\n<p>组件，分别在他们的钩子函数中打印日志，观察执行顺序。<br>结论：父组件先创建，然后子组件创建；子组件先挂载，然后父组件挂载。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父beforeCreate()-&gt; 父create()-&gt; 子beforeCreate() -&gt; 子created() -&gt; 子mounted() -&gt; 父mounted()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件挂载完成后，父组件还未挂载。组件数据回显的时候，在父组件<code>mounted</code>中获取api的数据，子组件的<code>mounted</code>是拿不到的。</p>\n</blockquote>\n<p><strong>加载渲染过程</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父beforeCreate()-&gt; 父created()-&gt; 父beforeMount()-&gt; 子beforeCreate()-&gt; 子created()-&gt; 子beforeMount()-&gt; 子mounted()-&gt; 父mounted()</span><br></pre></td></tr></table></figure>\n\n<p><strong>更新过程</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父beforeUpdate()-&gt; 子beforeUpdate()-&gt; 子updated()-&gt; 父updated()</span><br></pre></td></tr></table></figure>\n\n<p><strong>销毁过程</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父beforeDestroy()-&gt; 子beforeDestroy()-&gt; 子destroyed()-&gt; 父destroyed()</span><br></pre></td></tr></table></figure>\n\n<p><strong>常用钩子简易版</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父create()-&gt; 子created()-&gt; 子mounted()-&gt; 父mounted()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://vuejs.org/v2/guide/migration.html#Lifecycle-Hooks\" target=\"_blank\" rel=\"noopener\">Lifecycle Hooks</a><br><a href=\"https://juejin.im/post/5e86d76d518825739379e402\" target=\"_blank\" rel=\"noopener\">Vue中父子组件生命周期执行顺序回顾</a><br><a href=\"https://juejin.im/post/5c6d48e36fb9a049eb3c84ff\" target=\"_blank\" rel=\"noopener\">详解 Vue 生命周期实现</a><br><a href=\"https://segmentfault.com/a/1190000011381906\" target=\"_blank\" rel=\"noopener\">详解vue生命周期</a></p>\n</blockquote>\n"},{"title":"JavaScript创建对象的几种方式","date":"2020-07-08T06:14:24.000Z","_content":"\n> 一般情况下，JS中创建对象的方式可以用构造函数`Object`或者对象字面量的方式，但需要创建几个具有相同属性或方法的对象时，就得写大量的冗余代码。故而出现了下述几种创建对象的方法。\n\n## 使用对象字面量创建对象\n\n对象字面量是对象定义的一种简写方式，目的在于简化创建包含大量属性的对象的过程\n\n```javascript\nvar person = {\n  name: 'Br3ad',\n  gender: 'male',\n  age: 18\n};\n\nconsole.log(person.name); // 'Br3ad'\nconsole.log(person.gender); // 'male'\nconsole.log(person.age); // 18\n```\n\n在使用对象字面量语法时，属性名也可以使用字符串，例子如下：\n\n```javascript\nvar person = {\n  \"name\": 'Br3ad',\n  \"gender\": 'male',\n  \"age\": 18\n};\n\nconsole.log(person); // {name: 'Br3ad', gender: 'male', age: 18}\n```\n\n另外，使用对象字面量语法时，如果留空其花括号，则可以定义只包含默认属性和方法的对象，例子如下：\n\n```javascript\nvar person = {}; // 与 new Object() 相同\nperson.name = 'Br3ad';\nperson.gender = 'male';\nperson.age = 18;\n```\n\n**对象字面量的语法，推荐只在考虑对象名的可读性时使用。**\n\n对象字面量创建方式也是向函数传递大量可选参数的首选方式，例如：\n\n```javascript\nfunction displayInfo(args) {\n  var output = '';\n  if (typeof args.name == 'string') {\n    output += 'Name: ' + args.name + '\\n';\n  }\n  if (typeof args.age == 'number') {\n    output += 'Age：' + args.age + '\\n';\n  }\n  console.log(output);\n};\n\ndisplayInfo({\n  name: 'Nicholas',\n  age: 18\n});\n// Name：Nicholas\n// Age：18\n\ndisplayInfo({\n  name: 'Br3ad'\n});\n// Name：Br3ad\n```\n\n## \b通过`new`操作符创建对象\n\n使用`new`操作符创建并初始化一个新对象，关键字`new`后跟随一个`Object`构造函数，\b例子如下：\n\n```javascript\nvar person = new Object(); // 创建一个空对象并保存在变量person中，和{}一样\nperson.name = 'Br3ad';\nperson.gender = 'male';\nperson.age = 18;\n\nconsole.log(person.name); // 'Br3ad'\nconsole.log(person.gender); // 'male'\nconsole.log(person.age); // 18\n```\n\nJavaScript语言核心中的原始类型都包含内置构造函数，例如：\n\n```javascript\nvar o = new Object(); // 创建一个空对象，和 {} 一样\nvar a = new Array(); // 创建一个空数组，和 [] 一样\nvar d = new Date(); // 创建一个表示当前时间的 Date 对象\nvar r = new RegExp('js'); // 创建一个可以进行模式匹配的 RegExp 对象\n```\n\n## Prototype（原型）模式\n\n\n## 工厂模式\n\n使用同一个接口创建很多对象，会产生大量的重复代码。为了解决这个问题，开始使用工厂模式的一种变体。\n\n原理：通过将对象的创建封装到一个方法中，可以无数次调用这个函数 \n```javascript\nfunction createPerson (name, age, gender, job) {\n  var o = new Object();\n  o.name = name;\n  o.age = age;\n  o.gender = gender;\n  o.job = job;\n  o.sayName = function () {\n    console.log(this.name);\n  };\n  return o;\n};\nvar person1 = createPerson('Br3ad', 18, 'male', 'Software Engineer');\nvar person2 = createPerson('Nicholas', 29, 'female', 'Doctor');\nconsole.log(person1); // {name: \"Br3ad\", age: 18, gender: \"male\", job: \"Software Engineer\", sayName: ƒunction () {} }\nconsole.log(person2); // {name: \"Nicholas\", age: 29, gender: \"female\", job: \"Doctor\", sayName: ƒunction () {} }\n```\n\n## Constructor（构造函数）模式\n\nECMAScript 中的构造函数可用来创建特定类型的对象，像`Object`和`Array`这样的原生构造函数，在运行时会自动出现在执行环境中，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法\n\n```javascript\nfunction Person (name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    console.log(this.name);\n  };\n};\nvar person1 = new Person('Br3ad', 18, 'Software Enginner');\nvar person2 = new Person('Li', 29, 'Doctor');\n\nperson1.sayName(); // 'Br3ad'\nperson2.sayName(); // 'Li'\n```\n\n**构造函数执行的流程：**\n\n**对比工厂模式，可以发现以下区别：**\n\n1、没有显示地创建对象\n2、直接将属性和方法赋给了`this`对象；\n3、没有`return`语句\n\n按照管理，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。（借鉴其他OO语言，为了区别其他ECMAScript中的其他函数）\n\n构造函数本身也是函数，只不过可以用来创建对象\n\n## Constructor（构造函数）+ Prototype（原型）模式\n\n## 动态原型模式\n\n## 寄生构造函数模式\n\n## 稳妥构造函数模式\n\n## ES6中Class定义类\n\n## ES5中提供[`Object.create()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)方法创建\n\n> [MDN-Object.create()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)方法创建一个新对象，使用现有的对象来提供新创建的对象的`__proto__`\n\n```javascript\nconst person = {\n  isHuman: false,\n  sayHi: function () {\n    console.log(`my name is ${this.name}. Am I human ? ${this.isHum}`)\n  }\n}\nconst me = Object.create(person);\n\nme.name = 'Chace Xie';\nme.isHuman = true; // inherited properties can be overwritten\nme.sayHi(); // my name is Chace Xie. Am I human ? true\n```\n\n## 参考链接\n\n> [JS创建对象](https://blog.csdn.net/Luck_ZZ/article/details/102984112)\n> [JavaScript中创建对象的几种方式](https://juejin.im/post/5cb34b456fb9a0688a680676)\n> [js 创建对象的几种方式](https://segmentfault.com/a/1190000013003584)\n","source":"_posts/2020-06-29-JavaScript创建对象的几种方式.md","raw":"---\ntitle: JavaScript创建对象的几种方式\ndate: 2020-07-08 14:14:24\ntags:\n- 前端\n- 前端面试题\n- Object\n- Create object\n- JavaScript object\n- 创建对象\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n> 一般情况下，JS中创建对象的方式可以用构造函数`Object`或者对象字面量的方式，但需要创建几个具有相同属性或方法的对象时，就得写大量的冗余代码。故而出现了下述几种创建对象的方法。\n\n## 使用对象字面量创建对象\n\n对象字面量是对象定义的一种简写方式，目的在于简化创建包含大量属性的对象的过程\n\n```javascript\nvar person = {\n  name: 'Br3ad',\n  gender: 'male',\n  age: 18\n};\n\nconsole.log(person.name); // 'Br3ad'\nconsole.log(person.gender); // 'male'\nconsole.log(person.age); // 18\n```\n\n在使用对象字面量语法时，属性名也可以使用字符串，例子如下：\n\n```javascript\nvar person = {\n  \"name\": 'Br3ad',\n  \"gender\": 'male',\n  \"age\": 18\n};\n\nconsole.log(person); // {name: 'Br3ad', gender: 'male', age: 18}\n```\n\n另外，使用对象字面量语法时，如果留空其花括号，则可以定义只包含默认属性和方法的对象，例子如下：\n\n```javascript\nvar person = {}; // 与 new Object() 相同\nperson.name = 'Br3ad';\nperson.gender = 'male';\nperson.age = 18;\n```\n\n**对象字面量的语法，推荐只在考虑对象名的可读性时使用。**\n\n对象字面量创建方式也是向函数传递大量可选参数的首选方式，例如：\n\n```javascript\nfunction displayInfo(args) {\n  var output = '';\n  if (typeof args.name == 'string') {\n    output += 'Name: ' + args.name + '\\n';\n  }\n  if (typeof args.age == 'number') {\n    output += 'Age：' + args.age + '\\n';\n  }\n  console.log(output);\n};\n\ndisplayInfo({\n  name: 'Nicholas',\n  age: 18\n});\n// Name：Nicholas\n// Age：18\n\ndisplayInfo({\n  name: 'Br3ad'\n});\n// Name：Br3ad\n```\n\n## \b通过`new`操作符创建对象\n\n使用`new`操作符创建并初始化一个新对象，关键字`new`后跟随一个`Object`构造函数，\b例子如下：\n\n```javascript\nvar person = new Object(); // 创建一个空对象并保存在变量person中，和{}一样\nperson.name = 'Br3ad';\nperson.gender = 'male';\nperson.age = 18;\n\nconsole.log(person.name); // 'Br3ad'\nconsole.log(person.gender); // 'male'\nconsole.log(person.age); // 18\n```\n\nJavaScript语言核心中的原始类型都包含内置构造函数，例如：\n\n```javascript\nvar o = new Object(); // 创建一个空对象，和 {} 一样\nvar a = new Array(); // 创建一个空数组，和 [] 一样\nvar d = new Date(); // 创建一个表示当前时间的 Date 对象\nvar r = new RegExp('js'); // 创建一个可以进行模式匹配的 RegExp 对象\n```\n\n## Prototype（原型）模式\n\n\n## 工厂模式\n\n使用同一个接口创建很多对象，会产生大量的重复代码。为了解决这个问题，开始使用工厂模式的一种变体。\n\n原理：通过将对象的创建封装到一个方法中，可以无数次调用这个函数 \n```javascript\nfunction createPerson (name, age, gender, job) {\n  var o = new Object();\n  o.name = name;\n  o.age = age;\n  o.gender = gender;\n  o.job = job;\n  o.sayName = function () {\n    console.log(this.name);\n  };\n  return o;\n};\nvar person1 = createPerson('Br3ad', 18, 'male', 'Software Engineer');\nvar person2 = createPerson('Nicholas', 29, 'female', 'Doctor');\nconsole.log(person1); // {name: \"Br3ad\", age: 18, gender: \"male\", job: \"Software Engineer\", sayName: ƒunction () {} }\nconsole.log(person2); // {name: \"Nicholas\", age: 29, gender: \"female\", job: \"Doctor\", sayName: ƒunction () {} }\n```\n\n## Constructor（构造函数）模式\n\nECMAScript 中的构造函数可用来创建特定类型的对象，像`Object`和`Array`这样的原生构造函数，在运行时会自动出现在执行环境中，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法\n\n```javascript\nfunction Person (name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.sayName = function() {\n    console.log(this.name);\n  };\n};\nvar person1 = new Person('Br3ad', 18, 'Software Enginner');\nvar person2 = new Person('Li', 29, 'Doctor');\n\nperson1.sayName(); // 'Br3ad'\nperson2.sayName(); // 'Li'\n```\n\n**构造函数执行的流程：**\n\n**对比工厂模式，可以发现以下区别：**\n\n1、没有显示地创建对象\n2、直接将属性和方法赋给了`this`对象；\n3、没有`return`语句\n\n按照管理，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。（借鉴其他OO语言，为了区别其他ECMAScript中的其他函数）\n\n构造函数本身也是函数，只不过可以用来创建对象\n\n## Constructor（构造函数）+ Prototype（原型）模式\n\n## 动态原型模式\n\n## 寄生构造函数模式\n\n## 稳妥构造函数模式\n\n## ES6中Class定义类\n\n## ES5中提供[`Object.create()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)方法创建\n\n> [MDN-Object.create()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)方法创建一个新对象，使用现有的对象来提供新创建的对象的`__proto__`\n\n```javascript\nconst person = {\n  isHuman: false,\n  sayHi: function () {\n    console.log(`my name is ${this.name}. Am I human ? ${this.isHum}`)\n  }\n}\nconst me = Object.create(person);\n\nme.name = 'Chace Xie';\nme.isHuman = true; // inherited properties can be overwritten\nme.sayHi(); // my name is Chace Xie. Am I human ? true\n```\n\n## 参考链接\n\n> [JS创建对象](https://blog.csdn.net/Luck_ZZ/article/details/102984112)\n> [JavaScript中创建对象的几种方式](https://juejin.im/post/5cb34b456fb9a0688a680676)\n> [js 创建对象的几种方式](https://segmentfault.com/a/1190000013003584)\n","slug":"JavaScript创建对象的几种方式","published":1,"updated":"2020-07-07T06:14:58.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvvv001im5sn28491gup","content":"<blockquote>\n<p>一般情况下，JS中创建对象的方式可以用构造函数<code>Object</code>或者对象字面量的方式，但需要创建几个具有相同属性或方法的对象时，就得写大量的冗余代码。故而出现了下述几种创建对象的方法。</p>\n</blockquote>\n<h2 id=\"使用对象字面量创建对象\"><a href=\"#使用对象字面量创建对象\" class=\"headerlink\" title=\"使用对象字面量创建对象\"></a>使用对象字面量创建对象</h2><p>对象字面量是对象定义的一种简写方式，目的在于简化创建包含大量属性的对象的过程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  gender: <span class=\"string\">'male'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 'Br3ad'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.gender); <span class=\"comment\">// 'male'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age); <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用对象字面量语法时，属性名也可以使用字符串，例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  <span class=\"string\">\"gender\"</span>: <span class=\"string\">'male'</span>,</span><br><span class=\"line\">  <span class=\"string\">\"age\"</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person); <span class=\"comment\">// &#123;name: 'Br3ad', gender: 'male', age: 18&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，使用对象字面量语法时，如果留空其花括号，则可以定义只包含默认属性和方法的对象，例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;; <span class=\"comment\">// 与 new Object() 相同</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">person.gender = <span class=\"string\">'male'</span>;</span><br><span class=\"line\">person.age = <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>对象字面量的语法，推荐只在考虑对象名的可读性时使用。</strong></p>\n<p>对象字面量创建方式也是向函数传递大量可选参数的首选方式，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayInfo</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> output = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> args.name == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">    output += <span class=\"string\">'Name: '</span> + args.name + <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> args.age == <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    output += <span class=\"string\">'Age：'</span> + args.age + <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(output);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">displayInfo(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Nicholas'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Name：Nicholas</span></span><br><span class=\"line\"><span class=\"comment\">// Age：18</span></span><br><span class=\"line\"></span><br><span class=\"line\">displayInfo(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Name：Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过new操作符创建对象\"><a href=\"#通过new操作符创建对象\" class=\"headerlink\" title=\"\b通过new操作符创建对象\"></a>\b通过<code>new</code>操作符创建对象</h2><p>使用<code>new</code>操作符创建并初始化一个新对象，关键字<code>new</code>后跟随一个<code>Object</code>构造函数，\b例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 创建一个空对象并保存在变量person中，和&#123;&#125;一样</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">person.gender = <span class=\"string\">'male'</span>;</span><br><span class=\"line\">person.age = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 'Br3ad'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.gender); <span class=\"comment\">// 'male'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age); <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript语言核心中的原始类型都包含内置构造函数，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 创建一个空对象，和 &#123;&#125; 一样</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// 创建一个空数组，和 [] 一样</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">// 创建一个表示当前时间的 Date 对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'js'</span>); <span class=\"comment\">// 创建一个可以进行模式匹配的 RegExp 对象</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Prototype（原型）模式\"><a href=\"#Prototype（原型）模式\" class=\"headerlink\" title=\"Prototype（原型）模式\"></a>Prototype（原型）模式</h2><h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>使用同一个接口创建很多对象，会产生大量的重复代码。为了解决这个问题，开始使用工厂模式的一种变体。</p>\n<p>原理：通过将对象的创建封装到一个方法中，可以无数次调用这个函数 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span> (<span class=\"params\">name, age, gender, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  o.gender = gender;</span><br><span class=\"line\">  o.job = job;</span><br><span class=\"line\">  o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">'Br3ad'</span>, <span class=\"number\">18</span>, <span class=\"string\">'male'</span>, <span class=\"string\">'Software Engineer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">'Nicholas'</span>, <span class=\"number\">29</span>, <span class=\"string\">'female'</span>, <span class=\"string\">'Doctor'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person1); <span class=\"comment\">// &#123;name: \"Br3ad\", age: 18, gender: \"male\", job: \"Software Engineer\", sayName: ƒunction () &#123;&#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person2); <span class=\"comment\">// &#123;name: \"Nicholas\", age: 29, gender: \"female\", job: \"Doctor\", sayName: ƒunction () &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Constructor（构造函数）模式\"><a href=\"#Constructor（构造函数）模式\" class=\"headerlink\" title=\"Constructor（构造函数）模式\"></a>Constructor（构造函数）模式</h2><p>ECMAScript 中的构造函数可用来创建特定类型的对象，像<code>Object</code>和<code>Array</code>这样的原生构造函数，在运行时会自动出现在执行环境中，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Br3ad'</span>, <span class=\"number\">18</span>, <span class=\"string\">'Software Enginner'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Li'</span>, <span class=\"number\">29</span>, <span class=\"string\">'Doctor'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">// 'Br3ad'</span></span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">// 'Li'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>构造函数执行的流程：</strong></p>\n<p><strong>对比工厂模式，可以发现以下区别：</strong></p>\n<p>1、没有显示地创建对象<br>2、直接将属性和方法赋给了<code>this</code>对象；<br>3、没有<code>return</code>语句</p>\n<p>按照管理，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。（借鉴其他OO语言，为了区别其他ECMAScript中的其他函数）</p>\n<p>构造函数本身也是函数，只不过可以用来创建对象</p>\n<h2 id=\"Constructor（构造函数）-Prototype（原型）模式\"><a href=\"#Constructor（构造函数）-Prototype（原型）模式\" class=\"headerlink\" title=\"Constructor（构造函数）+ Prototype（原型）模式\"></a>Constructor（构造函数）+ Prototype（原型）模式</h2><h2 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h2><h2 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h2><h2 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h2><h2 id=\"ES6中Class定义类\"><a href=\"#ES6中Class定义类\" class=\"headerlink\" title=\"ES6中Class定义类\"></a>ES6中Class定义类</h2><h2 id=\"ES5中提供Object-create-方法创建\"><a href=\"#ES5中提供Object-create-方法创建\" class=\"headerlink\" title=\"ES5中提供Object.create()方法创建\"></a>ES5中提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\"><code>Object.create()</code></a>方法创建</h2><blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\">MDN-Object.create()</a>方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  isHuman: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  sayHi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`my name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>. Am I human ? <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.isHum&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> me = <span class=\"built_in\">Object</span>.create(person);</span><br><span class=\"line\"></span><br><span class=\"line\">me.name = <span class=\"string\">'Chace Xie'</span>;</span><br><span class=\"line\">me.isHuman = <span class=\"literal\">true</span>; <span class=\"comment\">// inherited properties can be overwritten</span></span><br><span class=\"line\">me.sayHi(); <span class=\"comment\">// my name is Chace Xie. Am I human ? true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/Luck_ZZ/article/details/102984112\" target=\"_blank\" rel=\"noopener\">JS创建对象</a><br><a href=\"https://juejin.im/post/5cb34b456fb9a0688a680676\" target=\"_blank\" rel=\"noopener\">JavaScript中创建对象的几种方式</a><br><a href=\"https://segmentfault.com/a/1190000013003584\" target=\"_blank\" rel=\"noopener\">js 创建对象的几种方式</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一般情况下，JS中创建对象的方式可以用构造函数<code>Object</code>或者对象字面量的方式，但需要创建几个具有相同属性或方法的对象时，就得写大量的冗余代码。故而出现了下述几种创建对象的方法。</p>\n</blockquote>\n<h2 id=\"使用对象字面量创建对象\"><a href=\"#使用对象字面量创建对象\" class=\"headerlink\" title=\"使用对象字面量创建对象\"></a>使用对象字面量创建对象</h2><p>对象字面量是对象定义的一种简写方式，目的在于简化创建包含大量属性的对象的过程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  gender: <span class=\"string\">'male'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 'Br3ad'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.gender); <span class=\"comment\">// 'male'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age); <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用对象字面量语法时，属性名也可以使用字符串，例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  <span class=\"string\">\"gender\"</span>: <span class=\"string\">'male'</span>,</span><br><span class=\"line\">  <span class=\"string\">\"age\"</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person); <span class=\"comment\">// &#123;name: 'Br3ad', gender: 'male', age: 18&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，使用对象字面量语法时，如果留空其花括号，则可以定义只包含默认属性和方法的对象，例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;; <span class=\"comment\">// 与 new Object() 相同</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">person.gender = <span class=\"string\">'male'</span>;</span><br><span class=\"line\">person.age = <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>对象字面量的语法，推荐只在考虑对象名的可读性时使用。</strong></p>\n<p>对象字面量创建方式也是向函数传递大量可选参数的首选方式，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayInfo</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> output = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> args.name == <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">    output += <span class=\"string\">'Name: '</span> + args.name + <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> args.age == <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    output += <span class=\"string\">'Age：'</span> + args.age + <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(output);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">displayInfo(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Nicholas'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Name：Nicholas</span></span><br><span class=\"line\"><span class=\"comment\">// Age：18</span></span><br><span class=\"line\"></span><br><span class=\"line\">displayInfo(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Name：Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过new操作符创建对象\"><a href=\"#通过new操作符创建对象\" class=\"headerlink\" title=\"\b通过new操作符创建对象\"></a>\b通过<code>new</code>操作符创建对象</h2><p>使用<code>new</code>操作符创建并初始化一个新对象，关键字<code>new</code>后跟随一个<code>Object</code>构造函数，\b例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 创建一个空对象并保存在变量person中，和&#123;&#125;一样</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">person.gender = <span class=\"string\">'male'</span>;</span><br><span class=\"line\">person.age = <span class=\"number\">18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 'Br3ad'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.gender); <span class=\"comment\">// 'male'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age); <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript语言核心中的原始类型都包含内置构造函数，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); <span class=\"comment\">// 创建一个空对象，和 &#123;&#125; 一样</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">// 创建一个空数组，和 [] 一样</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">// 创建一个表示当前时间的 Date 对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'js'</span>); <span class=\"comment\">// 创建一个可以进行模式匹配的 RegExp 对象</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Prototype（原型）模式\"><a href=\"#Prototype（原型）模式\" class=\"headerlink\" title=\"Prototype（原型）模式\"></a>Prototype（原型）模式</h2><h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>使用同一个接口创建很多对象，会产生大量的重复代码。为了解决这个问题，开始使用工厂模式的一种变体。</p>\n<p>原理：通过将对象的创建封装到一个方法中，可以无数次调用这个函数 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span> (<span class=\"params\">name, age, gender, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  o.gender = gender;</span><br><span class=\"line\">  o.job = job;</span><br><span class=\"line\">  o.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">'Br3ad'</span>, <span class=\"number\">18</span>, <span class=\"string\">'male'</span>, <span class=\"string\">'Software Engineer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">'Nicholas'</span>, <span class=\"number\">29</span>, <span class=\"string\">'female'</span>, <span class=\"string\">'Doctor'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person1); <span class=\"comment\">// &#123;name: \"Br3ad\", age: 18, gender: \"male\", job: \"Software Engineer\", sayName: ƒunction () &#123;&#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person2); <span class=\"comment\">// &#123;name: \"Nicholas\", age: 29, gender: \"female\", job: \"Doctor\", sayName: ƒunction () &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Constructor（构造函数）模式\"><a href=\"#Constructor（构造函数）模式\" class=\"headerlink\" title=\"Constructor（构造函数）模式\"></a>Constructor（构造函数）模式</h2><p>ECMAScript 中的构造函数可用来创建特定类型的对象，像<code>Object</code>和<code>Array</code>这样的原生构造函数，在运行时会自动出现在执行环境中，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Br3ad'</span>, <span class=\"number\">18</span>, <span class=\"string\">'Software Enginner'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Li'</span>, <span class=\"number\">29</span>, <span class=\"string\">'Doctor'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.sayName(); <span class=\"comment\">// 'Br3ad'</span></span><br><span class=\"line\">person2.sayName(); <span class=\"comment\">// 'Li'</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>构造函数执行的流程：</strong></p>\n<p><strong>对比工厂模式，可以发现以下区别：</strong></p>\n<p>1、没有显示地创建对象<br>2、直接将属性和方法赋给了<code>this</code>对象；<br>3、没有<code>return</code>语句</p>\n<p>按照管理，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。（借鉴其他OO语言，为了区别其他ECMAScript中的其他函数）</p>\n<p>构造函数本身也是函数，只不过可以用来创建对象</p>\n<h2 id=\"Constructor（构造函数）-Prototype（原型）模式\"><a href=\"#Constructor（构造函数）-Prototype（原型）模式\" class=\"headerlink\" title=\"Constructor（构造函数）+ Prototype（原型）模式\"></a>Constructor（构造函数）+ Prototype（原型）模式</h2><h2 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h2><h2 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h2><h2 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h2><h2 id=\"ES6中Class定义类\"><a href=\"#ES6中Class定义类\" class=\"headerlink\" title=\"ES6中Class定义类\"></a>ES6中Class定义类</h2><h2 id=\"ES5中提供Object-create-方法创建\"><a href=\"#ES5中提供Object-create-方法创建\" class=\"headerlink\" title=\"ES5中提供Object.create()方法创建\"></a>ES5中提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\"><code>Object.create()</code></a>方法创建</h2><blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\">MDN-Object.create()</a>方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  isHuman: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  sayHi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`my name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>. Am I human ? <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.isHum&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> me = <span class=\"built_in\">Object</span>.create(person);</span><br><span class=\"line\"></span><br><span class=\"line\">me.name = <span class=\"string\">'Chace Xie'</span>;</span><br><span class=\"line\">me.isHuman = <span class=\"literal\">true</span>; <span class=\"comment\">// inherited properties can be overwritten</span></span><br><span class=\"line\">me.sayHi(); <span class=\"comment\">// my name is Chace Xie. Am I human ? true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/Luck_ZZ/article/details/102984112\" target=\"_blank\" rel=\"noopener\">JS创建对象</a><br><a href=\"https://juejin.im/post/5cb34b456fb9a0688a680676\" target=\"_blank\" rel=\"noopener\">JavaScript中创建对象的几种方式</a><br><a href=\"https://segmentfault.com/a/1190000013003584\" target=\"_blank\" rel=\"noopener\">js 创建对象的几种方式</a></p>\n</blockquote>\n"},{"title":"彻底理解JavaScript函数的调用方式和传参方式","date":"2020-06-29T23:47:55.000Z","category":null,"_content":"\n\n> [彻底理解JavaScript函数的调用方式和传参方式](https://juejin.im/post/5c05ea9ee51d4571c361d89e#heading-6)\n","source":"_posts/2020-06-30-彻底理解JavaScript函数的调用方式和传参方式.md","raw":"---\ntitle: 彻底理解JavaScript函数的调用方式和传参方式\ndate: 2020-06-30 07:47:55\ntags:\ncategory:\n---\n\n\n> [彻底理解JavaScript函数的调用方式和传参方式](https://juejin.im/post/5c05ea9ee51d4571c361d89e#heading-6)\n","slug":"彻底理解JavaScript函数的调用方式和传参方式","published":1,"updated":"2020-06-29T23:49:44.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvvy001km5sng9kc8gqu","content":"<blockquote>\n<p><a href=\"https://juejin.im/post/5c05ea9ee51d4571c361d89e#heading-6\" target=\"_blank\" rel=\"noopener\">彻底理解JavaScript函数的调用方式和传参方式</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://juejin.im/post/5c05ea9ee51d4571c361d89e#heading-6\" target=\"_blank\" rel=\"noopener\">彻底理解JavaScript函数的调用方式和传参方式</a></p>\n</blockquote>\n"},{"title":"webpack中loader和plugin 的区别是什么","date":"2020-07-01T09:44:32.000Z","_content":"\n## [`Loader`](https://webpack.docschina.org/concepts/loaders/)\n\n> `loader` 用于对模块的源代码进行转换。`loader` 可以使你在 import 或 \"load(加载)\" 模块时预处理文件。因此，`loader`类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的得力方式。loader可以将文件从不同的语言（如TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。`loader`甚至允许你直接在 JavaScript 模块中 import CSS文件！\n\n## Webpack中`loader`和`plugin`的区别？\n\n**loader**\n> loader，转换指定类型的模块功能，它是一个转换器，将A文件进行编译成B文件。\n将`A.less`转换为`A.css`，单纯的文件转换过程。\n\n> plugin，是一个扩展器，它丰富了Webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务，比如：打包优化、文件管理、环境注入等\n\n## 参考链接\n\n> [Webpack-Loader](https://webpack.docschina.org/concepts/loaders/)\n> [Webpack-Plugin](https://webpack.docschina.org/concepts/plugins/)\n> [Webpack loaders vs plugins; what's the difference?](https://stackoverflow.com/questions/37452402/webpack-loaders-vs-plugins-whats-the-difference)\n> [Github-webpack中loader和plugin的区别是什么](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/308)\n","source":"_posts/2020-07-01-webpack中loader和plugin的区别是什么.md","raw":"---\ntitle: webpack中loader和plugin 的区别是什么\ndate: 2020-07-01 17:44:32\ntags:\ncategory:\n- [Webpack]\n---\n\n## [`Loader`](https://webpack.docschina.org/concepts/loaders/)\n\n> `loader` 用于对模块的源代码进行转换。`loader` 可以使你在 import 或 \"load(加载)\" 模块时预处理文件。因此，`loader`类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的得力方式。loader可以将文件从不同的语言（如TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。`loader`甚至允许你直接在 JavaScript 模块中 import CSS文件！\n\n## Webpack中`loader`和`plugin`的区别？\n\n**loader**\n> loader，转换指定类型的模块功能，它是一个转换器，将A文件进行编译成B文件。\n将`A.less`转换为`A.css`，单纯的文件转换过程。\n\n> plugin，是一个扩展器，它丰富了Webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务，比如：打包优化、文件管理、环境注入等\n\n## 参考链接\n\n> [Webpack-Loader](https://webpack.docschina.org/concepts/loaders/)\n> [Webpack-Plugin](https://webpack.docschina.org/concepts/plugins/)\n> [Webpack loaders vs plugins; what's the difference?](https://stackoverflow.com/questions/37452402/webpack-loaders-vs-plugins-whats-the-difference)\n> [Github-webpack中loader和plugin的区别是什么](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/308)\n","slug":"webpack中loader和plugin的区别是什么","published":1,"updated":"2020-07-07T06:09:07.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvw3001om5sn4j7gc828","content":"<h2 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a><a href=\"https://webpack.docschina.org/concepts/loaders/\" target=\"_blank\" rel=\"noopener\"><code>Loader</code></a></h2><blockquote>\n<p><code>loader</code> 用于对模块的源代码进行转换。<code>loader</code> 可以使你在 import 或 “load(加载)” 模块时预处理文件。因此，<code>loader</code>类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的得力方式。loader可以将文件从不同的语言（如TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。<code>loader</code>甚至允许你直接在 JavaScript 模块中 import CSS文件！</p>\n</blockquote>\n<h2 id=\"Webpack中loader和plugin的区别？\"><a href=\"#Webpack中loader和plugin的区别？\" class=\"headerlink\" title=\"Webpack中loader和plugin的区别？\"></a>Webpack中<code>loader</code>和<code>plugin</code>的区别？</h2><p><strong>loader</strong></p>\n<blockquote>\n<p>loader，转换指定类型的模块功能，它是一个转换器，将A文件进行编译成B文件。<br>将<code>A.less</code>转换为<code>A.css</code>，单纯的文件转换过程。</p>\n</blockquote>\n<blockquote>\n<p>plugin，是一个扩展器，它丰富了Webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务，比如：打包优化、文件管理、环境注入等</p>\n</blockquote>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://webpack.docschina.org/concepts/loaders/\" target=\"_blank\" rel=\"noopener\">Webpack-Loader</a><br><a href=\"https://webpack.docschina.org/concepts/plugins/\" target=\"_blank\" rel=\"noopener\">Webpack-Plugin</a><br><a href=\"https://stackoverflow.com/questions/37452402/webpack-loaders-vs-plugins-whats-the-difference\" target=\"_blank\" rel=\"noopener\">Webpack loaders vs plugins; what’s the difference?</a><br><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/308\" target=\"_blank\" rel=\"noopener\">Github-webpack中loader和plugin的区别是什么</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a><a href=\"https://webpack.docschina.org/concepts/loaders/\" target=\"_blank\" rel=\"noopener\"><code>Loader</code></a></h2><blockquote>\n<p><code>loader</code> 用于对模块的源代码进行转换。<code>loader</code> 可以使你在 import 或 “load(加载)” 模块时预处理文件。因此，<code>loader</code>类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的得力方式。loader可以将文件从不同的语言（如TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。<code>loader</code>甚至允许你直接在 JavaScript 模块中 import CSS文件！</p>\n</blockquote>\n<h2 id=\"Webpack中loader和plugin的区别？\"><a href=\"#Webpack中loader和plugin的区别？\" class=\"headerlink\" title=\"Webpack中loader和plugin的区别？\"></a>Webpack中<code>loader</code>和<code>plugin</code>的区别？</h2><p><strong>loader</strong></p>\n<blockquote>\n<p>loader，转换指定类型的模块功能，它是一个转换器，将A文件进行编译成B文件。<br>将<code>A.less</code>转换为<code>A.css</code>，单纯的文件转换过程。</p>\n</blockquote>\n<blockquote>\n<p>plugin，是一个扩展器，它丰富了Webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务，比如：打包优化、文件管理、环境注入等</p>\n</blockquote>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://webpack.docschina.org/concepts/loaders/\" target=\"_blank\" rel=\"noopener\">Webpack-Loader</a><br><a href=\"https://webpack.docschina.org/concepts/plugins/\" target=\"_blank\" rel=\"noopener\">Webpack-Plugin</a><br><a href=\"https://stackoverflow.com/questions/37452402/webpack-loaders-vs-plugins-whats-the-difference\" target=\"_blank\" rel=\"noopener\">Webpack loaders vs plugins; what’s the difference?</a><br><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/308\" target=\"_blank\" rel=\"noopener\">Github-webpack中loader和plugin的区别是什么</a></p>\n</blockquote>\n"},{"title":"git将某分支的某次提交合并到另一个分支","date":"2020-07-01T12:01:32.000Z","category":null,"_content":"","source":"_posts/2020-07-01-git将某分支的某次提交合并到另一个分支.md","raw":"---\ntitle: git将某分支的某次提交合并到另一个分支\ndate: 2020-07-01 20:01:32\ntags:\ncategory:\n---\n","slug":"git将某分支的某次提交合并到另一个分支","published":1,"updated":"2020-07-01T12:01:32.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvwa001sm5sn628z0cpr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"前端性能优化之雅虎军规","date":"2020-07-07T09:10:41.000Z","_content":"\n前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。\n\n![yahoo-web-preformance](../../../../images/yahoo_preformance_rules.png)\n\n---\n\n**如何提高网站的速度？**\n\n## 页面内容（Page Content）\n\n## 服务器（Sever）\n\n## Cookie\n\n## CSS\n\n## JavaScript\n\n## 图片（image）\n\n## 移动端（Mobile）\n\n## 参考链接\n\n- [Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html?guccounter=1)\n- [Google Best Practices](https://developers.google.com/speed/docs/insights/rules)\n- [前端性能优化之雅虎35条军规](https://juejin.im/post/5b73ef38f265da281e048e51)\n- [司徒正美-用CSS开启硬件加速来提高网站性能（转）](https://www.cnblogs.com/rubylouvre/p/3471490.html)\n- [Increase Your Site’s Performance with Hardware-Accelerated CSS](https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css)\n","source":"_posts/2020-07-07-前端性能优化之雅虎军规.md","raw":"---\ntitle: 前端性能优化之雅虎军规\ndate: 2020-07-07 17:10:41\ntags:\n- 前端\n- 前端\ncategory:\n- [前端性能优化]\n---\n\n前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。\n\n![yahoo-web-preformance](../../../../images/yahoo_preformance_rules.png)\n\n---\n\n**如何提高网站的速度？**\n\n## 页面内容（Page Content）\n\n## 服务器（Sever）\n\n## Cookie\n\n## CSS\n\n## JavaScript\n\n## 图片（image）\n\n## 移动端（Mobile）\n\n## 参考链接\n\n- [Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html?guccounter=1)\n- [Google Best Practices](https://developers.google.com/speed/docs/insights/rules)\n- [前端性能优化之雅虎35条军规](https://juejin.im/post/5b73ef38f265da281e048e51)\n- [司徒正美-用CSS开启硬件加速来提高网站性能（转）](https://www.cnblogs.com/rubylouvre/p/3471490.html)\n- [Increase Your Site’s Performance with Hardware-Accelerated CSS](https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css)\n","slug":"前端性能优化之雅虎军规","published":1,"updated":"2020-07-07T10:48:33.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvwd001wm5sn4oem1hia","content":"<p>前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。</p>\n<p><img src=\"../../../../images/yahoo_preformance_rules.png\" alt=\"yahoo-web-preformance\"></p>\n<hr>\n<p><strong>如何提高网站的速度？</strong></p>\n<h2 id=\"页面内容（Page-Content）\"><a href=\"#页面内容（Page-Content）\" class=\"headerlink\" title=\"页面内容（Page Content）\"></a>页面内容（Page Content）</h2><h2 id=\"服务器（Sever）\"><a href=\"#服务器（Sever）\" class=\"headerlink\" title=\"服务器（Sever）\"></a>服务器（Sever）</h2><h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h2 id=\"图片（image）\"><a href=\"#图片（image）\" class=\"headerlink\" title=\"图片（image）\"></a>图片（image）</h2><h2 id=\"移动端（Mobile）\"><a href=\"#移动端（Mobile）\" class=\"headerlink\" title=\"移动端（Mobile）\"></a>移动端（Mobile）</h2><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://developer.yahoo.com/performance/rules.html?guccounter=1\" target=\"_blank\" rel=\"noopener\">Best Practices for Speeding Up Your Web Site</a></li>\n<li><a href=\"https://developers.google.com/speed/docs/insights/rules\" target=\"_blank\" rel=\"noopener\">Google Best Practices</a></li>\n<li><a href=\"https://juejin.im/post/5b73ef38f265da281e048e51\" target=\"_blank\" rel=\"noopener\">前端性能优化之雅虎35条军规</a></li>\n<li><a href=\"https://www.cnblogs.com/rubylouvre/p/3471490.html\" target=\"_blank\" rel=\"noopener\">司徒正美-用CSS开启硬件加速来提高网站性能（转）</a></li>\n<li><a href=\"https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css\" target=\"_blank\" rel=\"noopener\">Increase Your Site’s Performance with Hardware-Accelerated CSS</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名考虑的一个因素。</p>\n<p><img src=\"../../../../images/yahoo_preformance_rules.png\" alt=\"yahoo-web-preformance\"></p>\n<hr>\n<p><strong>如何提高网站的速度？</strong></p>\n<h2 id=\"页面内容（Page-Content）\"><a href=\"#页面内容（Page-Content）\" class=\"headerlink\" title=\"页面内容（Page Content）\"></a>页面内容（Page Content）</h2><h2 id=\"服务器（Sever）\"><a href=\"#服务器（Sever）\" class=\"headerlink\" title=\"服务器（Sever）\"></a>服务器（Sever）</h2><h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><h2 id=\"图片（image）\"><a href=\"#图片（image）\" class=\"headerlink\" title=\"图片（image）\"></a>图片（image）</h2><h2 id=\"移动端（Mobile）\"><a href=\"#移动端（Mobile）\" class=\"headerlink\" title=\"移动端（Mobile）\"></a>移动端（Mobile）</h2><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://developer.yahoo.com/performance/rules.html?guccounter=1\" target=\"_blank\" rel=\"noopener\">Best Practices for Speeding Up Your Web Site</a></li>\n<li><a href=\"https://developers.google.com/speed/docs/insights/rules\" target=\"_blank\" rel=\"noopener\">Google Best Practices</a></li>\n<li><a href=\"https://juejin.im/post/5b73ef38f265da281e048e51\" target=\"_blank\" rel=\"noopener\">前端性能优化之雅虎35条军规</a></li>\n<li><a href=\"https://www.cnblogs.com/rubylouvre/p/3471490.html\" target=\"_blank\" rel=\"noopener\">司徒正美-用CSS开启硬件加速来提高网站性能（转）</a></li>\n<li><a href=\"https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css\" target=\"_blank\" rel=\"noopener\">Increase Your Site’s Performance with Hardware-Accelerated CSS</a></li>\n</ul>\n"},{"title":"MacOS终端的一些常用命令行操作（Mac OS Terminal Command Line Mac/Linux）","date":"2020-07-08T03:43:30.000Z","_content":"\n## MacOS 终端常用命令行操作\n\n```sh\n# 查看终端使用情况：\n$ lsof -i tcp:port #（将port换成被占用的端口(如：8086、9998)）\n\n# kill进程：\n$ kill PID #（进程的PID，如2044），杀死对应的进程\n\n# 查看当前目录下的所有文件以及文件夹(包括隐藏文件)：\n$ ls -a\n\n# 隐藏文件显示：\n$ sudo defaults write com.apple.finder AppleShowAllFiles -boolean true\n\n# 隐藏文件显示 /* 需重启电脑*/ ：\n$ sudo defaults write com.apple.finder AppleShowAllFiles -bool true\n\n# 重启Finder：\n$ killall Finder\n\n# 隐藏文件隐藏：\n$ sudo defaults write com.apple.finder AppleShowAllFiles -boolean false\n\n# 隐藏文件隐藏 /* 需重启电脑*/ ：\n$ sudo defaults write com.apple.finder AppleShowAllFiles -bool false\n\n# 重启Finder：\n$ killall Finder\n\n# 删除所有 `.DS_Store` 文件\n$ sudo find / -name \".DS_Store\" -type f -delete\n```\n\n## 使用终端解决Chrome浏览器跨域问题\n\n思路：使用命令行关闭Chrome浏览器的安全策略\n\n**cd到文档目录下**\n\n```sh\n$ cd /Users/br3ad/Documents/xxxx\n```\n\n**创建一个文件夹，用来保存关闭安全策略后的用户信息**\n\n```sh\n$ mkdir MyChromeDevUserData\n```\n\n**以关闭安全策略来重启Chrome浏览器**\n\n```sh\n$ open -n /Applications/Google\\ Chrome.app/ --args --disable-web-security --user-data-dir=/Users/moldybr3ad/Documents/MyChromeDevUserData\n```\n\n**直接关闭Chrome安全策略访问**\n\n```sh\n$ open -a \"Google Chrome\" --args --disable-web-security  --user-data-dir\n```\n\n## 使用终端删除`.DS_Store文件`\n\n1、打开终端，并执行以下命令行\n\n**查找系统所有`.DS_Store`文件并删除**\n\n```sh\n$ sudo find / -name \".DS_Store\" -depth -exec rm {} \\;\n```\n\n2、输入电脑用户管理员密码，会开始进行删除，而这会需要一点时间，需要等一会。\n\n3、彻底解决不让`.DS_Store`文件再产生，只需在终端执行以下命令，即可，若要将它开启时，只需改为false就可以\n\n**禁用或启用自动生成**\n\n**禁止`.DS_Store`生成：**\n\n```sh\n$ defaults write com.apple.desktopservices DSDontWriteNetworkStores true\n```\n\n**恢复`.DS_Store`生成：**\n\n```sh\n$ defaults delete com.apple.desktopservices DSDontWriteNetworkStores false\n\n```\n\n4、在项目中如何删除自动生成的`.DS_Store`文件？\n\n如果项目中还没有生成`.DS_Store`文件，那么直接将`.DS_Store`加入到`.gitignore`文件就可以。\n如果项目中已存在`.DS_Store`文件，需先从项目中将其删除，然后再将它加入到`.gitignore`文件。\n\n**删除项目中所有的`.DS_Store`文件**\n\n```sh\n$ find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch\n```\n\n**将`.DS_Store`文件加入到`.gitignore`**\n\n```sh\n$ echo .DS_Store >> ~/.gitignore\n```\n","source":"_posts/2020-07-08-MacOS终端的一些常用命令行操作.md","raw":"---\ntitle: MacOS终端的一些常用命令行操作（Mac OS Terminal Command Line Mac/Linux）\ndate: 2020-07-08 11:43:30\ntags:\n- Mac\n- MacBook Pro\n- Terminal\n- macOS Catalina\ncategory:\n- [Mac]\n- [macOS]\n---\n\n## MacOS 终端常用命令行操作\n\n```sh\n# 查看终端使用情况：\n$ lsof -i tcp:port #（将port换成被占用的端口(如：8086、9998)）\n\n# kill进程：\n$ kill PID #（进程的PID，如2044），杀死对应的进程\n\n# 查看当前目录下的所有文件以及文件夹(包括隐藏文件)：\n$ ls -a\n\n# 隐藏文件显示：\n$ sudo defaults write com.apple.finder AppleShowAllFiles -boolean true\n\n# 隐藏文件显示 /* 需重启电脑*/ ：\n$ sudo defaults write com.apple.finder AppleShowAllFiles -bool true\n\n# 重启Finder：\n$ killall Finder\n\n# 隐藏文件隐藏：\n$ sudo defaults write com.apple.finder AppleShowAllFiles -boolean false\n\n# 隐藏文件隐藏 /* 需重启电脑*/ ：\n$ sudo defaults write com.apple.finder AppleShowAllFiles -bool false\n\n# 重启Finder：\n$ killall Finder\n\n# 删除所有 `.DS_Store` 文件\n$ sudo find / -name \".DS_Store\" -type f -delete\n```\n\n## 使用终端解决Chrome浏览器跨域问题\n\n思路：使用命令行关闭Chrome浏览器的安全策略\n\n**cd到文档目录下**\n\n```sh\n$ cd /Users/br3ad/Documents/xxxx\n```\n\n**创建一个文件夹，用来保存关闭安全策略后的用户信息**\n\n```sh\n$ mkdir MyChromeDevUserData\n```\n\n**以关闭安全策略来重启Chrome浏览器**\n\n```sh\n$ open -n /Applications/Google\\ Chrome.app/ --args --disable-web-security --user-data-dir=/Users/moldybr3ad/Documents/MyChromeDevUserData\n```\n\n**直接关闭Chrome安全策略访问**\n\n```sh\n$ open -a \"Google Chrome\" --args --disable-web-security  --user-data-dir\n```\n\n## 使用终端删除`.DS_Store文件`\n\n1、打开终端，并执行以下命令行\n\n**查找系统所有`.DS_Store`文件并删除**\n\n```sh\n$ sudo find / -name \".DS_Store\" -depth -exec rm {} \\;\n```\n\n2、输入电脑用户管理员密码，会开始进行删除，而这会需要一点时间，需要等一会。\n\n3、彻底解决不让`.DS_Store`文件再产生，只需在终端执行以下命令，即可，若要将它开启时，只需改为false就可以\n\n**禁用或启用自动生成**\n\n**禁止`.DS_Store`生成：**\n\n```sh\n$ defaults write com.apple.desktopservices DSDontWriteNetworkStores true\n```\n\n**恢复`.DS_Store`生成：**\n\n```sh\n$ defaults delete com.apple.desktopservices DSDontWriteNetworkStores false\n\n```\n\n4、在项目中如何删除自动生成的`.DS_Store`文件？\n\n如果项目中还没有生成`.DS_Store`文件，那么直接将`.DS_Store`加入到`.gitignore`文件就可以。\n如果项目中已存在`.DS_Store`文件，需先从项目中将其删除，然后再将它加入到`.gitignore`文件。\n\n**删除项目中所有的`.DS_Store`文件**\n\n```sh\n$ find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch\n```\n\n**将`.DS_Store`文件加入到`.gitignore`**\n\n```sh\n$ echo .DS_Store >> ~/.gitignore\n```\n","slug":"MacOS终端的一些常用命令行操作","published":1,"updated":"2020-07-08T03:55:51.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvwi001zm5sn0eam8h15","content":"<h2 id=\"MacOS-终端常用命令行操作\"><a href=\"#MacOS-终端常用命令行操作\" class=\"headerlink\" title=\"MacOS 终端常用命令行操作\"></a>MacOS 终端常用命令行操作</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看终端使用情况：</span></span><br><span class=\"line\">$ lsof -i tcp:port <span class=\"comment\">#（将port换成被占用的端口(如：8086、9998)）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kill进程：</span></span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> PID <span class=\"comment\">#（进程的PID，如2044），杀死对应的进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前目录下的所有文件以及文件夹(包括隐藏文件)：</span></span><br><span class=\"line\">$ ls -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件显示：</span></span><br><span class=\"line\">$ sudo defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件显示 /* 需重启电脑*/ ：</span></span><br><span class=\"line\">$ sudo defaults write com.apple.finder AppleShowAllFiles -bool <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启Finder：</span></span><br><span class=\"line\">$ killall Finder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件隐藏：</span></span><br><span class=\"line\">$ sudo defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件隐藏 /* 需重启电脑*/ ：</span></span><br><span class=\"line\">$ sudo defaults write com.apple.finder AppleShowAllFiles -bool <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启Finder：</span></span><br><span class=\"line\">$ killall Finder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除所有 `.DS_Store` 文件</span></span><br><span class=\"line\">$ sudo find / -name <span class=\"string\">\".DS_Store\"</span> -<span class=\"built_in\">type</span> f -delete</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用终端解决Chrome浏览器跨域问题\"><a href=\"#使用终端解决Chrome浏览器跨域问题\" class=\"headerlink\" title=\"使用终端解决Chrome浏览器跨域问题\"></a>使用终端解决Chrome浏览器跨域问题</h2><p>思路：使用命令行关闭Chrome浏览器的安全策略</p>\n<p><strong>cd到文档目录下</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /Users/br3ad/Documents/xxxx</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个文件夹，用来保存关闭安全策略后的用户信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir MyChromeDevUserData</span><br></pre></td></tr></table></figure>\n\n<p><strong>以关闭安全策略来重启Chrome浏览器</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -n /Applications/Google\\ Chrome.app/ --args --<span class=\"built_in\">disable</span>-web-security --user-data-dir=/Users/moldybr3ad/Documents/MyChromeDevUserData</span><br></pre></td></tr></table></figure>\n\n<p><strong>直接关闭Chrome安全策略访问</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -a <span class=\"string\">\"Google Chrome\"</span> --args --<span class=\"built_in\">disable</span>-web-security  --user-data-dir</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用终端删除-DS-Store文件\"><a href=\"#使用终端删除-DS-Store文件\" class=\"headerlink\" title=\"使用终端删除.DS_Store文件\"></a>使用终端删除<code>.DS_Store文件</code></h2><p>1、打开终端，并执行以下命令行</p>\n<p><strong>查找系统所有<code>.DS_Store</code>文件并删除</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo find / -name <span class=\"string\">\".DS_Store\"</span> -depth -<span class=\"built_in\">exec</span> rm &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n\n<p>2、输入电脑用户管理员密码，会开始进行删除，而这会需要一点时间，需要等一会。</p>\n<p>3、彻底解决不让<code>.DS_Store</code>文件再产生，只需在终端执行以下命令，即可，若要将它开启时，只需改为false就可以</p>\n<p><strong>禁用或启用自动生成</strong></p>\n<p><strong>禁止<code>.DS_Store</code>生成：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ defaults write com.apple.desktopservices DSDontWriteNetworkStores <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>恢复<code>.DS_Store</code>生成：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ defaults delete com.apple.desktopservices DSDontWriteNetworkStores <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>4、在项目中如何删除自动生成的<code>.DS_Store</code>文件？</p>\n<p>如果项目中还没有生成<code>.DS_Store</code>文件，那么直接将<code>.DS_Store</code>加入到<code>.gitignore</code>文件就可以。<br>如果项目中已存在<code>.DS_Store</code>文件，需先从项目中将其删除，然后再将它加入到<code>.gitignore</code>文件。</p>\n<p><strong>删除项目中所有的<code>.DS_Store</code>文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch</span><br></pre></td></tr></table></figure>\n\n<p><strong>将<code>.DS_Store</code>文件加入到<code>.gitignore</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> .DS_Store &gt;&gt; ~/.gitignore</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MacOS-终端常用命令行操作\"><a href=\"#MacOS-终端常用命令行操作\" class=\"headerlink\" title=\"MacOS 终端常用命令行操作\"></a>MacOS 终端常用命令行操作</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看终端使用情况：</span></span><br><span class=\"line\">$ lsof -i tcp:port <span class=\"comment\">#（将port换成被占用的端口(如：8086、9998)）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kill进程：</span></span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> PID <span class=\"comment\">#（进程的PID，如2044），杀死对应的进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前目录下的所有文件以及文件夹(包括隐藏文件)：</span></span><br><span class=\"line\">$ ls -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件显示：</span></span><br><span class=\"line\">$ sudo defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件显示 /* 需重启电脑*/ ：</span></span><br><span class=\"line\">$ sudo defaults write com.apple.finder AppleShowAllFiles -bool <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启Finder：</span></span><br><span class=\"line\">$ killall Finder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件隐藏：</span></span><br><span class=\"line\">$ sudo defaults write com.apple.finder AppleShowAllFiles -boolean <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件隐藏 /* 需重启电脑*/ ：</span></span><br><span class=\"line\">$ sudo defaults write com.apple.finder AppleShowAllFiles -bool <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启Finder：</span></span><br><span class=\"line\">$ killall Finder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除所有 `.DS_Store` 文件</span></span><br><span class=\"line\">$ sudo find / -name <span class=\"string\">\".DS_Store\"</span> -<span class=\"built_in\">type</span> f -delete</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用终端解决Chrome浏览器跨域问题\"><a href=\"#使用终端解决Chrome浏览器跨域问题\" class=\"headerlink\" title=\"使用终端解决Chrome浏览器跨域问题\"></a>使用终端解决Chrome浏览器跨域问题</h2><p>思路：使用命令行关闭Chrome浏览器的安全策略</p>\n<p><strong>cd到文档目录下</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /Users/br3ad/Documents/xxxx</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建一个文件夹，用来保存关闭安全策略后的用户信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir MyChromeDevUserData</span><br></pre></td></tr></table></figure>\n\n<p><strong>以关闭安全策略来重启Chrome浏览器</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -n /Applications/Google\\ Chrome.app/ --args --<span class=\"built_in\">disable</span>-web-security --user-data-dir=/Users/moldybr3ad/Documents/MyChromeDevUserData</span><br></pre></td></tr></table></figure>\n\n<p><strong>直接关闭Chrome安全策略访问</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -a <span class=\"string\">\"Google Chrome\"</span> --args --<span class=\"built_in\">disable</span>-web-security  --user-data-dir</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用终端删除-DS-Store文件\"><a href=\"#使用终端删除-DS-Store文件\" class=\"headerlink\" title=\"使用终端删除.DS_Store文件\"></a>使用终端删除<code>.DS_Store文件</code></h2><p>1、打开终端，并执行以下命令行</p>\n<p><strong>查找系统所有<code>.DS_Store</code>文件并删除</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo find / -name <span class=\"string\">\".DS_Store\"</span> -depth -<span class=\"built_in\">exec</span> rm &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n\n<p>2、输入电脑用户管理员密码，会开始进行删除，而这会需要一点时间，需要等一会。</p>\n<p>3、彻底解决不让<code>.DS_Store</code>文件再产生，只需在终端执行以下命令，即可，若要将它开启时，只需改为false就可以</p>\n<p><strong>禁用或启用自动生成</strong></p>\n<p><strong>禁止<code>.DS_Store</code>生成：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ defaults write com.apple.desktopservices DSDontWriteNetworkStores <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>恢复<code>.DS_Store</code>生成：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ defaults delete com.apple.desktopservices DSDontWriteNetworkStores <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>4、在项目中如何删除自动生成的<code>.DS_Store</code>文件？</p>\n<p>如果项目中还没有生成<code>.DS_Store</code>文件，那么直接将<code>.DS_Store</code>加入到<code>.gitignore</code>文件就可以。<br>如果项目中已存在<code>.DS_Store</code>文件，需先从项目中将其删除，然后再将它加入到<code>.gitignore</code>文件。</p>\n<p><strong>删除项目中所有的<code>.DS_Store</code>文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch</span><br></pre></td></tr></table></figure>\n\n<p><strong>将<code>.DS_Store</code>文件加入到<code>.gitignore</code></strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> .DS_Store &gt;&gt; ~/.gitignore</span><br></pre></td></tr></table></figure>\n"},{"title":"基于Vue SEO的解决方案","date":"2020-07-01T12:02:57.000Z","category":null,"_content":"\n## 参考链接\n\n> [基于Vue SEO的四种方案](https://segmentfault.com/a/1190000019623624)\n","source":"_posts/2020-07-01-基于Vue-SEO的解决方案.md","raw":"---\ntitle: 基于Vue SEO的解决方案\ndate: 2020-07-01 20:02:57\ntags:\ncategory:\n---\n\n## 参考链接\n\n> [基于Vue SEO的四种方案](https://segmentfault.com/a/1190000019623624)\n","slug":"基于Vue-SEO的解决方案","published":1,"updated":"2020-07-01T12:03:44.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvwm0022m5sncmouf52d","content":"<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000019623624\" target=\"_blank\" rel=\"noopener\">基于Vue SEO的四种方案</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000019623624\" target=\"_blank\" rel=\"noopener\">基于Vue SEO的四种方案</a></p>\n</blockquote>\n"},{"title":"理解前端跨域的几种方式和解决方案（Cross-Origin Resource Sharing）","date":"2020-07-01T11:56:00.000Z","_content":"\n## 什么是跨域？（CORS，Cross-Origin Resource Sharing）\n\n---\n\n## CORS 头\n\n> `Access-Control-Allow-Origin`：指示请求的资源能共享给哪些域。\n> `Access-Control-Allow-Credentials`：指示当请求的凭证标记为 true 时，是否响应该请求。\n\n> [w3g-CORS](https://www.w3.org/wiki/CORS)\n> [CORS for Developers](https://w3c.github.io/webappsec-cors-for-developers/)\n> [Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n> [九种跨域方式实现原理（完整版）](https://juejin.im/post/5c23993de51d457b8c1f4ee1)\n> [前端常见跨域解决方案（全）](https://segmentfault.com/a/1190000011145364)\n> [不要再问我跨域的问题了](https://segmentfault.com/a/1190000015597029)\n","source":"_posts/2020-07-01-浏览器跨域的解决方案.md","raw":"---\ntitle: 理解前端跨域的几种方式和解决方案（Cross-Origin Resource Sharing）\ndate: 2020-07-01 19:56:00\ntags:\n- 前端\n- 跨域\n- 浏览器跨域\n- CORS\ncategory:\n- [HHTP]\n- [前端]\n- [前端基础]\n---\n\n## 什么是跨域？（CORS，Cross-Origin Resource Sharing）\n\n---\n\n## CORS 头\n\n> `Access-Control-Allow-Origin`：指示请求的资源能共享给哪些域。\n> `Access-Control-Allow-Credentials`：指示当请求的凭证标记为 true 时，是否响应该请求。\n\n> [w3g-CORS](https://www.w3.org/wiki/CORS)\n> [CORS for Developers](https://w3c.github.io/webappsec-cors-for-developers/)\n> [Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n> [九种跨域方式实现原理（完整版）](https://juejin.im/post/5c23993de51d457b8c1f4ee1)\n> [前端常见跨域解决方案（全）](https://segmentfault.com/a/1190000011145364)\n> [不要再问我跨域的问题了](https://segmentfault.com/a/1190000015597029)\n","slug":"浏览器跨域的解决方案","published":1,"updated":"2020-07-01T12:14:58.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyvwt0025m5sncf6b6bts","content":"<h2 id=\"什么是跨域？（CORS，Cross-Origin-Resource-Sharing）\"><a href=\"#什么是跨域？（CORS，Cross-Origin-Resource-Sharing）\" class=\"headerlink\" title=\"什么是跨域？（CORS，Cross-Origin Resource Sharing）\"></a>什么是跨域？（CORS，Cross-Origin Resource Sharing）</h2><hr>\n<h2 id=\"CORS-头\"><a href=\"#CORS-头\" class=\"headerlink\" title=\"CORS 头\"></a>CORS 头</h2><blockquote>\n<p><code>Access-Control-Allow-Origin</code>：指示请求的资源能共享给哪些域。<br><code>Access-Control-Allow-Credentials</code>：指示当请求的凭证标记为 true 时，是否响应该请求。</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.w3.org/wiki/CORS\" target=\"_blank\" rel=\"noopener\">w3g-CORS</a><br><a href=\"https://w3c.github.io/webappsec-cors-for-developers/\" target=\"_blank\" rel=\"noopener\">CORS for Developers</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener\">Cross-Origin Resource Sharing (CORS)</a><br><a href=\"https://juejin.im/post/5c23993de51d457b8c1f4ee1\" target=\"_blank\" rel=\"noopener\">九种跨域方式实现原理（完整版）</a><br><a href=\"https://segmentfault.com/a/1190000011145364\" target=\"_blank\" rel=\"noopener\">前端常见跨域解决方案（全）</a><br><a href=\"https://segmentfault.com/a/1190000015597029\" target=\"_blank\" rel=\"noopener\">不要再问我跨域的问题了</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是跨域？（CORS，Cross-Origin-Resource-Sharing）\"><a href=\"#什么是跨域？（CORS，Cross-Origin-Resource-Sharing）\" class=\"headerlink\" title=\"什么是跨域？（CORS，Cross-Origin Resource Sharing）\"></a>什么是跨域？（CORS，Cross-Origin Resource Sharing）</h2><hr>\n<h2 id=\"CORS-头\"><a href=\"#CORS-头\" class=\"headerlink\" title=\"CORS 头\"></a>CORS 头</h2><blockquote>\n<p><code>Access-Control-Allow-Origin</code>：指示请求的资源能共享给哪些域。<br><code>Access-Control-Allow-Credentials</code>：指示当请求的凭证标记为 true 时，是否响应该请求。</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.w3.org/wiki/CORS\" target=\"_blank\" rel=\"noopener\">w3g-CORS</a><br><a href=\"https://w3c.github.io/webappsec-cors-for-developers/\" target=\"_blank\" rel=\"noopener\">CORS for Developers</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener\">Cross-Origin Resource Sharing (CORS)</a><br><a href=\"https://juejin.im/post/5c23993de51d457b8c1f4ee1\" target=\"_blank\" rel=\"noopener\">九种跨域方式实现原理（完整版）</a><br><a href=\"https://segmentfault.com/a/1190000011145364\" target=\"_blank\" rel=\"noopener\">前端常见跨域解决方案（全）</a><br><a href=\"https://segmentfault.com/a/1190000015597029\" target=\"_blank\" rel=\"noopener\">不要再问我跨域的问题了</a></p>\n</blockquote>\n"},{"title":"常用Git命令操作清单","updated":"2019-11-22T16:00:00.000Z","toc":true,"comments":1,"_content":"\n**下面是我整理的常用 `Git` 命令清单。几个专用名词的译名如下。**\n\n* Workspace：工作区\n* Index / Stage：暂存区\n* Repository：仓库区（或本地仓库）\n* Remote：远程仓库\n\n\n## 新建代码库\n\n```sh\n# 在当前目录新建一个Git代码库\n$ git init\n\n#新建一个目录，将其初始化为Git代码库\n$ git init [project - name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n\n## 配置\n\n`Git`的设置文件为`.gitconfig`，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n```sh\n# 显示当前的Git配置\n$ git config --list\n\n# 查看全局配置信息\n$ git config --global --list\n\n# 查看当前仓库配置信息\n$ git config --local --list\n\n# 配置当前仓库提交的用户名\n$ git config --local user.name \"[uerName]\"\n\n# 配置当前仓库提交的邮箱地址\n$ git config --local user.email \"[Email]\"\n\n# 卸载全局http代理\n$ git config --global --unset http.proxy\n\n# 全局配置提交邮箱地址\n$ git config --global --replace-all user.email \"[Email]\"\n\n# 全局配置提交用户名\n$ git config --global --replace-all user.name \"[userName]\"\n\n# 全局配置http和https代理\n$ git config --global http.proxy URL\n$ git config --global https.proxy URL\n\n# 卸载全局http和https代理\n$ git config --global --unset http.proxy\n$ git config --global --unset https.proxy\n\n# 查看当前仓库的http代理信息\n$ git config http.proxy\n\n# 查看全局http代理信息\n$ git config --global http.proxy\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n\n# 设置提交代码时的用户邮箱\n$ git config [--global] user.email \"[email address]\"\n\n# 设置提交代码时的用户邮箱\n$ git config [--global] core.editor sublime //根据编辑器名称\n\n# 生成SSH密钥\n$ ssh-keygen -t rsa -C \"your email\" \n# 一路回车，最后会得到两个文件：id_rsa和id_rsa.pub\n\n# 查看密钥\n$ cat ~/.ssh/id_rsa.pub\n```\n\n## 增加删除文件\n\n```sh\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\t\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\t\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\t\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\t\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\t\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n## 代码提交\n\n```sh\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\t\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\t\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\t\n# 提交时显示所有diff信息\n$ git commit -v\n\t\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\t\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n## 分支\n\n```sh\n# 列出所有本地分支\n$ git branch\n\t\n# 列出所有远程分支\n$ git branch -r\n\t\n# 列出所有本地分支和远程分支\n$ git branch -a\n\t\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\t\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\t\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\t\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\t\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\t\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\t\n# 合并指定分支到当前分支\n$ git merge [branch]\n\t\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\t\n# 删除分支\n$ git branch -d [branch-name]\n\t\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n## 标签\n\n```sh\n# 列出所有tag\n$ git tag\n\t\n# 新建一个tag在当前commit\n$ git tag [tag]\n\t\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\t\n# 删除本地tag\n$ git tag -d [tag]\n\t\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 批量删除本地tag \n# 主要用到awk 正则表达式\n$ git tag -l| awk 'RegExp' | xargs git tag -d\n\n# 批量删除远程tag \n# 主要用到awk 正则表达式\n$ git show-ref --tag | awk 'RegExp' | xargs git push origin \n\n# 查看tag信息\n$ git show [tag]\n\n# 查看本地所有tag信息\n$ git tag -l\n\n# 查看远程所有tag信息\n$ git ls-remote --tags\n\t\n# 提交指定tag\n$ git push [remote] [tag]\n\t\n# 提交所有tag\n$ git push [remote] --tags\n\t\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n## 查看信息\n\n```sh\n# 显示有变更的文件\n$ git status\n\t\n# 显示当前分支的版本历史\n$ git log\n\t\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\t\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\t\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\t\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\t\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\t\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\t\n# 显示暂存区和工作区的差异\n$ git diff\n\t\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\t\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\t\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\t\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\t\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\t\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\t\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n## 远程同步\n\n```sh\n# 从远端拉取代码\n$ git pull origin dev \n\t\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\t\n# 显示所有远程仓库\n$ git remote -v\n\t\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 本地项目与远程仓库进行关联\n$ git remote add origin [url]\n    \n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\t\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\t\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\t\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\t\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n\n## 撤销\n\n```sh\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\t\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\t\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\t\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\t\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\t\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\t\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\t\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\t\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n```\n\n\n## 参考链接\n\n+ [*作者：阮一峰*](http://www.ruanyifeng.com)\n+ [*原文地址：常用 Git 命令清单*](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n+ [*如何删除Git仓库中冗余的tag？*](https://segmentfault.com/a/1190000015380270)\n+ [*JavaScript正则匹配规则*](https://javascript.ruanyifeng.com/stdlib/regexp.html#toc11)\n+ [*Linux基础之-正则表达式(grep、sed、swk)*](https://www.cnblogs.com/OldJack/p/6607155.html)\n","source":"_posts/2019-11-23-git常用命令操作清单.md","raw":"---\ntitle: 常用Git命令操作清单\nupdated: 2019/11/23\ntags: \n  - 前端开发\n  - Git相关\ncategory: \n- [Git]\ntoc: true\ncomments: true\n---\n\n**下面是我整理的常用 `Git` 命令清单。几个专用名词的译名如下。**\n\n* Workspace：工作区\n* Index / Stage：暂存区\n* Repository：仓库区（或本地仓库）\n* Remote：远程仓库\n\n\n## 新建代码库\n\n```sh\n# 在当前目录新建一个Git代码库\n$ git init\n\n#新建一个目录，将其初始化为Git代码库\n$ git init [project - name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n\n## 配置\n\n`Git`的设置文件为`.gitconfig`，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n```sh\n# 显示当前的Git配置\n$ git config --list\n\n# 查看全局配置信息\n$ git config --global --list\n\n# 查看当前仓库配置信息\n$ git config --local --list\n\n# 配置当前仓库提交的用户名\n$ git config --local user.name \"[uerName]\"\n\n# 配置当前仓库提交的邮箱地址\n$ git config --local user.email \"[Email]\"\n\n# 卸载全局http代理\n$ git config --global --unset http.proxy\n\n# 全局配置提交邮箱地址\n$ git config --global --replace-all user.email \"[Email]\"\n\n# 全局配置提交用户名\n$ git config --global --replace-all user.name \"[userName]\"\n\n# 全局配置http和https代理\n$ git config --global http.proxy URL\n$ git config --global https.proxy URL\n\n# 卸载全局http和https代理\n$ git config --global --unset http.proxy\n$ git config --global --unset https.proxy\n\n# 查看当前仓库的http代理信息\n$ git config http.proxy\n\n# 查看全局http代理信息\n$ git config --global http.proxy\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n\n# 设置提交代码时的用户邮箱\n$ git config [--global] user.email \"[email address]\"\n\n# 设置提交代码时的用户邮箱\n$ git config [--global] core.editor sublime //根据编辑器名称\n\n# 生成SSH密钥\n$ ssh-keygen -t rsa -C \"your email\" \n# 一路回车，最后会得到两个文件：id_rsa和id_rsa.pub\n\n# 查看密钥\n$ cat ~/.ssh/id_rsa.pub\n```\n\n## 增加删除文件\n\n```sh\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\t\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\t\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\t\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\t\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\t\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n## 代码提交\n\n```sh\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\t\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\t\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\t\n# 提交时显示所有diff信息\n$ git commit -v\n\t\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\t\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n## 分支\n\n```sh\n# 列出所有本地分支\n$ git branch\n\t\n# 列出所有远程分支\n$ git branch -r\n\t\n# 列出所有本地分支和远程分支\n$ git branch -a\n\t\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\t\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\t\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\t\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\t\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\t\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\t\n# 合并指定分支到当前分支\n$ git merge [branch]\n\t\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\t\n# 删除分支\n$ git branch -d [branch-name]\n\t\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n## 标签\n\n```sh\n# 列出所有tag\n$ git tag\n\t\n# 新建一个tag在当前commit\n$ git tag [tag]\n\t\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\t\n# 删除本地tag\n$ git tag -d [tag]\n\t\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 批量删除本地tag \n# 主要用到awk 正则表达式\n$ git tag -l| awk 'RegExp' | xargs git tag -d\n\n# 批量删除远程tag \n# 主要用到awk 正则表达式\n$ git show-ref --tag | awk 'RegExp' | xargs git push origin \n\n# 查看tag信息\n$ git show [tag]\n\n# 查看本地所有tag信息\n$ git tag -l\n\n# 查看远程所有tag信息\n$ git ls-remote --tags\n\t\n# 提交指定tag\n$ git push [remote] [tag]\n\t\n# 提交所有tag\n$ git push [remote] --tags\n\t\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n## 查看信息\n\n```sh\n# 显示有变更的文件\n$ git status\n\t\n# 显示当前分支的版本历史\n$ git log\n\t\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\t\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\t\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\t\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\t\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\t\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\t\n# 显示暂存区和工作区的差异\n$ git diff\n\t\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\t\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\t\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\t\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\t\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\t\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\t\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n## 远程同步\n\n```sh\n# 从远端拉取代码\n$ git pull origin dev \n\t\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\t\n# 显示所有远程仓库\n$ git remote -v\n\t\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 本地项目与远程仓库进行关联\n$ git remote add origin [url]\n    \n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\t\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\t\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\t\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\t\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n\n## 撤销\n\n```sh\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\t\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\t\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\t\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\t\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\t\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\t\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\t\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\t\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n```\n\n\n## 参考链接\n\n+ [*作者：阮一峰*](http://www.ruanyifeng.com)\n+ [*原文地址：常用 Git 命令清单*](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)\n+ [*如何删除Git仓库中冗余的tag？*](https://segmentfault.com/a/1190000015380270)\n+ [*JavaScript正则匹配规则*](https://javascript.ruanyifeng.com/stdlib/regexp.html#toc11)\n+ [*Linux基础之-正则表达式(grep、sed、swk)*](https://www.cnblogs.com/OldJack/p/6607155.html)\n","slug":"git常用命令操作清单","published":1,"date":"2019-11-22T16:00:00.000Z","layout":"post","photos":[],"link":"","_id":"ckcctyw3p009wm5sn5hfdaewk","content":"<p><strong>下面是我整理的常用 <code>Git</code> 命令清单。几个专用名词的译名如下。</strong></p>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index / Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n<h2 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project - name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><code>Git</code>的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全局配置信息</span></span><br><span class=\"line\">$ git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前仓库配置信息</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">local</span> --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置当前仓库提交的用户名</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">local</span> user.name <span class=\"string\">\"[uerName]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置当前仓库提交的邮箱地址</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">local</span> user.email <span class=\"string\">\"[Email]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载全局http代理</span></span><br><span class=\"line\">$ git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局配置提交邮箱地址</span></span><br><span class=\"line\">$ git config --global --replace-all user.email <span class=\"string\">\"[Email]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局配置提交用户名</span></span><br><span class=\"line\">$ git config --global --replace-all user.name <span class=\"string\">\"[userName]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局配置http和https代理</span></span><br><span class=\"line\">$ git config --global http.proxy URL</span><br><span class=\"line\">$ git config --global https.proxy URL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载全局http和https代理</span></span><br><span class=\"line\">$ git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">$ git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前仓库的http代理信息</span></span><br><span class=\"line\">$ git config http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全局http代理信息</span></span><br><span class=\"line\">$ git config --global http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">\"[name]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户邮箱</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">\"[email address]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户邮箱</span></span><br><span class=\"line\">$ git config [--global] core.editor sublime //根据编辑器名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成SSH密钥</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your email\"</span> </span><br><span class=\"line\"><span class=\"comment\"># 一路回车，最后会得到两个文件：id_rsa和id_rsa.pub</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看密钥</span></span><br><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加删除文件\"><a href=\"#增加删除文件\" class=\"headerlink\" title=\"增加删除文件\"></a>增加删除文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --<span class=\"built_in\">set</span>-upstream [branch] [remote-branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量删除本地tag </span></span><br><span class=\"line\"><span class=\"comment\"># 主要用到awk 正则表达式</span></span><br><span class=\"line\">$ git tag -l| awk <span class=\"string\">'RegExp'</span> | xargs git tag -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量删除远程tag </span></span><br><span class=\"line\"><span class=\"comment\"># 主要用到awk 正则表达式</span></span><br><span class=\"line\">$ git show-ref --tag | awk <span class=\"string\">'RegExp'</span> | xargs git push origin </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看本地所有tag信息</span></span><br><span class=\"line\">$ git tag -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程所有tag信息</span></span><br><span class=\"line\">$ git ls-remote --tags</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从远端拉取代码</span></span><br><span class=\"line\">$ git pull origin dev </span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地项目与远程仓库进行关联</span></span><br><span class=\"line\">$ git remote add origin [url]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\"><em>作者：阮一峰</em></a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\"><em>原文地址：常用 Git 命令清单</em></a></li>\n<li><a href=\"https://segmentfault.com/a/1190000015380270\" target=\"_blank\" rel=\"noopener\"><em>如何删除Git仓库中冗余的tag？</em></a></li>\n<li><a href=\"https://javascript.ruanyifeng.com/stdlib/regexp.html#toc11\" target=\"_blank\" rel=\"noopener\"><em>JavaScript正则匹配规则</em></a></li>\n<li><a href=\"https://www.cnblogs.com/OldJack/p/6607155.html\" target=\"_blank\" rel=\"noopener\"><em>Linux基础之-正则表达式(grep、sed、swk)</em></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>下面是我整理的常用 <code>Git</code> 命令清单。几个专用名词的译名如下。</strong></p>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index / Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n<h2 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\">$ git init [project - name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> [url]</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><code>Git</code>的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全局配置信息</span></span><br><span class=\"line\">$ git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前仓库配置信息</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">local</span> --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置当前仓库提交的用户名</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">local</span> user.name <span class=\"string\">\"[uerName]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置当前仓库提交的邮箱地址</span></span><br><span class=\"line\">$ git config --<span class=\"built_in\">local</span> user.email <span class=\"string\">\"[Email]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载全局http代理</span></span><br><span class=\"line\">$ git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局配置提交邮箱地址</span></span><br><span class=\"line\">$ git config --global --replace-all user.email <span class=\"string\">\"[Email]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局配置提交用户名</span></span><br><span class=\"line\">$ git config --global --replace-all user.name <span class=\"string\">\"[userName]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局配置http和https代理</span></span><br><span class=\"line\">$ git config --global http.proxy URL</span><br><span class=\"line\">$ git config --global https.proxy URL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载全局http和https代理</span></span><br><span class=\"line\">$ git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">$ git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前仓库的http代理信息</span></span><br><span class=\"line\">$ git config http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看全局http代理信息</span></span><br><span class=\"line\">$ git config --global http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git config [--global] user.name <span class=\"string\">\"[name]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户邮箱</span></span><br><span class=\"line\">$ git config [--global] user.email <span class=\"string\">\"[email address]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户邮箱</span></span><br><span class=\"line\">$ git config [--global] core.editor sublime //根据编辑器名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成SSH密钥</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your email\"</span> </span><br><span class=\"line\"><span class=\"comment\"># 一路回车，最后会得到两个文件：id_rsa和id_rsa.pub</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看密钥</span></span><br><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加删除文件\"><a href=\"#增加删除文件\" class=\"headerlink\" title=\"增加删除文件\"></a>增加删除文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\">$ git branch --<span class=\"built_in\">set</span>-upstream [branch] [remote-branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git tag [tag]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git tag [tag] [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git tag -d [tag]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量删除本地tag </span></span><br><span class=\"line\"><span class=\"comment\"># 主要用到awk 正则表达式</span></span><br><span class=\"line\">$ git tag -l| awk <span class=\"string\">'RegExp'</span> | xargs git tag -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量删除远程tag </span></span><br><span class=\"line\"><span class=\"comment\"># 主要用到awk 正则表达式</span></span><br><span class=\"line\">$ git show-ref --tag | awk <span class=\"string\">'RegExp'</span> | xargs git push origin </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [tag]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看本地所有tag信息</span></span><br><span class=\"line\">$ git tag -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程所有tag信息</span></span><br><span class=\"line\">$ git ls-remote --tags</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [tag]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -p [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></span><br><span class=\"line\">$ git diff</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></span><br><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从远端拉取代码</span></span><br><span class=\"line\">$ git pull origin dev </span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地项目与远程仓库进行关联</span></span><br><span class=\"line\">$ git remote add origin [url]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\"><em>作者：阮一峰</em></a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\"><em>原文地址：常用 Git 命令清单</em></a></li>\n<li><a href=\"https://segmentfault.com/a/1190000015380270\" target=\"_blank\" rel=\"noopener\"><em>如何删除Git仓库中冗余的tag？</em></a></li>\n<li><a href=\"https://javascript.ruanyifeng.com/stdlib/regexp.html#toc11\" target=\"_blank\" rel=\"noopener\"><em>JavaScript正则匹配规则</em></a></li>\n<li><a href=\"https://www.cnblogs.com/OldJack/p/6607155.html\" target=\"_blank\" rel=\"noopener\"><em>Linux基础之-正则表达式(grep、sed、swk)</em></a></li>\n</ul>\n"},{"title":"CSS 结构和层叠总结","date":"2019-11-25T10:40:16.000Z","_content":"\n## CSS 特殊性(CSS Specificity)\n\n首先看下面这个例子：\n```html\n<!-- HTML -->\n<body>\n  <h1>this is heading 1.</h1>\n  <h2 class=\"grape\">this is heading 2.</h2>\n  <table>\n    <tr id=\"totals\">\n      <td>\n        <ul>\n          <li id=\"answer\">this is contents of the list.</li>\n        </ul>\n      </td>\n    </tr>\n    <!-- /totals -->\n  </table>\n</body>\n```\n```css\n/* CSS */\nh1 {color: red;}\nbody h1 { color: green;}\n\nh2.grape {color: purple;}\nh2 {color: silver;}\n\nhtml > body table tr[id=\"totals\"] td ul > li {color: maroon;}\nli#answer {color: navy;}\n\n```\n\n以上CSS属性声明那个规则更强？\n\n**答案如下：**\n\n> + `body h1` > `h1`\n> + `h2.grape` > `h2`\n> + `li#answer` > `html > body table tr[id=\"totals\"] td ul > li`\n\n\n[点击查看Demo](http://imoldy.com/demo/css/css_specificity/01.html)\n\n### CSS 特殊性值\n\n选择器的特殊性值表述为4个部分，如：**0, 0, 0, 0**\n\n选择器的具体特殊性值如下：\n\n> + 选择器中的ID属性值： **0, 1, 0, 0**; 例：`#id`\n> + 选择器中类属性值、属性选择、伪类： **0, 1, 0, 0**; 例：`.className`、`*[attribute]`、`:hover`\n> + 选择器中的元素、伪元素：**0, 0, 0, 1**; 例：`div`、`div::before`、`div::after`\n> + 结合符、通配选择器：**0, 0, 0, 0**; 例：`*`、`>`\n> + HTML元素中的内联样式特殊性都是：**1，0，0，0**; 例：```<div style=\"color: black; font-size: 20px\">test</div>```\n\n例子如下：\n```html\n<!-- HTML -->\n<body>\n  <h1>Section Heading 1 Part.</h1>\n  <p class=\"grape\">This is a grape paragraph.</p>\n  <p class=\"bright\">This is a bright paragraph and <em class=\"dark\">dark</em>.</p>\n  <p id=\"element\">this is a paragraph.</p>\n  <div id=\"sidebar\">This is sidebar div and <a href=\"#x\">alink text.</a></div>\n</body>\n```\n```css\n/* CSS */\nh1 {color: red;}  /* specificity = 0, 0, 0, 1 */\np em {color: purple;} /* specificity = 0, 0, 0, 2 */\n.grape {color: purple;} /* specificity = 0, 0, 1, 0 */\n*.bright {color: yellow;} /* specificity = 0, 0, 1, 0 */\np.bright em.dark {color: maroon;} /* specificity = 0, 0, 2, 2 */\n#element {color: blue;} /* specificity = 0, 1, 0, 0 */\ndiv#sidebar *[href=\"#x\"] {color: silver;} /* specificity = 0, 1, 1, 1 */\n```\n\n**需要注意的地方：**\n> **0, 0, 1, 0** 要大于**0, 0, 0, 13**\n> 特殊性是从左向右排序的，特殊性值**1, 0, 0, 0**大于以0开头的所有特殊性值，不论后面的数字是什么\n\n\n### CSS 声明和特殊性\n\n1、确定一个选择器的特殊性，这个值将会授予其所有相关声明，如下所示：\n```html\n<!-- HTML -->\n<h1>Section Heading 1 Part.</h1>\n```\n```css\n/* CSS */\nh1 {color: silver; background: black;}\n/* h1标签的color和background属性的特殊性都为：0, 0, 0, 1 */\n```\n\n2、多条规则会被用户代理“解组”为单独的规则，如下所示：\n```html\n<!-- HTML -->\n<h1>Section Heading 1 Part.</h1>\n```\n```css\n/* CSS */\nh1 {color: silver; background: black;}\n/* 解组后 */\nh1 {color: silver;}\nh1 {background: black;}\n\n/* \b这两个规则的特殊性都是:0, 0, 0, 1，各声明得到的特殊性值也就是：0, 0, 0, 1 */\n```\n\n3、分组选择器会被用户代理“解组”为单独的规则，如下所示：\n```html\n<!-- HTML -->\n<h1>Section Heading 1 Part.</h1>\n<h2 class=\"section\">Section Heading 1 Part.</h2>\n```\n```css\n/* CSS */\nh1, h2.section {color: silver; background: black;}\n\n/* 解组后 */\nh1 {color: silver;} /* 0, 0, 0, 1 */\nh1 {background: black;} /* 0, 0, 0, 1 */\n\nh2.section {color: silver;} /* 0, 0, 1, 1 */\nh2.section {background: black;} /* 0, 0, 1, 1 */\n```\n\n4、“解组”完后，单独选择器的单独规则开始根据计算出来的最高特殊性值来显示元素\n\n\n### 通配选择器特殊性\n\n1、通配选择器`*`的特殊性值为：**0, 0, 0, 0**，但需要注意的是通配选择器不等于没有特殊性（设置了要比没有设置强）\n\n例子如下：\n```html\n<!-- HTML -->\n<html>\n  <body>\n    <div>\n      <p>This is a paragraph.</p>\n    </div>\n    <p>This is a paragraph.</p>\n    <p>This is a paragraph.</p>\n  </body>\n</html>\n```\n```css\n/* CSS */\ndiv p {color: black;} /* 0, 0, 0, 2 */\n* {color: gray;} /* 0, 0, 0, 0 */\n/* 根据特殊性的值来计算div下包含的段落都是黑色，其他元素都是灰色 */\n```\n\n2、如果一个选择器中包含通配选择器和其他选择器，选择器的特殊性不会因为通配选择器的出现发生改变，如下所示：\n```html\n<!-- HTML -->\n<body>\n  <div>\n    <p>This is a paragrah<strong> Strong text</strong></p>\n  </div>\n</body>\n```\n```css\n/* CSS */\ndiv p {color: black;} /* 0, 0, 0, 2 */\nbody * strong {color: yellow;} /* 0, 0, 0, 2 */\n/* 上面两个选择器的特殊性完全相等 */\n```\n\n### ID和属性选择器的特殊性\n\nID选择器和指定ID属性的属性选择器在特殊性上有所不同，如下所示：\n\n```html\n<!-- HTML -->\n<html>\n  <head></head>\n  <body>\n    <table>\n      <tr id=\"totals\">\n        <td>\n          <ul>\n            <li id=\"answer\">Answer Content</li>\n          </ul>\n        </td>\n      </tr>\n    </table>\n  </body>\n</html>\n```\n```css\n/* CSS */\nhtml > body table tr[id=\"totals\"] td ul > li {color: maroon;} /* 0, 0, 1, 7 */\nli#answer {color: navy;} /* 0, 1, 0, 1 (Winner)*/\n```\n\n### 内联样式特殊性\n\n> 通常，特殊性的第一个0是为内联样式声明保留，它要比所有其他声明的特殊性都要高\n> 内联样式声明的特殊性为：**1, 0, 0, 0**\n\n例子如下：\n```html\n<!-- HTML -->\n<h1 style=\"color: green;\" id=\"header\">The meadow party</h1> /* 1, 0, 0, 0 */\n```\n```css\n/* CSS */\nh1#header {color: red;} /* 0, 1, 0, 1 */\n\n/* 因为内联样式特殊性要比其他声明的特殊性都高, 所以这里h1元素的文字内容颜色是绿色 */\n```\n\n---\n\n## CSS 重要性(CSS !Important)\n\n> + 重要性标识：在样式的声明分号前插入：`!important;`\n> + 标志为`!important;`的声明规则，没有特殊性的特殊性值，优先级是最高的\n\n例子如下：\n```html\n<!-- HTML -->\n<h1 class=\"title\">NightWing</h1>\n```\n```css\n/* CSS */\nh1 {font-style: italic; color: gray !important;}\n.title {color: black; background: silver;}\n* {background: black !important;}\n\n/* 因为添加了!important;的样式是优先级最高的，所以这里h1元素的最终样式应该为：\nh1.title {\n  font-style: italic;\n  color: gray !important;\n  background: black !important;\n} \n*/\n```\n\n---\n\n## CSS 继承(CSS Inheritance)\n> 继承的值没有特殊性，甚至连0都没有；也就是说，**0特殊性要比无特殊性更强**（特殊性为0高于继承）\n\n\n1、0特殊性比无特殊性要强，例子如下：\n```html\n<!-- HTML -->\n<h1 id=\"page-title\">Meerkat <em>Central</em></h1>\n<p>Welcome to the best place on the web for meerkat information!</p>\n```\n```CSS\n/* CSS */\n* {color: gray;} /* 0, 0, 0, 0*/\nh1#page-title {color: black;} /* 0, 1, 0, 1 */\n\n/*\n因为这里em的color属性没有声明，先从h1元素继承，但又给通配选择器*声明了color属性\n0 > 无特殊性\n所以最终呈现出来的样式为：\nh1#page-title {\n  color: black;\n}\nem {\n  color: gray;\n  font-style: italic;\n}\np {\n  color: gray;\n}\n*/\n```\n\n2、不加区别地使用通配选择器（`*`）可能存在一些问题，需谨慎使用通配选择器（`*`）\n> 通配选择器（`*`）能匹配任何元素，又是0特殊性，优先于继承值，所以有一种短路继承的效果\n> 为了避免这个问题，避免不加区别地使用通配选择器（`*`），从根本上解决这个问题\n\n3、子元素是`<a>`标签，`<a>`标签会使用浏览器用户代理样式表中的伪类样式（`a:link`），需要单独为`<a>`定义样式规则\n\n例子如下：\n```html\n<!-- HTML -->\n<section id=\"toolbar\">This is toolbar part <a href=\"#x\">this is alink elements.</a>\n```\n```css\n/* CSS */\n#toolbar {color: white; background: black;}\n#toolbar a:link {color: white;}\n```\n\n### CSS可继承属性与不可继承属性\n\n**思考一个问题：CSS中所有的属性都可以继承吗？**\n\n答案显然是否定的，在CSS中有些属性可以继承，有些不行。\n那么，那些CSS属性可以继承，那些CSS属性不能继承？\n\n简单列举一部分例子如下：\n\n#### CSS 可继承属性\n\n```css\n/* CSS 字体系列属性 */\nfont: /* 组合字体 */\nfont-family: /* 规定元素的字体系列 */\nfont-weight: /* 设置字体的粗细 */\nfont-size: /* 设置字体的尺寸 */\nfont-style: /* 定义字体的风格 */\nfont-variant: /* 偏大或偏小的字体 */\n\n/* CSS 文本系列属性 */\ntext-indent: /* 文本缩进 */\ntext-align: /* 文本水平对刘 */\nline-height: /* 行高 */\nword-spacing: /* 增加或减少单词间的空白 */\nletter-spacing: /* 增加或减少字符间的空白 */\ntext-transform: /* 控制文本大小写 */\ndirection: /* 规定文本的书写方向 */\ncolor: /* 文本颜色 */\n\n/* CSS 元素可见性 */\nvisibility:\n\n/* CSS 表格布局属性 */\ncaption-side: /* 定位表格标题位置 */\nborder-collapse: /* 合并表格边框 */\nborder-spacing: /* 设置相邻单元格的边框间的距离 */\nempty-cells: /* 单元格的边框的出现与消失 */\ntable-layout: /* 表格的宽度由什么决定 */<automatic.fixed.inherit>\n\n/* CSS 列表布局属性 */\nlist-style-type: /* 文字前面的小点点样式 */\nlist-style-position: /* 小点点位置 */\nlist-style: /* 以上的属性可通过这属性集合 */\n\n/* CSS 引用 */\nquotes: /* 设置嵌套引用的引号类型 */\n\n/* CSS 光标属性 */\ncursor: /* 箭头可以变成需要的形状 */\n\n/* CSS 页面样式属性 */\npage、page-break-inside、windows、orphans\n\n/* CSS 声音样式属性 */\nspeak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、pitch、pitch-range、stress、richness、、azimuth、elevation\n```\n\n**所有元素可以继承的属性**\n> 元素可见性：`visibility`\n> 光标属性：`cursor`\n\n**内联元素可以继承的属性**\n> 字体系列属性\n> 除`text-indent`、`text-align`之外的文本系列属性\n\n**块级元素可以继承的属性**\n> `text-indent`、`text-align`\n\n#### CSS 不可继承属性\n\n```css\ndispley\n\n/* CSS 文本属性 */\nvertical-align: /* 垂直文本对齐 */\ntext-decoration: /* 规定添加到文本的装饰 */\ntext-shadow: /* 文本阴影效果 */\nwhite-space: /* 空白符的处理 */\n\n/* CSS 盒子模型属性 */\nwidth、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left\n\n/* CSS 背景属性 */\nbackground、background-color、background-image、background-repeat、background-position、background-attachment\n\n/* CSS 定位属性 */\nfloat、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index\n\n/* CSS 生成内容属性 */\ncontent、counter-reset、counter-increment\n\n/* CSS 轮廓样式属性 */\noutline-style、outline-width、outline-color、outline\n\n/* CSS 页面样式属性 */\nsize、page-break-before、page-break-after\n\n/* CSS 声音样式属性 */\npause-before、pause-after、pause、cue-before、cue-after、cue、play-during\n```\n\n---\n\n## CSS 层叠(CSS Cascading)\n\n**层叠规则**\n\n以下样式中，那条样式的声明会起作用？\n```html\n<!-- HTML -->\n<h1>This is Heading 1.</h1>\n```\n```css\n/* CSS */\nh1 {color: red;}\nh1 {color: blue;}\n```\n\n> + `!important;` 重要性标识优先\n> + 按来源对应用到给定元素的所有声明排序有3种来源：**创作人员 > 读者 > 用户代理(`user agent`)**\n> + 按特殊性对应用到给定元素的所有声明排序，**高特殊性** > **低特殊性**\n> + 按出现顺序对应用到给定元素的所有声明排序，在样式表或文档中越后出现，权重越大\n\n如果两个规则的权重、来源、特殊性完全相同，则样式表中后出现的一个规则会被使用\n\n---\n\n### 按权重和来源排序\n\n1、`!important;` 重要性标识优先\n\n例子如下：\n```html\n<!-- HTML -->\n<p style=\"color: black;\">This is a <em>paragraph</em>.</p>\n```\n```css\n/* CSS */\np {color: gray !important;}\n\n/*  \n  根据!important重要标识优先的规则\n  最终呈现出来的样式应该是灰色，并且后面的em元素也会继承灰色\n*/\n```\n\n---\n\n## 参考内容\n\n> + [*css特殊性值（权重）需要搞明白*](https://blog.csdn.net/ernijie/article/details/90517766)\n> + [*《CSS 权威指南》*](https://book.douban.com/subject/2308234/)\n","source":"_posts/2019-11-25-css-结构和层叠总结.md","raw":"---\ntitle: CSS 结构和层叠总结\ndate: 2019-11-25 18:40:16\ntags:\n  - 前端开发\n  - CSS\n  - CSS 特殊性\n  - CSS 继承\n  - CSS 层叠\n  - CSS 结构\n  - CSS 特殊性计算\n  - CSS Specificity\n  - CSS Inheritance\n  - CSS Cascading\n  - CSS Structure\ncategory:\n- [CSS]\n---\n\n## CSS 特殊性(CSS Specificity)\n\n首先看下面这个例子：\n```html\n<!-- HTML -->\n<body>\n  <h1>this is heading 1.</h1>\n  <h2 class=\"grape\">this is heading 2.</h2>\n  <table>\n    <tr id=\"totals\">\n      <td>\n        <ul>\n          <li id=\"answer\">this is contents of the list.</li>\n        </ul>\n      </td>\n    </tr>\n    <!-- /totals -->\n  </table>\n</body>\n```\n```css\n/* CSS */\nh1 {color: red;}\nbody h1 { color: green;}\n\nh2.grape {color: purple;}\nh2 {color: silver;}\n\nhtml > body table tr[id=\"totals\"] td ul > li {color: maroon;}\nli#answer {color: navy;}\n\n```\n\n以上CSS属性声明那个规则更强？\n\n**答案如下：**\n\n> + `body h1` > `h1`\n> + `h2.grape` > `h2`\n> + `li#answer` > `html > body table tr[id=\"totals\"] td ul > li`\n\n\n[点击查看Demo](http://imoldy.com/demo/css/css_specificity/01.html)\n\n### CSS 特殊性值\n\n选择器的特殊性值表述为4个部分，如：**0, 0, 0, 0**\n\n选择器的具体特殊性值如下：\n\n> + 选择器中的ID属性值： **0, 1, 0, 0**; 例：`#id`\n> + 选择器中类属性值、属性选择、伪类： **0, 1, 0, 0**; 例：`.className`、`*[attribute]`、`:hover`\n> + 选择器中的元素、伪元素：**0, 0, 0, 1**; 例：`div`、`div::before`、`div::after`\n> + 结合符、通配选择器：**0, 0, 0, 0**; 例：`*`、`>`\n> + HTML元素中的内联样式特殊性都是：**1，0，0，0**; 例：```<div style=\"color: black; font-size: 20px\">test</div>```\n\n例子如下：\n```html\n<!-- HTML -->\n<body>\n  <h1>Section Heading 1 Part.</h1>\n  <p class=\"grape\">This is a grape paragraph.</p>\n  <p class=\"bright\">This is a bright paragraph and <em class=\"dark\">dark</em>.</p>\n  <p id=\"element\">this is a paragraph.</p>\n  <div id=\"sidebar\">This is sidebar div and <a href=\"#x\">alink text.</a></div>\n</body>\n```\n```css\n/* CSS */\nh1 {color: red;}  /* specificity = 0, 0, 0, 1 */\np em {color: purple;} /* specificity = 0, 0, 0, 2 */\n.grape {color: purple;} /* specificity = 0, 0, 1, 0 */\n*.bright {color: yellow;} /* specificity = 0, 0, 1, 0 */\np.bright em.dark {color: maroon;} /* specificity = 0, 0, 2, 2 */\n#element {color: blue;} /* specificity = 0, 1, 0, 0 */\ndiv#sidebar *[href=\"#x\"] {color: silver;} /* specificity = 0, 1, 1, 1 */\n```\n\n**需要注意的地方：**\n> **0, 0, 1, 0** 要大于**0, 0, 0, 13**\n> 特殊性是从左向右排序的，特殊性值**1, 0, 0, 0**大于以0开头的所有特殊性值，不论后面的数字是什么\n\n\n### CSS 声明和特殊性\n\n1、确定一个选择器的特殊性，这个值将会授予其所有相关声明，如下所示：\n```html\n<!-- HTML -->\n<h1>Section Heading 1 Part.</h1>\n```\n```css\n/* CSS */\nh1 {color: silver; background: black;}\n/* h1标签的color和background属性的特殊性都为：0, 0, 0, 1 */\n```\n\n2、多条规则会被用户代理“解组”为单独的规则，如下所示：\n```html\n<!-- HTML -->\n<h1>Section Heading 1 Part.</h1>\n```\n```css\n/* CSS */\nh1 {color: silver; background: black;}\n/* 解组后 */\nh1 {color: silver;}\nh1 {background: black;}\n\n/* \b这两个规则的特殊性都是:0, 0, 0, 1，各声明得到的特殊性值也就是：0, 0, 0, 1 */\n```\n\n3、分组选择器会被用户代理“解组”为单独的规则，如下所示：\n```html\n<!-- HTML -->\n<h1>Section Heading 1 Part.</h1>\n<h2 class=\"section\">Section Heading 1 Part.</h2>\n```\n```css\n/* CSS */\nh1, h2.section {color: silver; background: black;}\n\n/* 解组后 */\nh1 {color: silver;} /* 0, 0, 0, 1 */\nh1 {background: black;} /* 0, 0, 0, 1 */\n\nh2.section {color: silver;} /* 0, 0, 1, 1 */\nh2.section {background: black;} /* 0, 0, 1, 1 */\n```\n\n4、“解组”完后，单独选择器的单独规则开始根据计算出来的最高特殊性值来显示元素\n\n\n### 通配选择器特殊性\n\n1、通配选择器`*`的特殊性值为：**0, 0, 0, 0**，但需要注意的是通配选择器不等于没有特殊性（设置了要比没有设置强）\n\n例子如下：\n```html\n<!-- HTML -->\n<html>\n  <body>\n    <div>\n      <p>This is a paragraph.</p>\n    </div>\n    <p>This is a paragraph.</p>\n    <p>This is a paragraph.</p>\n  </body>\n</html>\n```\n```css\n/* CSS */\ndiv p {color: black;} /* 0, 0, 0, 2 */\n* {color: gray;} /* 0, 0, 0, 0 */\n/* 根据特殊性的值来计算div下包含的段落都是黑色，其他元素都是灰色 */\n```\n\n2、如果一个选择器中包含通配选择器和其他选择器，选择器的特殊性不会因为通配选择器的出现发生改变，如下所示：\n```html\n<!-- HTML -->\n<body>\n  <div>\n    <p>This is a paragrah<strong> Strong text</strong></p>\n  </div>\n</body>\n```\n```css\n/* CSS */\ndiv p {color: black;} /* 0, 0, 0, 2 */\nbody * strong {color: yellow;} /* 0, 0, 0, 2 */\n/* 上面两个选择器的特殊性完全相等 */\n```\n\n### ID和属性选择器的特殊性\n\nID选择器和指定ID属性的属性选择器在特殊性上有所不同，如下所示：\n\n```html\n<!-- HTML -->\n<html>\n  <head></head>\n  <body>\n    <table>\n      <tr id=\"totals\">\n        <td>\n          <ul>\n            <li id=\"answer\">Answer Content</li>\n          </ul>\n        </td>\n      </tr>\n    </table>\n  </body>\n</html>\n```\n```css\n/* CSS */\nhtml > body table tr[id=\"totals\"] td ul > li {color: maroon;} /* 0, 0, 1, 7 */\nli#answer {color: navy;} /* 0, 1, 0, 1 (Winner)*/\n```\n\n### 内联样式特殊性\n\n> 通常，特殊性的第一个0是为内联样式声明保留，它要比所有其他声明的特殊性都要高\n> 内联样式声明的特殊性为：**1, 0, 0, 0**\n\n例子如下：\n```html\n<!-- HTML -->\n<h1 style=\"color: green;\" id=\"header\">The meadow party</h1> /* 1, 0, 0, 0 */\n```\n```css\n/* CSS */\nh1#header {color: red;} /* 0, 1, 0, 1 */\n\n/* 因为内联样式特殊性要比其他声明的特殊性都高, 所以这里h1元素的文字内容颜色是绿色 */\n```\n\n---\n\n## CSS 重要性(CSS !Important)\n\n> + 重要性标识：在样式的声明分号前插入：`!important;`\n> + 标志为`!important;`的声明规则，没有特殊性的特殊性值，优先级是最高的\n\n例子如下：\n```html\n<!-- HTML -->\n<h1 class=\"title\">NightWing</h1>\n```\n```css\n/* CSS */\nh1 {font-style: italic; color: gray !important;}\n.title {color: black; background: silver;}\n* {background: black !important;}\n\n/* 因为添加了!important;的样式是优先级最高的，所以这里h1元素的最终样式应该为：\nh1.title {\n  font-style: italic;\n  color: gray !important;\n  background: black !important;\n} \n*/\n```\n\n---\n\n## CSS 继承(CSS Inheritance)\n> 继承的值没有特殊性，甚至连0都没有；也就是说，**0特殊性要比无特殊性更强**（特殊性为0高于继承）\n\n\n1、0特殊性比无特殊性要强，例子如下：\n```html\n<!-- HTML -->\n<h1 id=\"page-title\">Meerkat <em>Central</em></h1>\n<p>Welcome to the best place on the web for meerkat information!</p>\n```\n```CSS\n/* CSS */\n* {color: gray;} /* 0, 0, 0, 0*/\nh1#page-title {color: black;} /* 0, 1, 0, 1 */\n\n/*\n因为这里em的color属性没有声明，先从h1元素继承，但又给通配选择器*声明了color属性\n0 > 无特殊性\n所以最终呈现出来的样式为：\nh1#page-title {\n  color: black;\n}\nem {\n  color: gray;\n  font-style: italic;\n}\np {\n  color: gray;\n}\n*/\n```\n\n2、不加区别地使用通配选择器（`*`）可能存在一些问题，需谨慎使用通配选择器（`*`）\n> 通配选择器（`*`）能匹配任何元素，又是0特殊性，优先于继承值，所以有一种短路继承的效果\n> 为了避免这个问题，避免不加区别地使用通配选择器（`*`），从根本上解决这个问题\n\n3、子元素是`<a>`标签，`<a>`标签会使用浏览器用户代理样式表中的伪类样式（`a:link`），需要单独为`<a>`定义样式规则\n\n例子如下：\n```html\n<!-- HTML -->\n<section id=\"toolbar\">This is toolbar part <a href=\"#x\">this is alink elements.</a>\n```\n```css\n/* CSS */\n#toolbar {color: white; background: black;}\n#toolbar a:link {color: white;}\n```\n\n### CSS可继承属性与不可继承属性\n\n**思考一个问题：CSS中所有的属性都可以继承吗？**\n\n答案显然是否定的，在CSS中有些属性可以继承，有些不行。\n那么，那些CSS属性可以继承，那些CSS属性不能继承？\n\n简单列举一部分例子如下：\n\n#### CSS 可继承属性\n\n```css\n/* CSS 字体系列属性 */\nfont: /* 组合字体 */\nfont-family: /* 规定元素的字体系列 */\nfont-weight: /* 设置字体的粗细 */\nfont-size: /* 设置字体的尺寸 */\nfont-style: /* 定义字体的风格 */\nfont-variant: /* 偏大或偏小的字体 */\n\n/* CSS 文本系列属性 */\ntext-indent: /* 文本缩进 */\ntext-align: /* 文本水平对刘 */\nline-height: /* 行高 */\nword-spacing: /* 增加或减少单词间的空白 */\nletter-spacing: /* 增加或减少字符间的空白 */\ntext-transform: /* 控制文本大小写 */\ndirection: /* 规定文本的书写方向 */\ncolor: /* 文本颜色 */\n\n/* CSS 元素可见性 */\nvisibility:\n\n/* CSS 表格布局属性 */\ncaption-side: /* 定位表格标题位置 */\nborder-collapse: /* 合并表格边框 */\nborder-spacing: /* 设置相邻单元格的边框间的距离 */\nempty-cells: /* 单元格的边框的出现与消失 */\ntable-layout: /* 表格的宽度由什么决定 */<automatic.fixed.inherit>\n\n/* CSS 列表布局属性 */\nlist-style-type: /* 文字前面的小点点样式 */\nlist-style-position: /* 小点点位置 */\nlist-style: /* 以上的属性可通过这属性集合 */\n\n/* CSS 引用 */\nquotes: /* 设置嵌套引用的引号类型 */\n\n/* CSS 光标属性 */\ncursor: /* 箭头可以变成需要的形状 */\n\n/* CSS 页面样式属性 */\npage、page-break-inside、windows、orphans\n\n/* CSS 声音样式属性 */\nspeak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、pitch、pitch-range、stress、richness、、azimuth、elevation\n```\n\n**所有元素可以继承的属性**\n> 元素可见性：`visibility`\n> 光标属性：`cursor`\n\n**内联元素可以继承的属性**\n> 字体系列属性\n> 除`text-indent`、`text-align`之外的文本系列属性\n\n**块级元素可以继承的属性**\n> `text-indent`、`text-align`\n\n#### CSS 不可继承属性\n\n```css\ndispley\n\n/* CSS 文本属性 */\nvertical-align: /* 垂直文本对齐 */\ntext-decoration: /* 规定添加到文本的装饰 */\ntext-shadow: /* 文本阴影效果 */\nwhite-space: /* 空白符的处理 */\n\n/* CSS 盒子模型属性 */\nwidth、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left\n\n/* CSS 背景属性 */\nbackground、background-color、background-image、background-repeat、background-position、background-attachment\n\n/* CSS 定位属性 */\nfloat、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index\n\n/* CSS 生成内容属性 */\ncontent、counter-reset、counter-increment\n\n/* CSS 轮廓样式属性 */\noutline-style、outline-width、outline-color、outline\n\n/* CSS 页面样式属性 */\nsize、page-break-before、page-break-after\n\n/* CSS 声音样式属性 */\npause-before、pause-after、pause、cue-before、cue-after、cue、play-during\n```\n\n---\n\n## CSS 层叠(CSS Cascading)\n\n**层叠规则**\n\n以下样式中，那条样式的声明会起作用？\n```html\n<!-- HTML -->\n<h1>This is Heading 1.</h1>\n```\n```css\n/* CSS */\nh1 {color: red;}\nh1 {color: blue;}\n```\n\n> + `!important;` 重要性标识优先\n> + 按来源对应用到给定元素的所有声明排序有3种来源：**创作人员 > 读者 > 用户代理(`user agent`)**\n> + 按特殊性对应用到给定元素的所有声明排序，**高特殊性** > **低特殊性**\n> + 按出现顺序对应用到给定元素的所有声明排序，在样式表或文档中越后出现，权重越大\n\n如果两个规则的权重、来源、特殊性完全相同，则样式表中后出现的一个规则会被使用\n\n---\n\n### 按权重和来源排序\n\n1、`!important;` 重要性标识优先\n\n例子如下：\n```html\n<!-- HTML -->\n<p style=\"color: black;\">This is a <em>paragraph</em>.</p>\n```\n```css\n/* CSS */\np {color: gray !important;}\n\n/*  \n  根据!important重要标识优先的规则\n  最终呈现出来的样式应该是灰色，并且后面的em元素也会继承灰色\n*/\n```\n\n---\n\n## 参考内容\n\n> + [*css特殊性值（权重）需要搞明白*](https://blog.csdn.net/ernijie/article/details/90517766)\n> + [*《CSS 权威指南》*](https://book.douban.com/subject/2308234/)\n","slug":"css-结构和层叠总结","published":1,"updated":"2020-01-14T01:54:45.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyw3s009xm5sn9d6scz4m","content":"<h2 id=\"CSS-特殊性-CSS-Specificity\"><a href=\"#CSS-特殊性-CSS-Specificity\" class=\"headerlink\" title=\"CSS 特殊性(CSS Specificity)\"></a>CSS 特殊性(CSS Specificity)</h2><p>首先看下面这个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>this is heading 1.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grape\"</span>&gt;</span>this is heading 2.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"totals\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"answer\"</span>&gt;</span>this is contents of the list.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- /totals --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> <span class=\"selector-tag\">h1</span> &#123; <span class=\"attribute\">color</span>: green;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-class\">.grape</span> &#123;<span class=\"attribute\">color</span>: purple;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;<span class=\"attribute\">color</span>: silver;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &gt; <span class=\"selector-tag\">body</span> <span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-attr\">[id=\"totals\"]</span> <span class=\"selector-tag\">td</span> <span class=\"selector-tag\">ul</span> &gt; <span class=\"selector-tag\">li</span> &#123;<span class=\"attribute\">color</span>: maroon;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-id\">#answer</span> &#123;<span class=\"attribute\">color</span>: navy;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上CSS属性声明那个规则更强？</p>\n<p><strong>答案如下：</strong></p>\n<blockquote>\n<ul>\n<li><code>body h1</code> &gt; <code>h1</code></li>\n<li><code>h2.grape</code> &gt; <code>h2</code></li>\n<li><code>li#answer</code> &gt; <code>html &gt; body table tr[id=&quot;totals&quot;] td ul &gt; li</code></li>\n</ul>\n</blockquote>\n<p><a href=\"http://imoldy.com/demo/css/css_specificity/01.html\">点击查看Demo</a></p>\n<h3 id=\"CSS-特殊性值\"><a href=\"#CSS-特殊性值\" class=\"headerlink\" title=\"CSS 特殊性值\"></a>CSS 特殊性值</h3><p>选择器的特殊性值表述为4个部分，如：<strong>0, 0, 0, 0</strong></p>\n<p>选择器的具体特殊性值如下：</p>\n<blockquote>\n<ul>\n<li>选择器中的ID属性值： <strong>0, 1, 0, 0</strong>; 例：<code>#id</code></li>\n<li>选择器中类属性值、属性选择、伪类： <strong>0, 1, 0, 0</strong>; 例：<code>.className</code>、<code>*[attribute]</code>、<code>:hover</code></li>\n<li>选择器中的元素、伪元素：<strong>0, 0, 0, 1</strong>; 例：<code>div</code>、<code>div::before</code>、<code>div::after</code></li>\n<li>结合符、通配选择器：<strong>0, 0, 0, 0</strong>; 例：<code>*</code>、<code>&gt;</code></li>\n<li>HTML元素中的内联样式特殊性都是：<strong>1，0，0，0</strong>; 例：<code>&lt;div style=&quot;color: black; font-size: 20px&quot;&gt;test&lt;/div&gt;</code></li>\n</ul>\n</blockquote>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grape\"</span>&gt;</span>This is a grape paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bright\"</span>&gt;</span>This is a bright paragraph and <span class=\"tag\">&lt;<span class=\"name\">em</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dark\"</span>&gt;</span>dark<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"element\"</span>&gt;</span>this is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>This is sidebar div and <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#x\"</span>&gt;</span>alink text.<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: red;&#125;  <span class=\"comment\">/* specificity = 0, 0, 0, 1 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> <span class=\"selector-tag\">em</span> &#123;<span class=\"attribute\">color</span>: purple;&#125; <span class=\"comment\">/* specificity = 0, 0, 0, 2 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.grape</span> &#123;<span class=\"attribute\">color</span>: purple;&#125; <span class=\"comment\">/* specificity = 0, 0, 1, 0 */</span></span><br><span class=\"line\">*<span class=\"selector-class\">.bright</span> &#123;<span class=\"attribute\">color</span>: yellow;&#125; <span class=\"comment\">/* specificity = 0, 0, 1, 0 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.bright</span> <span class=\"selector-tag\">em</span><span class=\"selector-class\">.dark</span> &#123;<span class=\"attribute\">color</span>: maroon;&#125; <span class=\"comment\">/* specificity = 0, 0, 2, 2 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#element</span> &#123;<span class=\"attribute\">color</span>: blue;&#125; <span class=\"comment\">/* specificity = 0, 1, 0, 0 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-id\">#sidebar</span> *<span class=\"selector-attr\">[href=\"#x\"]</span> &#123;<span class=\"attribute\">color</span>: silver;&#125; <span class=\"comment\">/* specificity = 0, 1, 1, 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的地方：</strong></p>\n<blockquote>\n<p><strong>0, 0, 1, 0</strong> 要大于<strong>0, 0, 0, 13</strong><br>特殊性是从左向右排序的，特殊性值<strong>1, 0, 0, 0</strong>大于以0开头的所有特殊性值，不论后面的数字是什么</p>\n</blockquote>\n<h3 id=\"CSS-声明和特殊性\"><a href=\"#CSS-声明和特殊性\" class=\"headerlink\" title=\"CSS 声明和特殊性\"></a>CSS 声明和特殊性</h3><p>1、确定一个选择器的特殊性，这个值将会授予其所有相关声明，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: silver; <span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* h1标签的color和background属性的特殊性都为：0, 0, 0, 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p>2、多条规则会被用户代理“解组”为单独的规则，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: silver; <span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 解组后 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: silver;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* \b这两个规则的特殊性都是:0, 0, 0, 1，各声明得到的特殊性值也就是：0, 0, 0, 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p>3、分组选择器会被用户代理“解组”为单独的规则，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"section\"</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span><span class=\"selector-class\">.section</span> &#123;<span class=\"attribute\">color</span>: silver; <span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 解组后 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: silver;&#125; <span class=\"comment\">/* 0, 0, 0, 1 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">background</span>: black;&#125; <span class=\"comment\">/* 0, 0, 0, 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-class\">.section</span> &#123;<span class=\"attribute\">color</span>: silver;&#125; <span class=\"comment\">/* 0, 0, 1, 1 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-class\">.section</span> &#123;<span class=\"attribute\">background</span>: black;&#125; <span class=\"comment\">/* 0, 0, 1, 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p>4、“解组”完后，单独选择器的单独规则开始根据计算出来的最高特殊性值来显示元素</p>\n<h3 id=\"通配选择器特殊性\"><a href=\"#通配选择器特殊性\" class=\"headerlink\" title=\"通配选择器特殊性\"></a>通配选择器特殊性</h3><p>1、通配选择器<code>*</code>的特殊性值为：<strong>0, 0, 0, 0</strong>，但需要注意的是通配选择器不等于没有特殊性（设置了要比没有设置强）</p>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">color</span>: black;&#125; <span class=\"comment\">/* 0, 0, 0, 2 */</span></span><br><span class=\"line\">* &#123;<span class=\"attribute\">color</span>: gray;&#125; <span class=\"comment\">/* 0, 0, 0, 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 根据特殊性的值来计算div下包含的段落都是黑色，其他元素都是灰色 */</span></span><br></pre></td></tr></table></figure>\n\n<p>2、如果一个选择器中包含通配选择器和其他选择器，选择器的特殊性不会因为通配选择器的出现发生改变，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragrah<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span> Strong text<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">color</span>: black;&#125; <span class=\"comment\">/* 0, 0, 0, 2 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> * <span class=\"selector-tag\">strong</span> &#123;<span class=\"attribute\">color</span>: yellow;&#125; <span class=\"comment\">/* 0, 0, 0, 2 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 上面两个选择器的特殊性完全相等 */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ID和属性选择器的特殊性\"><a href=\"#ID和属性选择器的特殊性\" class=\"headerlink\" title=\"ID和属性选择器的特殊性\"></a>ID和属性选择器的特殊性</h3><p>ID选择器和指定ID属性的属性选择器在特殊性上有所不同，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"totals\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"answer\"</span>&gt;</span>Answer Content<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &gt; <span class=\"selector-tag\">body</span> <span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-attr\">[id=\"totals\"]</span> <span class=\"selector-tag\">td</span> <span class=\"selector-tag\">ul</span> &gt; <span class=\"selector-tag\">li</span> &#123;<span class=\"attribute\">color</span>: maroon;&#125; <span class=\"comment\">/* 0, 0, 1, 7 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-id\">#answer</span> &#123;<span class=\"attribute\">color</span>: navy;&#125; <span class=\"comment\">/* 0, 1, 0, 1 (Winner)*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内联样式特殊性\"><a href=\"#内联样式特殊性\" class=\"headerlink\" title=\"内联样式特殊性\"></a>内联样式特殊性</h3><blockquote>\n<p>通常，特殊性的第一个0是为内联样式声明保留，它要比所有其他声明的特殊性都要高<br>内联样式声明的特殊性为：<strong>1, 0, 0, 0</strong></p>\n</blockquote>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: green;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span>The meadow party<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span> /* 1, 0, 0, 0 */</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-id\">#header</span> &#123;<span class=\"attribute\">color</span>: red;&#125; <span class=\"comment\">/* 0, 1, 0, 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 因为内联样式特殊性要比其他声明的特殊性都高, 所以这里h1元素的文字内容颜色是绿色 */</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"CSS-重要性-CSS-Important\"><a href=\"#CSS-重要性-CSS-Important\" class=\"headerlink\" title=\"CSS 重要性(CSS !Important)\"></a>CSS 重要性(CSS !Important)</h2><blockquote>\n<ul>\n<li>重要性标识：在样式的声明分号前插入：<code>!important;</code></li>\n<li>标志为<code>!important;</code>的声明规则，没有特殊性的特殊性值，优先级是最高的</li>\n</ul>\n</blockquote>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>NightWing<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">font-style</span>: italic; <span class=\"attribute\">color</span>: gray <span class=\"meta\">!important</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;<span class=\"attribute\">color</span>: black; <span class=\"attribute\">background</span>: silver;&#125;</span><br><span class=\"line\">* &#123;<span class=\"attribute\">background</span>: black <span class=\"meta\">!important</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 因为添加了!important;的样式是优先级最高的，所以这里h1元素的最终样式应该为：</span></span><br><span class=\"line\"><span class=\"comment\">h1.title &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  font-style: italic;</span></span><br><span class=\"line\"><span class=\"comment\">  color: gray !important;</span></span><br><span class=\"line\"><span class=\"comment\">  background: black !important;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"CSS-继承-CSS-Inheritance\"><a href=\"#CSS-继承-CSS-Inheritance\" class=\"headerlink\" title=\"CSS 继承(CSS Inheritance)\"></a>CSS 继承(CSS Inheritance)</h2><blockquote>\n<p>继承的值没有特殊性，甚至连0都没有；也就是说，<strong>0特殊性要比无特殊性更强</strong>（特殊性为0高于继承）</p>\n</blockquote>\n<p>1、0特殊性比无特殊性要强，例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page-title\"</span>&gt;</span>Meerkat <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Central<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome to the best place on the web for meerkat information!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\">* &#123;<span class=\"attribute\">color</span>: gray;&#125; <span class=\"comment\">/* 0, 0, 0, 0*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-id\">#page-title</span> &#123;<span class=\"attribute\">color</span>: black;&#125; <span class=\"comment\">/* 0, 1, 0, 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">因为这里em的color属性没有声明，先从h1元素继承，但又给通配选择器*声明了color属性</span></span><br><span class=\"line\"><span class=\"comment\">0 &gt; 无特殊性</span></span><br><span class=\"line\"><span class=\"comment\">所以最终呈现出来的样式为：</span></span><br><span class=\"line\"><span class=\"comment\">h1#page-title &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: black;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">em &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: gray;</span></span><br><span class=\"line\"><span class=\"comment\">  font-style: italic;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">p &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: gray;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>2、不加区别地使用通配选择器（<code>*</code>）可能存在一些问题，需谨慎使用通配选择器（<code>*</code>）</p>\n<blockquote>\n<p>通配选择器（<code>*</code>）能匹配任何元素，又是0特殊性，优先于继承值，所以有一种短路继承的效果<br>为了避免这个问题，避免不加区别地使用通配选择器（<code>*</code>），从根本上解决这个问题</p>\n</blockquote>\n<p>3、子元素是<code>&lt;a&gt;</code>标签，<code>&lt;a&gt;</code>标签会使用浏览器用户代理样式表中的伪类样式（<code>a:link</code>），需要单独为<code>&lt;a&gt;</code>定义样式规则</p>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"toolbar\"</span>&gt;</span>This is toolbar part <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#x\"</span>&gt;</span>this is alink elements.<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-id\">#toolbar</span> &#123;<span class=\"attribute\">color</span>: white; <span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#toolbar</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span> &#123;<span class=\"attribute\">color</span>: white;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS可继承属性与不可继承属性\"><a href=\"#CSS可继承属性与不可继承属性\" class=\"headerlink\" title=\"CSS可继承属性与不可继承属性\"></a>CSS可继承属性与不可继承属性</h3><p><strong>思考一个问题：CSS中所有的属性都可以继承吗？</strong></p>\n<p>答案显然是否定的，在CSS中有些属性可以继承，有些不行。<br>那么，那些CSS属性可以继承，那些CSS属性不能继承？</p>\n<p>简单列举一部分例子如下：</p>\n<h4 id=\"CSS-可继承属性\"><a href=\"#CSS-可继承属性\" class=\"headerlink\" title=\"CSS 可继承属性\"></a>CSS 可继承属性</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS 字体系列属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font</span>: <span class=\"comment\">/* 组合字体 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"comment\">/* 规定元素的字体系列 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: <span class=\"comment\">/* 设置字体的粗细 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-size</span>: <span class=\"comment\">/* 设置字体的尺寸 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-style</span>: <span class=\"comment\">/* 定义字体的风格 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-variant</span>: <span class=\"comment\">/* 偏大或偏小的字体 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 文本系列属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-indent</span>: <span class=\"comment\">/* 文本缩进 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-align</span>: <span class=\"comment\">/* 文本水平对刘 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">line-height</span>: <span class=\"comment\">/* 行高 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">word-spacing</span>: <span class=\"comment\">/* 增加或减少单词间的空白 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">letter-spacing</span>: <span class=\"comment\">/* 增加或减少字符间的空白 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-transform</span>: <span class=\"comment\">/* 控制文本大小写 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">direction</span>: <span class=\"comment\">/* 规定文本的书写方向 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"comment\">/* 文本颜色 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 元素可见性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">visibility</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 表格布局属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">caption-side</span>: <span class=\"comment\">/* 定位表格标题位置 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">border-collapse</span>: <span class=\"comment\">/* 合并表格边框 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">border-spacing</span>: <span class=\"comment\">/* 设置相邻单元格的边框间的距离 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">empty-cells</span>: <span class=\"comment\">/* 单元格的边框的出现与消失 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">table-layout</span>: <span class=\"comment\">/* 表格的宽度由什么决定 */</span>&lt;<span class=\"selector-tag\">automatic</span><span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.inherit</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 列表布局属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">list-style-type</span>: <span class=\"comment\">/* 文字前面的小点点样式 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">list-style-position</span>: <span class=\"comment\">/* 小点点位置 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">list-style</span>: <span class=\"comment\">/* 以上的属性可通过这属性集合 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 引用 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">quotes</span>: <span class=\"comment\">/* 设置嵌套引用的引号类型 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 光标属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">cursor</span>: <span class=\"comment\">/* 箭头可以变成需要的形状 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 页面样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">page</span>、<span class=\"selector-tag\">page-break-inside</span>、<span class=\"selector-tag\">windows</span>、<span class=\"selector-tag\">orphans</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 声音样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">speak</span>、<span class=\"selector-tag\">speak-punctuation</span>、<span class=\"selector-tag\">speak-numeral</span>、<span class=\"selector-tag\">speak-header</span>、<span class=\"selector-tag\">speech-rate</span>、<span class=\"selector-tag\">volume</span>、<span class=\"selector-tag\">voice-family</span>、<span class=\"selector-tag\">pitch</span>、<span class=\"selector-tag\">pitch-range</span>、<span class=\"selector-tag\">stress</span>、<span class=\"selector-tag\">richness</span>、、<span class=\"selector-tag\">azimuth</span>、<span class=\"selector-tag\">elevation</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>所有元素可以继承的属性</strong></p>\n<blockquote>\n<p>元素可见性：<code>visibility</code><br>光标属性：<code>cursor</code></p>\n</blockquote>\n<p><strong>内联元素可以继承的属性</strong></p>\n<blockquote>\n<p>字体系列属性<br>除<code>text-indent</code>、<code>text-align</code>之外的文本系列属性</p>\n</blockquote>\n<p><strong>块级元素可以继承的属性</strong></p>\n<blockquote>\n<p><code>text-indent</code>、<code>text-align</code></p>\n</blockquote>\n<h4 id=\"CSS-不可继承属性\"><a href=\"#CSS-不可继承属性\" class=\"headerlink\" title=\"CSS 不可继承属性\"></a>CSS 不可继承属性</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">displey</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 文本属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">vertical-align</span>: <span class=\"comment\">/* 垂直文本对齐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-decoration</span>: <span class=\"comment\">/* 规定添加到文本的装饰 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: <span class=\"comment\">/* 文本阴影效果 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"comment\">/* 空白符的处理 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 盒子模型属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">width</span>、<span class=\"selector-tag\">height</span>、<span class=\"selector-tag\">margin</span> 、<span class=\"selector-tag\">margin-top</span>、<span class=\"selector-tag\">margin-right</span>、<span class=\"selector-tag\">margin-bottom</span>、<span class=\"selector-tag\">margin-left</span>、<span class=\"selector-tag\">border</span>、<span class=\"selector-tag\">border-style</span>、<span class=\"selector-tag\">border-top-style</span>、<span class=\"selector-tag\">border-right-style</span>、<span class=\"selector-tag\">border-bottom-style</span>、<span class=\"selector-tag\">border-left-style</span>、<span class=\"selector-tag\">border-width</span>、<span class=\"selector-tag\">border-top-width</span>、<span class=\"selector-tag\">border-right-right</span>、<span class=\"selector-tag\">border-bottom-width</span>、<span class=\"selector-tag\">border-left-width</span>、<span class=\"selector-tag\">border-color</span>、<span class=\"selector-tag\">border-top-color</span>、<span class=\"selector-tag\">border-right-color</span>、<span class=\"selector-tag\">border-bottom-color</span>、<span class=\"selector-tag\">border-left-color</span>、<span class=\"selector-tag\">border-top</span>、<span class=\"selector-tag\">border-right</span>、<span class=\"selector-tag\">border-bottom</span>、<span class=\"selector-tag\">border-left</span>、<span class=\"selector-tag\">padding</span>、<span class=\"selector-tag\">padding-top</span>、<span class=\"selector-tag\">padding-right</span>、<span class=\"selector-tag\">padding-bottom</span>、<span class=\"selector-tag\">padding-left</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 背景属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">background</span>、<span class=\"selector-tag\">background-color</span>、<span class=\"selector-tag\">background-image</span>、<span class=\"selector-tag\">background-repeat</span>、<span class=\"selector-tag\">background-position</span>、<span class=\"selector-tag\">background-attachment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 定位属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">float</span>、<span class=\"selector-tag\">clear</span>、<span class=\"selector-tag\">position</span>、<span class=\"selector-tag\">top</span>、<span class=\"selector-tag\">right</span>、<span class=\"selector-tag\">bottom</span>、<span class=\"selector-tag\">left</span>、<span class=\"selector-tag\">min-width</span>、<span class=\"selector-tag\">min-height</span>、<span class=\"selector-tag\">max-width</span>、<span class=\"selector-tag\">max-height</span>、<span class=\"selector-tag\">overflow</span>、<span class=\"selector-tag\">clip</span>、<span class=\"selector-tag\">z-index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 生成内容属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">content</span>、<span class=\"selector-tag\">counter-reset</span>、<span class=\"selector-tag\">counter-increment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 轮廓样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">outline-style</span>、<span class=\"selector-tag\">outline-width</span>、<span class=\"selector-tag\">outline-color</span>、<span class=\"selector-tag\">outline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 页面样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">size</span>、<span class=\"selector-tag\">page-break-before</span>、<span class=\"selector-tag\">page-break-after</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 声音样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">pause-before</span>、<span class=\"selector-tag\">pause-after</span>、<span class=\"selector-tag\">pause</span>、<span class=\"selector-tag\">cue-before</span>、<span class=\"selector-tag\">cue-after</span>、<span class=\"selector-tag\">cue</span>、<span class=\"selector-tag\">play-during</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"CSS-层叠-CSS-Cascading\"><a href=\"#CSS-层叠-CSS-Cascading\" class=\"headerlink\" title=\"CSS 层叠(CSS Cascading)\"></a>CSS 层叠(CSS Cascading)</h2><p><strong>层叠规则</strong></p>\n<p>以下样式中，那条样式的声明会起作用？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>This is Heading 1.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: blue;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><code>!important;</code> 重要性标识优先</li>\n<li>按来源对应用到给定元素的所有声明排序有3种来源：<strong>创作人员 &gt; 读者 &gt; 用户代理(<code>user agent</code>)</strong></li>\n<li>按特殊性对应用到给定元素的所有声明排序，<strong>高特殊性</strong> &gt; <strong>低特殊性</strong></li>\n<li>按出现顺序对应用到给定元素的所有声明排序，在样式表或文档中越后出现，权重越大</li>\n</ul>\n</blockquote>\n<p>如果两个规则的权重、来源、特殊性完全相同，则样式表中后出现的一个规则会被使用</p>\n<hr>\n<h3 id=\"按权重和来源排序\"><a href=\"#按权重和来源排序\" class=\"headerlink\" title=\"按权重和来源排序\"></a>按权重和来源排序</h3><p>1、<code>!important;</code> 重要性标识优先</p>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: black;\"</span>&gt;</span>This is a <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>paragraph<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">color</span>: gray <span class=\"meta\">!important</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\">  根据!important重要标识优先的规则</span></span><br><span class=\"line\"><span class=\"comment\">  最终呈现出来的样式应该是灰色，并且后面的em元素也会继承灰色</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h2><blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/ernijie/article/details/90517766\" target=\"_blank\" rel=\"noopener\"><em>css特殊性值（权重）需要搞明白</em></a></li>\n<li><a href=\"https://book.douban.com/subject/2308234/\" target=\"_blank\" rel=\"noopener\"><em>《CSS 权威指南》</em></a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-特殊性-CSS-Specificity\"><a href=\"#CSS-特殊性-CSS-Specificity\" class=\"headerlink\" title=\"CSS 特殊性(CSS Specificity)\"></a>CSS 特殊性(CSS Specificity)</h2><p>首先看下面这个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>this is heading 1.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grape\"</span>&gt;</span>this is heading 2.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"totals\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"answer\"</span>&gt;</span>this is contents of the list.<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- /totals --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> <span class=\"selector-tag\">h1</span> &#123; <span class=\"attribute\">color</span>: green;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-class\">.grape</span> &#123;<span class=\"attribute\">color</span>: purple;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;<span class=\"attribute\">color</span>: silver;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &gt; <span class=\"selector-tag\">body</span> <span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-attr\">[id=\"totals\"]</span> <span class=\"selector-tag\">td</span> <span class=\"selector-tag\">ul</span> &gt; <span class=\"selector-tag\">li</span> &#123;<span class=\"attribute\">color</span>: maroon;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-id\">#answer</span> &#123;<span class=\"attribute\">color</span>: navy;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上CSS属性声明那个规则更强？</p>\n<p><strong>答案如下：</strong></p>\n<blockquote>\n<ul>\n<li><code>body h1</code> &gt; <code>h1</code></li>\n<li><code>h2.grape</code> &gt; <code>h2</code></li>\n<li><code>li#answer</code> &gt; <code>html &gt; body table tr[id=&quot;totals&quot;] td ul &gt; li</code></li>\n</ul>\n</blockquote>\n<p><a href=\"http://imoldy.com/demo/css/css_specificity/01.html\">点击查看Demo</a></p>\n<h3 id=\"CSS-特殊性值\"><a href=\"#CSS-特殊性值\" class=\"headerlink\" title=\"CSS 特殊性值\"></a>CSS 特殊性值</h3><p>选择器的特殊性值表述为4个部分，如：<strong>0, 0, 0, 0</strong></p>\n<p>选择器的具体特殊性值如下：</p>\n<blockquote>\n<ul>\n<li>选择器中的ID属性值： <strong>0, 1, 0, 0</strong>; 例：<code>#id</code></li>\n<li>选择器中类属性值、属性选择、伪类： <strong>0, 1, 0, 0</strong>; 例：<code>.className</code>、<code>*[attribute]</code>、<code>:hover</code></li>\n<li>选择器中的元素、伪元素：<strong>0, 0, 0, 1</strong>; 例：<code>div</code>、<code>div::before</code>、<code>div::after</code></li>\n<li>结合符、通配选择器：<strong>0, 0, 0, 0</strong>; 例：<code>*</code>、<code>&gt;</code></li>\n<li>HTML元素中的内联样式特殊性都是：<strong>1，0，0，0</strong>; 例：<code>&lt;div style=&quot;color: black; font-size: 20px&quot;&gt;test&lt;/div&gt;</code></li>\n</ul>\n</blockquote>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grape\"</span>&gt;</span>This is a grape paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bright\"</span>&gt;</span>This is a bright paragraph and <span class=\"tag\">&lt;<span class=\"name\">em</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dark\"</span>&gt;</span>dark<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"element\"</span>&gt;</span>this is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>This is sidebar div and <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#x\"</span>&gt;</span>alink text.<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: red;&#125;  <span class=\"comment\">/* specificity = 0, 0, 0, 1 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> <span class=\"selector-tag\">em</span> &#123;<span class=\"attribute\">color</span>: purple;&#125; <span class=\"comment\">/* specificity = 0, 0, 0, 2 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.grape</span> &#123;<span class=\"attribute\">color</span>: purple;&#125; <span class=\"comment\">/* specificity = 0, 0, 1, 0 */</span></span><br><span class=\"line\">*<span class=\"selector-class\">.bright</span> &#123;<span class=\"attribute\">color</span>: yellow;&#125; <span class=\"comment\">/* specificity = 0, 0, 1, 0 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.bright</span> <span class=\"selector-tag\">em</span><span class=\"selector-class\">.dark</span> &#123;<span class=\"attribute\">color</span>: maroon;&#125; <span class=\"comment\">/* specificity = 0, 0, 2, 2 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#element</span> &#123;<span class=\"attribute\">color</span>: blue;&#125; <span class=\"comment\">/* specificity = 0, 1, 0, 0 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-id\">#sidebar</span> *<span class=\"selector-attr\">[href=\"#x\"]</span> &#123;<span class=\"attribute\">color</span>: silver;&#125; <span class=\"comment\">/* specificity = 0, 1, 1, 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的地方：</strong></p>\n<blockquote>\n<p><strong>0, 0, 1, 0</strong> 要大于<strong>0, 0, 0, 13</strong><br>特殊性是从左向右排序的，特殊性值<strong>1, 0, 0, 0</strong>大于以0开头的所有特殊性值，不论后面的数字是什么</p>\n</blockquote>\n<h3 id=\"CSS-声明和特殊性\"><a href=\"#CSS-声明和特殊性\" class=\"headerlink\" title=\"CSS 声明和特殊性\"></a>CSS 声明和特殊性</h3><p>1、确定一个选择器的特殊性，这个值将会授予其所有相关声明，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: silver; <span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* h1标签的color和background属性的特殊性都为：0, 0, 0, 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p>2、多条规则会被用户代理“解组”为单独的规则，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: silver; <span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 解组后 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: silver;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* \b这两个规则的特殊性都是:0, 0, 0, 1，各声明得到的特殊性值也就是：0, 0, 0, 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p>3、分组选择器会被用户代理“解组”为单独的规则，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"section\"</span>&gt;</span>Section Heading 1 Part.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span><span class=\"selector-class\">.section</span> &#123;<span class=\"attribute\">color</span>: silver; <span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 解组后 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: silver;&#125; <span class=\"comment\">/* 0, 0, 0, 1 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">background</span>: black;&#125; <span class=\"comment\">/* 0, 0, 0, 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-class\">.section</span> &#123;<span class=\"attribute\">color</span>: silver;&#125; <span class=\"comment\">/* 0, 0, 1, 1 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-class\">.section</span> &#123;<span class=\"attribute\">background</span>: black;&#125; <span class=\"comment\">/* 0, 0, 1, 1 */</span></span><br></pre></td></tr></table></figure>\n\n<p>4、“解组”完后，单独选择器的单独规则开始根据计算出来的最高特殊性值来显示元素</p>\n<h3 id=\"通配选择器特殊性\"><a href=\"#通配选择器特殊性\" class=\"headerlink\" title=\"通配选择器特殊性\"></a>通配选择器特殊性</h3><p>1、通配选择器<code>*</code>的特殊性值为：<strong>0, 0, 0, 0</strong>，但需要注意的是通配选择器不等于没有特殊性（设置了要比没有设置强）</p>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">color</span>: black;&#125; <span class=\"comment\">/* 0, 0, 0, 2 */</span></span><br><span class=\"line\">* &#123;<span class=\"attribute\">color</span>: gray;&#125; <span class=\"comment\">/* 0, 0, 0, 0 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 根据特殊性的值来计算div下包含的段落都是黑色，其他元素都是灰色 */</span></span><br></pre></td></tr></table></figure>\n\n<p>2、如果一个选择器中包含通配选择器和其他选择器，选择器的特殊性不会因为通配选择器的出现发生改变，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragrah<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span> Strong text<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">color</span>: black;&#125; <span class=\"comment\">/* 0, 0, 0, 2 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> * <span class=\"selector-tag\">strong</span> &#123;<span class=\"attribute\">color</span>: yellow;&#125; <span class=\"comment\">/* 0, 0, 0, 2 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 上面两个选择器的特殊性完全相等 */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ID和属性选择器的特殊性\"><a href=\"#ID和属性选择器的特殊性\" class=\"headerlink\" title=\"ID和属性选择器的特殊性\"></a>ID和属性选择器的特殊性</h3><p>ID选择器和指定ID属性的属性选择器在特殊性上有所不同，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">\"totals\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"answer\"</span>&gt;</span>Answer Content<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &gt; <span class=\"selector-tag\">body</span> <span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-attr\">[id=\"totals\"]</span> <span class=\"selector-tag\">td</span> <span class=\"selector-tag\">ul</span> &gt; <span class=\"selector-tag\">li</span> &#123;<span class=\"attribute\">color</span>: maroon;&#125; <span class=\"comment\">/* 0, 0, 1, 7 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-id\">#answer</span> &#123;<span class=\"attribute\">color</span>: navy;&#125; <span class=\"comment\">/* 0, 1, 0, 1 (Winner)*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内联样式特殊性\"><a href=\"#内联样式特殊性\" class=\"headerlink\" title=\"内联样式特殊性\"></a>内联样式特殊性</h3><blockquote>\n<p>通常，特殊性的第一个0是为内联样式声明保留，它要比所有其他声明的特殊性都要高<br>内联样式声明的特殊性为：<strong>1, 0, 0, 0</strong></p>\n</blockquote>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: green;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span>The meadow party<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span> /* 1, 0, 0, 0 */</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-id\">#header</span> &#123;<span class=\"attribute\">color</span>: red;&#125; <span class=\"comment\">/* 0, 1, 0, 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 因为内联样式特殊性要比其他声明的特殊性都高, 所以这里h1元素的文字内容颜色是绿色 */</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"CSS-重要性-CSS-Important\"><a href=\"#CSS-重要性-CSS-Important\" class=\"headerlink\" title=\"CSS 重要性(CSS !Important)\"></a>CSS 重要性(CSS !Important)</h2><blockquote>\n<ul>\n<li>重要性标识：在样式的声明分号前插入：<code>!important;</code></li>\n<li>标志为<code>!important;</code>的声明规则，没有特殊性的特殊性值，优先级是最高的</li>\n</ul>\n</blockquote>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>NightWing<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">font-style</span>: italic; <span class=\"attribute\">color</span>: gray <span class=\"meta\">!important</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;<span class=\"attribute\">color</span>: black; <span class=\"attribute\">background</span>: silver;&#125;</span><br><span class=\"line\">* &#123;<span class=\"attribute\">background</span>: black <span class=\"meta\">!important</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 因为添加了!important;的样式是优先级最高的，所以这里h1元素的最终样式应该为：</span></span><br><span class=\"line\"><span class=\"comment\">h1.title &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  font-style: italic;</span></span><br><span class=\"line\"><span class=\"comment\">  color: gray !important;</span></span><br><span class=\"line\"><span class=\"comment\">  background: black !important;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"CSS-继承-CSS-Inheritance\"><a href=\"#CSS-继承-CSS-Inheritance\" class=\"headerlink\" title=\"CSS 继承(CSS Inheritance)\"></a>CSS 继承(CSS Inheritance)</h2><blockquote>\n<p>继承的值没有特殊性，甚至连0都没有；也就是说，<strong>0特殊性要比无特殊性更强</strong>（特殊性为0高于继承）</p>\n</blockquote>\n<p>1、0特殊性比无特殊性要强，例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page-title\"</span>&gt;</span>Meerkat <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Central<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome to the best place on the web for meerkat information!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\">* &#123;<span class=\"attribute\">color</span>: gray;&#125; <span class=\"comment\">/* 0, 0, 0, 0*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-id\">#page-title</span> &#123;<span class=\"attribute\">color</span>: black;&#125; <span class=\"comment\">/* 0, 1, 0, 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">因为这里em的color属性没有声明，先从h1元素继承，但又给通配选择器*声明了color属性</span></span><br><span class=\"line\"><span class=\"comment\">0 &gt; 无特殊性</span></span><br><span class=\"line\"><span class=\"comment\">所以最终呈现出来的样式为：</span></span><br><span class=\"line\"><span class=\"comment\">h1#page-title &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: black;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">em &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: gray;</span></span><br><span class=\"line\"><span class=\"comment\">  font-style: italic;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">p &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: gray;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>2、不加区别地使用通配选择器（<code>*</code>）可能存在一些问题，需谨慎使用通配选择器（<code>*</code>）</p>\n<blockquote>\n<p>通配选择器（<code>*</code>）能匹配任何元素，又是0特殊性，优先于继承值，所以有一种短路继承的效果<br>为了避免这个问题，避免不加区别地使用通配选择器（<code>*</code>），从根本上解决这个问题</p>\n</blockquote>\n<p>3、子元素是<code>&lt;a&gt;</code>标签，<code>&lt;a&gt;</code>标签会使用浏览器用户代理样式表中的伪类样式（<code>a:link</code>），需要单独为<code>&lt;a&gt;</code>定义样式规则</p>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"toolbar\"</span>&gt;</span>This is toolbar part <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#x\"</span>&gt;</span>this is alink elements.<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-id\">#toolbar</span> &#123;<span class=\"attribute\">color</span>: white; <span class=\"attribute\">background</span>: black;&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#toolbar</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span> &#123;<span class=\"attribute\">color</span>: white;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS可继承属性与不可继承属性\"><a href=\"#CSS可继承属性与不可继承属性\" class=\"headerlink\" title=\"CSS可继承属性与不可继承属性\"></a>CSS可继承属性与不可继承属性</h3><p><strong>思考一个问题：CSS中所有的属性都可以继承吗？</strong></p>\n<p>答案显然是否定的，在CSS中有些属性可以继承，有些不行。<br>那么，那些CSS属性可以继承，那些CSS属性不能继承？</p>\n<p>简单列举一部分例子如下：</p>\n<h4 id=\"CSS-可继承属性\"><a href=\"#CSS-可继承属性\" class=\"headerlink\" title=\"CSS 可继承属性\"></a>CSS 可继承属性</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS 字体系列属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font</span>: <span class=\"comment\">/* 组合字体 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"comment\">/* 规定元素的字体系列 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: <span class=\"comment\">/* 设置字体的粗细 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-size</span>: <span class=\"comment\">/* 设置字体的尺寸 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-style</span>: <span class=\"comment\">/* 定义字体的风格 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">font-variant</span>: <span class=\"comment\">/* 偏大或偏小的字体 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 文本系列属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-indent</span>: <span class=\"comment\">/* 文本缩进 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-align</span>: <span class=\"comment\">/* 文本水平对刘 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">line-height</span>: <span class=\"comment\">/* 行高 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">word-spacing</span>: <span class=\"comment\">/* 增加或减少单词间的空白 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">letter-spacing</span>: <span class=\"comment\">/* 增加或减少字符间的空白 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-transform</span>: <span class=\"comment\">/* 控制文本大小写 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">direction</span>: <span class=\"comment\">/* 规定文本的书写方向 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"comment\">/* 文本颜色 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 元素可见性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">visibility</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 表格布局属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">caption-side</span>: <span class=\"comment\">/* 定位表格标题位置 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">border-collapse</span>: <span class=\"comment\">/* 合并表格边框 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">border-spacing</span>: <span class=\"comment\">/* 设置相邻单元格的边框间的距离 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">empty-cells</span>: <span class=\"comment\">/* 单元格的边框的出现与消失 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">table-layout</span>: <span class=\"comment\">/* 表格的宽度由什么决定 */</span>&lt;<span class=\"selector-tag\">automatic</span><span class=\"selector-class\">.fixed</span><span class=\"selector-class\">.inherit</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 列表布局属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">list-style-type</span>: <span class=\"comment\">/* 文字前面的小点点样式 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">list-style-position</span>: <span class=\"comment\">/* 小点点位置 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">list-style</span>: <span class=\"comment\">/* 以上的属性可通过这属性集合 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 引用 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">quotes</span>: <span class=\"comment\">/* 设置嵌套引用的引号类型 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 光标属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">cursor</span>: <span class=\"comment\">/* 箭头可以变成需要的形状 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 页面样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">page</span>、<span class=\"selector-tag\">page-break-inside</span>、<span class=\"selector-tag\">windows</span>、<span class=\"selector-tag\">orphans</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 声音样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">speak</span>、<span class=\"selector-tag\">speak-punctuation</span>、<span class=\"selector-tag\">speak-numeral</span>、<span class=\"selector-tag\">speak-header</span>、<span class=\"selector-tag\">speech-rate</span>、<span class=\"selector-tag\">volume</span>、<span class=\"selector-tag\">voice-family</span>、<span class=\"selector-tag\">pitch</span>、<span class=\"selector-tag\">pitch-range</span>、<span class=\"selector-tag\">stress</span>、<span class=\"selector-tag\">richness</span>、、<span class=\"selector-tag\">azimuth</span>、<span class=\"selector-tag\">elevation</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>所有元素可以继承的属性</strong></p>\n<blockquote>\n<p>元素可见性：<code>visibility</code><br>光标属性：<code>cursor</code></p>\n</blockquote>\n<p><strong>内联元素可以继承的属性</strong></p>\n<blockquote>\n<p>字体系列属性<br>除<code>text-indent</code>、<code>text-align</code>之外的文本系列属性</p>\n</blockquote>\n<p><strong>块级元素可以继承的属性</strong></p>\n<blockquote>\n<p><code>text-indent</code>、<code>text-align</code></p>\n</blockquote>\n<h4 id=\"CSS-不可继承属性\"><a href=\"#CSS-不可继承属性\" class=\"headerlink\" title=\"CSS 不可继承属性\"></a>CSS 不可继承属性</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">displey</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 文本属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">vertical-align</span>: <span class=\"comment\">/* 垂直文本对齐 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-decoration</span>: <span class=\"comment\">/* 规定添加到文本的装饰 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">text-shadow</span>: <span class=\"comment\">/* 文本阴影效果 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"comment\">/* 空白符的处理 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 盒子模型属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">width</span>、<span class=\"selector-tag\">height</span>、<span class=\"selector-tag\">margin</span> 、<span class=\"selector-tag\">margin-top</span>、<span class=\"selector-tag\">margin-right</span>、<span class=\"selector-tag\">margin-bottom</span>、<span class=\"selector-tag\">margin-left</span>、<span class=\"selector-tag\">border</span>、<span class=\"selector-tag\">border-style</span>、<span class=\"selector-tag\">border-top-style</span>、<span class=\"selector-tag\">border-right-style</span>、<span class=\"selector-tag\">border-bottom-style</span>、<span class=\"selector-tag\">border-left-style</span>、<span class=\"selector-tag\">border-width</span>、<span class=\"selector-tag\">border-top-width</span>、<span class=\"selector-tag\">border-right-right</span>、<span class=\"selector-tag\">border-bottom-width</span>、<span class=\"selector-tag\">border-left-width</span>、<span class=\"selector-tag\">border-color</span>、<span class=\"selector-tag\">border-top-color</span>、<span class=\"selector-tag\">border-right-color</span>、<span class=\"selector-tag\">border-bottom-color</span>、<span class=\"selector-tag\">border-left-color</span>、<span class=\"selector-tag\">border-top</span>、<span class=\"selector-tag\">border-right</span>、<span class=\"selector-tag\">border-bottom</span>、<span class=\"selector-tag\">border-left</span>、<span class=\"selector-tag\">padding</span>、<span class=\"selector-tag\">padding-top</span>、<span class=\"selector-tag\">padding-right</span>、<span class=\"selector-tag\">padding-bottom</span>、<span class=\"selector-tag\">padding-left</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 背景属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">background</span>、<span class=\"selector-tag\">background-color</span>、<span class=\"selector-tag\">background-image</span>、<span class=\"selector-tag\">background-repeat</span>、<span class=\"selector-tag\">background-position</span>、<span class=\"selector-tag\">background-attachment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 定位属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">float</span>、<span class=\"selector-tag\">clear</span>、<span class=\"selector-tag\">position</span>、<span class=\"selector-tag\">top</span>、<span class=\"selector-tag\">right</span>、<span class=\"selector-tag\">bottom</span>、<span class=\"selector-tag\">left</span>、<span class=\"selector-tag\">min-width</span>、<span class=\"selector-tag\">min-height</span>、<span class=\"selector-tag\">max-width</span>、<span class=\"selector-tag\">max-height</span>、<span class=\"selector-tag\">overflow</span>、<span class=\"selector-tag\">clip</span>、<span class=\"selector-tag\">z-index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 生成内容属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">content</span>、<span class=\"selector-tag\">counter-reset</span>、<span class=\"selector-tag\">counter-increment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 轮廓样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">outline-style</span>、<span class=\"selector-tag\">outline-width</span>、<span class=\"selector-tag\">outline-color</span>、<span class=\"selector-tag\">outline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 页面样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">size</span>、<span class=\"selector-tag\">page-break-before</span>、<span class=\"selector-tag\">page-break-after</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* CSS 声音样式属性 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">pause-before</span>、<span class=\"selector-tag\">pause-after</span>、<span class=\"selector-tag\">pause</span>、<span class=\"selector-tag\">cue-before</span>、<span class=\"selector-tag\">cue-after</span>、<span class=\"selector-tag\">cue</span>、<span class=\"selector-tag\">play-during</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"CSS-层叠-CSS-Cascading\"><a href=\"#CSS-层叠-CSS-Cascading\" class=\"headerlink\" title=\"CSS 层叠(CSS Cascading)\"></a>CSS 层叠(CSS Cascading)</h2><p><strong>层叠规则</strong></p>\n<p>以下样式中，那条样式的声明会起作用？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>This is Heading 1.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: blue;&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><code>!important;</code> 重要性标识优先</li>\n<li>按来源对应用到给定元素的所有声明排序有3种来源：<strong>创作人员 &gt; 读者 &gt; 用户代理(<code>user agent</code>)</strong></li>\n<li>按特殊性对应用到给定元素的所有声明排序，<strong>高特殊性</strong> &gt; <strong>低特殊性</strong></li>\n<li>按出现顺序对应用到给定元素的所有声明排序，在样式表或文档中越后出现，权重越大</li>\n</ul>\n</blockquote>\n<p>如果两个规则的权重、来源、特殊性完全相同，则样式表中后出现的一个规则会被使用</p>\n<hr>\n<h3 id=\"按权重和来源排序\"><a href=\"#按权重和来源排序\" class=\"headerlink\" title=\"按权重和来源排序\"></a>按权重和来源排序</h3><p>1、<code>!important;</code> 重要性标识优先</p>\n<p>例子如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color: black;\"</span>&gt;</span>This is a <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>paragraph<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS */</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">color</span>: gray <span class=\"meta\">!important</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\">  根据!important重要标识优先的规则</span></span><br><span class=\"line\"><span class=\"comment\">  最终呈现出来的样式应该是灰色，并且后面的em元素也会继承灰色</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h2><blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/ernijie/article/details/90517766\" target=\"_blank\" rel=\"noopener\"><em>css特殊性值（权重）需要搞明白</em></a></li>\n<li><a href=\"https://book.douban.com/subject/2308234/\" target=\"_blank\" rel=\"noopener\"><em>《CSS 权威指南》</em></a></li>\n</ul>\n</blockquote>\n"},{"title":"谈谈对JavaScript中this、call()、apply()、bind()的理解","date":"2020-01-07T04:12:11.000Z","_content":"\n## MDN\n\n> *[`JavaScript this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)*\n> *[`JavaScript Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)*\n> *[`JavaScript Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)*\n> *[`JavaScript Function.prototype.bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)*\n\n\n## [*`this`的概念*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)理解\n\n> ***[`this`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this) 永远指向一个对象，并且指向最后调用它的那个对象；***\n> ***[`this`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this) 的指向完全取决于函数调用的位置；***\n\n\n## [*`this`*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)的指向\n\n> *在绝大多数情况下，函数的调用方式决定了`this`的值。`this`不能在执行期间被赋值，并且在每次函数被调用时this的值也可能会不同。ES5引入了bind方法来设置函数的this值，而不用考虑函数如何被调用的，ES2015 引入了支持this词法解析的箭头函数（它在闭合的执行环境内设置this的值）。[(来自MDN)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)*\n\n<!-- > **`this` 永远指向最后调用它的那个对象**\n> **`this` 永远指向一个对象；**\n> **`this` 的指向完全取决于函数调用的位置；**\n> **`this` 会根据运行环境的改变而改变，同时，函数中的`this`也只能在运行时才能最终确定运行环境；**\n> **如果返回值是一个对象，那么`this`指向的就是那个返回的对象，如果返回值不是一个对象那么`this`还是指向函数的实例。** -->\n### 全局环境(Global context)\n\n> *无论是否在严格模式下，在全局执行环境中（在任何函数体外部）`this` 都指向全局对象 [(来自MDN)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)*\n\n```javascript\nconosole.log(this === window); // true\na = 37;\nconsole.log(window.a); // 37\nthis.b = 'Br3ad';\nconsole.log(window.b); // Br3ad\nconsole.log(b); // Br3ad\n```\n\n### 函数（运行内）环境(Function context)\n\n> *在函数内部，`this`的值取决于函数被调用的方式。[(来自MDN)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)*\n\n#### 简单调用\n\n**非严格模式下：**\n因为下面的代码不在严格模式下，且 `this` 的值不是由该调用设置的，所以 `this` 的值默认指向全局对象(`window`)。\n\n```javascript\n// non-strict mode\nfunction func1 () {\n  return this;\n};\n// 在浏览器中：\nfunc1() === window; // true\n// 在node中：\nfunc1() === global; // true\n```\n\n**严格模式下：**\n`this`将保持他进入执行环境时的值，所以下面的`this`将会默认为`undefined`。\n\n```javascript\n// strict mode\nfunction func2 () {\n  'use strict';\n  return this;\n};\nfunc2 === undefined; // true\n```\n\n所以，可以得出结论在严格模式下，如果 `this` 没有被执行环境（execution context）定义，那它将保持为 `undefined`。\n\n**首先，来看下面一个简单的例子：**\n\n**例 1：**\n\n```javascript\nvar name = 'windowsName';\nfunction foo () {\n  var name = 'Br3ad';\n  console.log(this.name); // windowsName\n  console.log('inner: ' + this); // [Object Window]\n}\nfoo();\nconsole.log('outer: ' + this); // [Object Window]\n```\n\n为什么这里`console.log`是 windowsName？\n\n因为**“`this`永远指向最后调用它的那个对象”**，调用`foo`的地方`foo()`，前面没有调用的对象那么就是指向全局对象 `Object window`，相当于`window.foo()`\n\n这里没有使用严格模式，如果使用严格模式的情况下，全局对象就是`undefined`，那么就会报错`Uncaught TypeError: Cannot read property 'name' of undefined`\n\n**请看下面的例子：**\n\n**例 2：**\n\n```javascript\n// Use Strict Mode\n'use strict'\nvar name = 'windowsName';\nfunction foo () {\n  var name = 'Br3ad';\n  console.log('inner: ' + this); // inner: undefined\n  console.log(this.name); // Uncaught TypeError: Cannot read property 'name' of undefined\n}\nfoo();\nconsole.log('outer: ' + this); // [Object Window]\n```\n\n**再看下面的例子：**\n\n**例 3：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // Br3ad\n  };\n};\nbar.fn(); // Br3ad\n```\n\n在这个例子中，函数 `fn` 是对象 `bar` 调用的，所以打印的值就是 `bar` 中的 `name` 的值。\n\n**基于上面的例子，再做个改动：**\n\n**例 4：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // Br3ad\n  }\n};\nwindow.bar.fn(); // Br3ad\n```\n\n这里`console.log`为`Br3ad`，最后调用它的对象是`bar`,还是因为**“`this` 永远指向最后调用它的那个对象”**\n\n**再来看下面这个例子：**\n\n**例 5：**\n\n```javascript\nvar name = 'windowName';\nvar bar = {\n  // name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // undefined\n  }\n};\nwindow.bar.fn(); // undefined\n```\n\n为什么`console.log`会打印`undefined`呢？\n\n因为，如刚刚所描述的那样，调用`fn`的是`bar`这个对象，也就是说`fn`内部的`this`是对象`bar`，而对象`bar`中并没有对`name`字段进行定义，所以`console.log`的`this.name`的值为`undefined`。\n\n这个例子还是印证了刚才的结论：**this 永远指向最后调用它的那个对象**，因为最后调用`fn`的对象是`bar`，所以就算`bar`中没有`name`这个属性，也不会继续向上一个对象寻找`this.name`，而是直接输出`undefined`。\n\n**再来看一个复杂点的例子：**\n\n**例 6：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // windowsName\n  }\n};\nvar fun = bar.fn;\nfun(); // windowsName\n```\n\n为什么这里`console.log`打印出的不是`Br3ad`？因为虽然`bar`对象的`fn`方法赋值给了变量`fun`了，但是没有调用，回到之前我们的结论：**“this 永远指向最后调用它的那个对象”**，由于刚刚的`fun`并没有调用，所以`fn()`最后仍然是被`window`调用的。所以这里`this`指向的也就是`window`。\n\n以上的例子，不难发现`this`的指向并不是在创建的时候就可以确定的，在 `es5` 中，永远是：**`this` 永远指向最后调用它的那个对象**\n\n**再来看一个例子：**\n\n**例 7：**\n\n```javascript\nvar name = 'windowName';\nfunction fn () {\n  var name = 'Br3ad';\n  innerFunction();\n  function innerFunction() {\n    console.log(this.name); // windowsName\n  }\n};\nfn(); // windowsName\n```\n\n## 怎么改变 `this` 的指向?\n\n改变this的指向主要有以下几种方法：\n\n- 使用`ES6`的[`箭头函数(Arrow function expressions)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n- 在函数内部使用`_this = this`\n- 使用`apply()`、`call()`、`bind()`\n- `new` 实例化一个对象\n\n**请看下面的例子：**\n\n**例子8：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name);  // this.func1 is not a function\n  },\n  func2: function () {\n    setTimeout(function () {\n      this.func1();\n    }, 100);\n  }\n};\nbar.func2(); // this.func1 is not a function\n```\n\n在不使用箭头函数的情况下，是会报错的，因为最后调用`setTimeout`的对象是`window`，但是在`window`中并没有`func1`函数。\n\n在改变 `this` 指向这一节将把这个例子作为 `Demo` 进行改造\n\n那么，箭头函数是如何实现的？\n\n\n### 箭头函数（Arrow function expressions）\n---\n\n**箭头函数的 `this` 始终指向函数定义时的 `this`，而非执行时。**记住：“箭头函数没有单独的`this`绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 `this` 绑定的是最近一层非箭头函数的 `this`，否则，`this` 为 `undefined`(箭头函数会从自己的作用域链的上一层继承`this`)”。\n\n**请看下面的例子：**\n\n**例9：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    setTimeout(() => {\n      this.func1(); // 箭头函数没有单独的this绑定，必须通过查找作用域链来决定其值\n    }, 100);\n  }\n};\nbar.func2(); // Br3ad\n```\n\n### 在函数内部使用`_that = this`\n---\n\n如果不使用ES6，那么这种方式应该是最简单的不会出错的方式，先将调用这个函数的对象保存在变量`_this`中，然后在函数中都是用这个`_that`，这样`_that`就不会改变了。\n\n**请看下面的例子：**\n\n**例10：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    var _that = this; // 这里把对象bar的作用域保存起来给一个变量_that\n    setTimeout( function () {\n      _that.func1();\n    }, 100);\n  };\n};\nbar.func2(); // Br3ad\n```\n\n这个例子中，在`func2`中，首先设置`var _that = this;`，这里的`this`是调用func2的对象`bar`，为了防止在`func2`中的`setTimeout`被`window`调用而导致的在`setTimeout`中的`this`为`window`。将`this(指向变量bar)`赋值给一个变量`_that`，这样，在`func2`中使用`_that`就是指向对象`bar`了。\n\n\n### 使用 `apply()`、`call()`、`bind()`\n\n使用[`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)、[`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)、[`bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)函数也是可以改变`this`的指向，先来看一下是怎么实现的：\n\n#### 使用[*`apply()`*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n\n来看看MDN对[`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)的用法定义：\n\n> [`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)方法调用一个具有给定`this`值的函数，以及作为一个数组（或类似数组对象）提供的参数\n\n**语法**\n\n```javascript\nfunction.apply(thisArg, [argsArray])\n```\n\n**请看下面的例子：**\n\n**例11：**\n\n```javascript\n// function.apply()\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    setTimeout(function () {\n      this.func1(); // Br3ad\n    }.apply(bar), 100);\n  }\n};\nbar.func2(); // Br3ad\n```\n\n#### 使用[*`call()`*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n\n来看看MDN对[`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)的用法定义：\n\n> [`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)方法使用一个指定的 `this` 值和单独给出的一个或多个参数来调用一个函数。\n\n**语法**\n\n```javascript\nfunction.call(thisArg, arg1, arg2, arg3, ar4, ...);\n```\n\n**请看下面的例子：**\n\n**例子12：**\n\n```javascript\n// function.call()\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    setTimeout( function (){\n      this.func1();\n    }.call(bar), 100)\n  }\n};\nbar.func2(); // Br3ad\n```\n\n#### 使用[*`bind()`*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n\n来看看MDN对[`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)的用法定义：\n\n> [`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)方法创建一个新的函数，在 `bind()` 被调用时，这个新函数的 `this` 被指定为 `bind()` 的第一个参数，而其余参数将作为新函数的参数，供调用时使用\n\n**语法**\n\n```javascript\nfunction.bind(thisArg[, arg1[, arg2[, ...]]])\n```\n\n**请看下面的例子：**\n\n**例子13**\n\n```javascript\n// function.bind()\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    setTimeout(function () {\n      this.func1();\n    }.bind(bar)(), 100);\n  }\n};\nbar.func2(); // Br3ad\n```\n\n## JavaScript 中 [`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)、[`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)、[`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)的区别？\n\n现在，我们都知道使用`call()`、`apply()`、`bind()`函数都可以改变JavaScript中`this`的指向，但是这三个函数稍有不同。\n\n在[`MDN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)中定义`apply()`如下：\n\n> `apply()` 方法调用一个具有给定`this`值的函数，以及作为一个数组（或类似数组对象）提供的参数\n\n**语法**\n\n```javascript\nfunction.apply(thisArg, [argsArray])\n```\n\n**参数：**\n> `thisArg`(必须) 在 `func` 函数运行时使用的 `this` 值。请注意，`this`可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 `null` 或 `undefined` 时会自动替换为指向全局对象，原始值会被包装。\n\n> `argsArray`(可选) 一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 `func` 函数。如果该参数的值为 `null` 或  `undefined`，则表示不需要传入任何参数。从`ECMAScript 5`开始可以使用类数组对象。\n\n### `apply()` 和 `call()` 的区别\n\n`apply()` 和 `call()` 基本类似，他们的区别只是传入的参数不同\n\ncall()的语法为：\n\n```javascript\nfunction.call(thisArg, arg1, arg2, ...)\n```\n\n`apply()`和`call()`的区别就是：\n> **`call()`方法接受的是若干个参数列表，而`apply()`接收的是一个包含多个参数的数组。**\n\n**请看下面的例子：**\n\n**例子14：**\n\n```javascript\n// function.apply()\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  fn: function (a, b) {\n    console.log(a + b); // 3\n  }\n};\nvar b = bar.fn;\nb.apply(bar, [1, 2]); // 3\n```\n\n**例子15：**\n\n```javascript\n// function.call()\nvar bar = {\n  name: 'Br3ad',\n  fn: function (a, b) {\n    console.log(a + b); // 3\n  }\n};\nvar b = bar.fn;\nb.call(bar, 1, 2); // 3\n```\n\n### [`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)和[`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)、[`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)的区别\n\n现在，将刚刚的例子使用[`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)试一下\n\n```javascript\n// function.bind()()\nvar bar = {\n  name: 'Br3ad',\n  fn: function (a, b) {\n    console.log(a + b);\n  }\n};\nvar b = bar.fn;\nb.bind(bar, 1, 2); // 到这一步并没有输出，这是因为bind()方法创建了一个新函数，需要进一步调用才能执行\n```\n\n会发现并没有输出，这是为什么呢，我们来看一下 [`MDN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) 上的文档说明：\n\n> `bind()` 方法创建一个新的函数，在 `bind()` 被调用时，这个新函数的 `this` 被指定为 `bind()` 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。\n\n所以我们可以看出，`bind()` 是创建一个新的函数，我们必须要手动去调用：\n\n```javascript\n// function\nvar bar = {\n  name: 'Br3ad',\n  fn: function (a, b) {\n    console.log(a + b); // 3\n  }\n};\nvar b = bar.fn; // 到这一步并没有输出，这是因为bind()方法创建了一个新函数，需要进一步调用才能执行\nb.bind(bar, 1, 2)(); // 调用bind()方法创建的新函数，并正确输出了结果：3\n```\n\n---\n\n## JavaScript 中的函数调用方式\n\n**例7：**\n\n```javascript\nvar name = 'windowsName';\nfunction fn () {\n  var name = 'Br3ad';\n  innerFunction();\n  function innerFunction () {\n    console.log(this.name); // windowsName\n  }\n};\n\nfn();\n```\n\n**例8：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name);\n  },\n  func2: function () {\n    setTimeout(function(){\n      this.func1();\n    }, 100)\n  }\n};\nbar.func2(); // Uncaught TypeError: this.func1 is not a function\n// 这里调用setTimeout的是全局对象，this指向的也是全局对象，而全局对象中并没有`func1()`这个函数，所以这里会报错\n```\n\n**函数调用的方法一共有 4 种**\n> **作为一个函数调用**\n> **函数作为方法调用**\n> **使用构造函数调用函数**\n> **作为函数方法调用函数（[`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)、[`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)）**\n\n### 作为函数调用\n\n**比如上面的例子1：**\n\n**例1：**\n```javascript\n// non-strict mode\nvar name = 'windowsName';\nfunction foo () {\n  var name = 'Br3ad';\n  console.log(this.name); // windowsName\n  console.log('inner:' + this); // inner: [object Window]\n};\nfoo();\nconsole.log('outer:' + this); // outer: [object Window]\n```\n\n这是一个简单的函数，在浏览器运行环境中的非严格模式(non-strict mode)默认是属于全局对象 `window` 的，在严格模式(strict mode)，this指向的就是 `undefined`。**这是一个全局的函数，很容易产生命名冲突，不建议这样使用。**\n\n```javascript\n// strict mode\n'use strict';\nvar name = 'windowsName';\nfunction foo () {\n  var name = 'Br3ad';\n  console.log(this.name);\n};\nfoo(); // Uncaught TypeError: Cannot read property 'name' of undefined\n// 这里使用的是严格模式，this指向的全局对象，而全局对象没有被定义所以是undefined，所以这里会报错\n```\n\n### 函数作为方法调用\n\n将函数作为对象的方法使用。比如：\n\n**例2：**\n\n```javascript\nvar name = 'windowName';\nvar foo = {\n  name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // Br3ad\n  }\n};\nfoo.fn(); // Br3ad\n```\n\n这里定义一个对象`foo`，对象`foo`有一个属性(`name`)和一个方法(`fn`)。\n\n然后，对象`foo`通过`.`方法调用了其中的`fn`方法\n\n还记得那句话**“this永远指向最后调用它的那个对象”**，所以在`fn`中的`this`就是指向 `foo` 的\n\n### 作为构造函数调用函数\n\n> 构造函数：关键字new建一个对象并调用一个函数（这个函数称作构造函数 Constructor）初始化新对象的属性\n> 如果函数调用前使用了new运算符，则是调用了构造函数\n> 这看起来就像创建了新的函数，但实际上JavaScript函数是重新创建的对象\n\n```javascript\n// 构造函数\nfunction myFunction(arg1, arg2) {\n  this.firstName = arg1;\n  this.lastName = arg2;\n}\nvar foo = new myFunction('Li', 'Cherry');\nfoo.lastName; // 'Cherry'\n```\n\nnew 的过程\n\n```javascript\nvar foo = new myFunction('Li', 'Cherry');\nnew myFunction {\n  var obj = {};\n  obj.__proto__ = myFunction.prototype;\n  var result = myFunction.call(obj, 'Li', 'Cherry');\n  return typeof result === 'object' ? result : obj;\n}\n```\n\n1、创建一个空对象obj；\n2、将新创建的空对象的隐式原型指向其构造函数的显示原型\n3、使用`call`改变`this`的指向\n4、如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；\n如果返回值是一个新对象的话那么直接直接返回该对象。\n\n可以看到，在new的过程中，使用`call`改变了this的指向\n\n### 通过它们的`call()`和`apply()`方法间接调用\n\n> JavaScript 中，函数是对象\n> JavaScript 函数有它的属性和方法。\n> `call()`和`apply()`是预定义的函数方法。两个方法可用于调用函数，两个方法的第一个参数必须是对象本身\n> JavaScript 严格模式（strict mode）下，在调用函数时第一个参数会成为`this`的值，即使该参数不是一个对象\n> JavaScript 非严格模式（non-strict mode）下，如果第一个参数的值是`null`或`undefined`，它将使用全局对象替代。\n\n**再来看例子6:**\n\n```javascript\nvar name = 'windowsName';\nfunction fn () {\n  var name = 'Br3ad';\n  innerFunction();\n  function innerFunction() {\n    console.log(this.name); // windowsName\n  };\n};\nfn();\n```\n\n这里的`innerFunction()`的调用属于第一种调用方式：作为一个函数调用（作为一个函数调用、没有挂载在任何对象上，所以对于没有挂载在任何对象的函数，在非严格模式（non-strict mode）下就是指向window的）\n\n**然后再看一下例7:**\n\n**例7：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name);\n  },\n  func2: function () {\n    setTimeout(function (){\n      this.func1()\n    }, 100)\n  }\n};\n\nbar.func2(); // this.func1 is not a function\n```\n\n得出结论，可以简单理解为：**匿名函数的`this`永远指向`window`**\n\n在这之前，我们得出结论：**`this`永远指向最后调用它的那个对象**，那么去找最后调用匿名函数的对象，\n但是因为匿名函数没有名字，所以没有办法被其他对象调用匿名函数的。所以：**匿名函数的 `this` 永远指向 `window`**\n\n那么问题来了，匿名函数是如何被定义的？匿名函数是自执行的，就是在匿名函数后面加`()`让其自执行。其次就是虽然匿名函数不能被其他对象调用，但是可以被其他函数调用，比如**例7**中的`setTimeout`\n\n---\n\n## 严格模式\n\n> 在严格版中的默认的`this`不再是`window`，而是`undefined。`\n\n**几条判断`this`指向的方法：**\n\n1、查看函数在哪被调用\n2、点左侧有没有对象？如果有，它就是 “`this`” 的引用。如果没有，继续往下。\n3、该函数是不是用 “`call`”、“`apply`” 或者 “`bind`” 调用的？如果是，它会显式地指明 “`this`” 的引用。如果没有，继续往下。\n4、该函数是不是用 “`new`” 调用的？如果是，“`this`” 指向的就是 `JavaScript` 解释器新创建的对象。如果没有，继续往下。\n5、是否在“严格模式”下？如果是，“`this`” 就是 `undefined`，如果不是\n6、JavaScript，“`this`” 会指向 “`window`” 对象\n\n## 参考链接\n\n> [稀土掘金-this、apply、call、bind](https://juejin.im/post/59bfe84351882531b730bac2)\n> [阮一峰-JavaScript 的 this 原理](https://www.ruanyifeng.com/blog/2018/06/javascript-this.html)\n> [javascript this指向](https://note.youdao.com/ynoteshare1/index.html?id=b2fab3b044aa90033395df0c8c9ca3a4&type=note)\n> [*How to use the apply(), call(), and bind() methods in JavaScript*](https://www.freecodecamp.org/news/how-to-use-the-apply-call-and-bind-methods-in-javascript-80a8e6096a90/)\n> [*Understanding This, Bind, Call, and Apply in JavaScript*](https://www.taniarascia.com/this-bind-call-apply-javascript/)\n> [*Function.prototype.apply()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n> [*Function.prototype.call()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n> [*Function.prototype.bind()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n> [*理解 JavaScript 中的 this、call、apply 和 bind*](https://juejin.im/post/5b9f176b6fb9a05d3827d03f)\n> [*Understanding the \"this\" keyword, call, apply, and bind in JavaScript*](https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/)\n> [*JavaScript 之 this 指南*](https://juejin.im/post/5c876ba96fb9a049ae08bc63)\n> [*javascript 基础之 call, apply, bind*](https://zhuanlan.zhihu.com/p/71553017)\n> [*JavaScript中的call、apply、bind深入理解*](https://www.jianshu.com/p/00dc4ad9b83f)\n> [*彻底弄清 this call apply bind 以及原生实现*](https://juejin.im/post/5c813aa5f265da2dd94cd7c2)\n> [*如何在 JavaScript 中使用 apply()，call()，bind()*](https://juejin.im/post/5c8617d86fb9a049e93d8e4a)\n> [JavaScript 函数调用](https://www.runoob.com/js/js-function-invocation.html)\n","source":"_posts/2020-01-07-谈谈对javascript中this关键字的理解.md","raw":"---\ntitle: 谈谈对JavaScript中this、call()、apply()、bind()的理解\ndate: 2020-01-07 12:12:11\ntags:\n  - 前端\n  - 前端面试题\n  - JavaScript this\n  - JavaScript 作用域问题\ncategory:\n- [前端]\n- [JavaScript]\n---\n\n## MDN\n\n> *[`JavaScript this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)*\n> *[`JavaScript Function.prototype.call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)*\n> *[`JavaScript Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)*\n> *[`JavaScript Function.prototype.bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)*\n\n\n## [*`this`的概念*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)理解\n\n> ***[`this`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this) 永远指向一个对象，并且指向最后调用它的那个对象；***\n> ***[`this`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this) 的指向完全取决于函数调用的位置；***\n\n\n## [*`this`*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)的指向\n\n> *在绝大多数情况下，函数的调用方式决定了`this`的值。`this`不能在执行期间被赋值，并且在每次函数被调用时this的值也可能会不同。ES5引入了bind方法来设置函数的this值，而不用考虑函数如何被调用的，ES2015 引入了支持this词法解析的箭头函数（它在闭合的执行环境内设置this的值）。[(来自MDN)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)*\n\n<!-- > **`this` 永远指向最后调用它的那个对象**\n> **`this` 永远指向一个对象；**\n> **`this` 的指向完全取决于函数调用的位置；**\n> **`this` 会根据运行环境的改变而改变，同时，函数中的`this`也只能在运行时才能最终确定运行环境；**\n> **如果返回值是一个对象，那么`this`指向的就是那个返回的对象，如果返回值不是一个对象那么`this`还是指向函数的实例。** -->\n### 全局环境(Global context)\n\n> *无论是否在严格模式下，在全局执行环境中（在任何函数体外部）`this` 都指向全局对象 [(来自MDN)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)*\n\n```javascript\nconosole.log(this === window); // true\na = 37;\nconsole.log(window.a); // 37\nthis.b = 'Br3ad';\nconsole.log(window.b); // Br3ad\nconsole.log(b); // Br3ad\n```\n\n### 函数（运行内）环境(Function context)\n\n> *在函数内部，`this`的值取决于函数被调用的方式。[(来自MDN)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)*\n\n#### 简单调用\n\n**非严格模式下：**\n因为下面的代码不在严格模式下，且 `this` 的值不是由该调用设置的，所以 `this` 的值默认指向全局对象(`window`)。\n\n```javascript\n// non-strict mode\nfunction func1 () {\n  return this;\n};\n// 在浏览器中：\nfunc1() === window; // true\n// 在node中：\nfunc1() === global; // true\n```\n\n**严格模式下：**\n`this`将保持他进入执行环境时的值，所以下面的`this`将会默认为`undefined`。\n\n```javascript\n// strict mode\nfunction func2 () {\n  'use strict';\n  return this;\n};\nfunc2 === undefined; // true\n```\n\n所以，可以得出结论在严格模式下，如果 `this` 没有被执行环境（execution context）定义，那它将保持为 `undefined`。\n\n**首先，来看下面一个简单的例子：**\n\n**例 1：**\n\n```javascript\nvar name = 'windowsName';\nfunction foo () {\n  var name = 'Br3ad';\n  console.log(this.name); // windowsName\n  console.log('inner: ' + this); // [Object Window]\n}\nfoo();\nconsole.log('outer: ' + this); // [Object Window]\n```\n\n为什么这里`console.log`是 windowsName？\n\n因为**“`this`永远指向最后调用它的那个对象”**，调用`foo`的地方`foo()`，前面没有调用的对象那么就是指向全局对象 `Object window`，相当于`window.foo()`\n\n这里没有使用严格模式，如果使用严格模式的情况下，全局对象就是`undefined`，那么就会报错`Uncaught TypeError: Cannot read property 'name' of undefined`\n\n**请看下面的例子：**\n\n**例 2：**\n\n```javascript\n// Use Strict Mode\n'use strict'\nvar name = 'windowsName';\nfunction foo () {\n  var name = 'Br3ad';\n  console.log('inner: ' + this); // inner: undefined\n  console.log(this.name); // Uncaught TypeError: Cannot read property 'name' of undefined\n}\nfoo();\nconsole.log('outer: ' + this); // [Object Window]\n```\n\n**再看下面的例子：**\n\n**例 3：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // Br3ad\n  };\n};\nbar.fn(); // Br3ad\n```\n\n在这个例子中，函数 `fn` 是对象 `bar` 调用的，所以打印的值就是 `bar` 中的 `name` 的值。\n\n**基于上面的例子，再做个改动：**\n\n**例 4：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // Br3ad\n  }\n};\nwindow.bar.fn(); // Br3ad\n```\n\n这里`console.log`为`Br3ad`，最后调用它的对象是`bar`,还是因为**“`this` 永远指向最后调用它的那个对象”**\n\n**再来看下面这个例子：**\n\n**例 5：**\n\n```javascript\nvar name = 'windowName';\nvar bar = {\n  // name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // undefined\n  }\n};\nwindow.bar.fn(); // undefined\n```\n\n为什么`console.log`会打印`undefined`呢？\n\n因为，如刚刚所描述的那样，调用`fn`的是`bar`这个对象，也就是说`fn`内部的`this`是对象`bar`，而对象`bar`中并没有对`name`字段进行定义，所以`console.log`的`this.name`的值为`undefined`。\n\n这个例子还是印证了刚才的结论：**this 永远指向最后调用它的那个对象**，因为最后调用`fn`的对象是`bar`，所以就算`bar`中没有`name`这个属性，也不会继续向上一个对象寻找`this.name`，而是直接输出`undefined`。\n\n**再来看一个复杂点的例子：**\n\n**例 6：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // windowsName\n  }\n};\nvar fun = bar.fn;\nfun(); // windowsName\n```\n\n为什么这里`console.log`打印出的不是`Br3ad`？因为虽然`bar`对象的`fn`方法赋值给了变量`fun`了，但是没有调用，回到之前我们的结论：**“this 永远指向最后调用它的那个对象”**，由于刚刚的`fun`并没有调用，所以`fn()`最后仍然是被`window`调用的。所以这里`this`指向的也就是`window`。\n\n以上的例子，不难发现`this`的指向并不是在创建的时候就可以确定的，在 `es5` 中，永远是：**`this` 永远指向最后调用它的那个对象**\n\n**再来看一个例子：**\n\n**例 7：**\n\n```javascript\nvar name = 'windowName';\nfunction fn () {\n  var name = 'Br3ad';\n  innerFunction();\n  function innerFunction() {\n    console.log(this.name); // windowsName\n  }\n};\nfn(); // windowsName\n```\n\n## 怎么改变 `this` 的指向?\n\n改变this的指向主要有以下几种方法：\n\n- 使用`ES6`的[`箭头函数(Arrow function expressions)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n- 在函数内部使用`_this = this`\n- 使用`apply()`、`call()`、`bind()`\n- `new` 实例化一个对象\n\n**请看下面的例子：**\n\n**例子8：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name);  // this.func1 is not a function\n  },\n  func2: function () {\n    setTimeout(function () {\n      this.func1();\n    }, 100);\n  }\n};\nbar.func2(); // this.func1 is not a function\n```\n\n在不使用箭头函数的情况下，是会报错的，因为最后调用`setTimeout`的对象是`window`，但是在`window`中并没有`func1`函数。\n\n在改变 `this` 指向这一节将把这个例子作为 `Demo` 进行改造\n\n那么，箭头函数是如何实现的？\n\n\n### 箭头函数（Arrow function expressions）\n---\n\n**箭头函数的 `this` 始终指向函数定义时的 `this`，而非执行时。**记住：“箭头函数没有单独的`this`绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 `this` 绑定的是最近一层非箭头函数的 `this`，否则，`this` 为 `undefined`(箭头函数会从自己的作用域链的上一层继承`this`)”。\n\n**请看下面的例子：**\n\n**例9：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    setTimeout(() => {\n      this.func1(); // 箭头函数没有单独的this绑定，必须通过查找作用域链来决定其值\n    }, 100);\n  }\n};\nbar.func2(); // Br3ad\n```\n\n### 在函数内部使用`_that = this`\n---\n\n如果不使用ES6，那么这种方式应该是最简单的不会出错的方式，先将调用这个函数的对象保存在变量`_this`中，然后在函数中都是用这个`_that`，这样`_that`就不会改变了。\n\n**请看下面的例子：**\n\n**例10：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    var _that = this; // 这里把对象bar的作用域保存起来给一个变量_that\n    setTimeout( function () {\n      _that.func1();\n    }, 100);\n  };\n};\nbar.func2(); // Br3ad\n```\n\n这个例子中，在`func2`中，首先设置`var _that = this;`，这里的`this`是调用func2的对象`bar`，为了防止在`func2`中的`setTimeout`被`window`调用而导致的在`setTimeout`中的`this`为`window`。将`this(指向变量bar)`赋值给一个变量`_that`，这样，在`func2`中使用`_that`就是指向对象`bar`了。\n\n\n### 使用 `apply()`、`call()`、`bind()`\n\n使用[`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)、[`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)、[`bind()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)函数也是可以改变`this`的指向，先来看一下是怎么实现的：\n\n#### 使用[*`apply()`*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n\n来看看MDN对[`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)的用法定义：\n\n> [`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)方法调用一个具有给定`this`值的函数，以及作为一个数组（或类似数组对象）提供的参数\n\n**语法**\n\n```javascript\nfunction.apply(thisArg, [argsArray])\n```\n\n**请看下面的例子：**\n\n**例11：**\n\n```javascript\n// function.apply()\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    setTimeout(function () {\n      this.func1(); // Br3ad\n    }.apply(bar), 100);\n  }\n};\nbar.func2(); // Br3ad\n```\n\n#### 使用[*`call()`*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n\n来看看MDN对[`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)的用法定义：\n\n> [`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)方法使用一个指定的 `this` 值和单独给出的一个或多个参数来调用一个函数。\n\n**语法**\n\n```javascript\nfunction.call(thisArg, arg1, arg2, arg3, ar4, ...);\n```\n\n**请看下面的例子：**\n\n**例子12：**\n\n```javascript\n// function.call()\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    setTimeout( function (){\n      this.func1();\n    }.call(bar), 100)\n  }\n};\nbar.func2(); // Br3ad\n```\n\n#### 使用[*`bind()`*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n\n来看看MDN对[`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)的用法定义：\n\n> [`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)方法创建一个新的函数，在 `bind()` 被调用时，这个新函数的 `this` 被指定为 `bind()` 的第一个参数，而其余参数将作为新函数的参数，供调用时使用\n\n**语法**\n\n```javascript\nfunction.bind(thisArg[, arg1[, arg2[, ...]]])\n```\n\n**请看下面的例子：**\n\n**例子13**\n\n```javascript\n// function.bind()\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name); // Br3ad\n  },\n  func2: function () {\n    setTimeout(function () {\n      this.func1();\n    }.bind(bar)(), 100);\n  }\n};\nbar.func2(); // Br3ad\n```\n\n## JavaScript 中 [`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)、[`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)、[`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)的区别？\n\n现在，我们都知道使用`call()`、`apply()`、`bind()`函数都可以改变JavaScript中`this`的指向，但是这三个函数稍有不同。\n\n在[`MDN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)中定义`apply()`如下：\n\n> `apply()` 方法调用一个具有给定`this`值的函数，以及作为一个数组（或类似数组对象）提供的参数\n\n**语法**\n\n```javascript\nfunction.apply(thisArg, [argsArray])\n```\n\n**参数：**\n> `thisArg`(必须) 在 `func` 函数运行时使用的 `this` 值。请注意，`this`可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 `null` 或 `undefined` 时会自动替换为指向全局对象，原始值会被包装。\n\n> `argsArray`(可选) 一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 `func` 函数。如果该参数的值为 `null` 或  `undefined`，则表示不需要传入任何参数。从`ECMAScript 5`开始可以使用类数组对象。\n\n### `apply()` 和 `call()` 的区别\n\n`apply()` 和 `call()` 基本类似，他们的区别只是传入的参数不同\n\ncall()的语法为：\n\n```javascript\nfunction.call(thisArg, arg1, arg2, ...)\n```\n\n`apply()`和`call()`的区别就是：\n> **`call()`方法接受的是若干个参数列表，而`apply()`接收的是一个包含多个参数的数组。**\n\n**请看下面的例子：**\n\n**例子14：**\n\n```javascript\n// function.apply()\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  fn: function (a, b) {\n    console.log(a + b); // 3\n  }\n};\nvar b = bar.fn;\nb.apply(bar, [1, 2]); // 3\n```\n\n**例子15：**\n\n```javascript\n// function.call()\nvar bar = {\n  name: 'Br3ad',\n  fn: function (a, b) {\n    console.log(a + b); // 3\n  }\n};\nvar b = bar.fn;\nb.call(bar, 1, 2); // 3\n```\n\n### [`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)和[`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)、[`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)的区别\n\n现在，将刚刚的例子使用[`bind()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)试一下\n\n```javascript\n// function.bind()()\nvar bar = {\n  name: 'Br3ad',\n  fn: function (a, b) {\n    console.log(a + b);\n  }\n};\nvar b = bar.fn;\nb.bind(bar, 1, 2); // 到这一步并没有输出，这是因为bind()方法创建了一个新函数，需要进一步调用才能执行\n```\n\n会发现并没有输出，这是为什么呢，我们来看一下 [`MDN`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) 上的文档说明：\n\n> `bind()` 方法创建一个新的函数，在 `bind()` 被调用时，这个新函数的 `this` 被指定为 `bind()` 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。\n\n所以我们可以看出，`bind()` 是创建一个新的函数，我们必须要手动去调用：\n\n```javascript\n// function\nvar bar = {\n  name: 'Br3ad',\n  fn: function (a, b) {\n    console.log(a + b); // 3\n  }\n};\nvar b = bar.fn; // 到这一步并没有输出，这是因为bind()方法创建了一个新函数，需要进一步调用才能执行\nb.bind(bar, 1, 2)(); // 调用bind()方法创建的新函数，并正确输出了结果：3\n```\n\n---\n\n## JavaScript 中的函数调用方式\n\n**例7：**\n\n```javascript\nvar name = 'windowsName';\nfunction fn () {\n  var name = 'Br3ad';\n  innerFunction();\n  function innerFunction () {\n    console.log(this.name); // windowsName\n  }\n};\n\nfn();\n```\n\n**例8：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name);\n  },\n  func2: function () {\n    setTimeout(function(){\n      this.func1();\n    }, 100)\n  }\n};\nbar.func2(); // Uncaught TypeError: this.func1 is not a function\n// 这里调用setTimeout的是全局对象，this指向的也是全局对象，而全局对象中并没有`func1()`这个函数，所以这里会报错\n```\n\n**函数调用的方法一共有 4 种**\n> **作为一个函数调用**\n> **函数作为方法调用**\n> **使用构造函数调用函数**\n> **作为函数方法调用函数（[`call()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)、[`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)）**\n\n### 作为函数调用\n\n**比如上面的例子1：**\n\n**例1：**\n```javascript\n// non-strict mode\nvar name = 'windowsName';\nfunction foo () {\n  var name = 'Br3ad';\n  console.log(this.name); // windowsName\n  console.log('inner:' + this); // inner: [object Window]\n};\nfoo();\nconsole.log('outer:' + this); // outer: [object Window]\n```\n\n这是一个简单的函数，在浏览器运行环境中的非严格模式(non-strict mode)默认是属于全局对象 `window` 的，在严格模式(strict mode)，this指向的就是 `undefined`。**这是一个全局的函数，很容易产生命名冲突，不建议这样使用。**\n\n```javascript\n// strict mode\n'use strict';\nvar name = 'windowsName';\nfunction foo () {\n  var name = 'Br3ad';\n  console.log(this.name);\n};\nfoo(); // Uncaught TypeError: Cannot read property 'name' of undefined\n// 这里使用的是严格模式，this指向的全局对象，而全局对象没有被定义所以是undefined，所以这里会报错\n```\n\n### 函数作为方法调用\n\n将函数作为对象的方法使用。比如：\n\n**例2：**\n\n```javascript\nvar name = 'windowName';\nvar foo = {\n  name: 'Br3ad',\n  fn: function () {\n    console.log(this.name); // Br3ad\n  }\n};\nfoo.fn(); // Br3ad\n```\n\n这里定义一个对象`foo`，对象`foo`有一个属性(`name`)和一个方法(`fn`)。\n\n然后，对象`foo`通过`.`方法调用了其中的`fn`方法\n\n还记得那句话**“this永远指向最后调用它的那个对象”**，所以在`fn`中的`this`就是指向 `foo` 的\n\n### 作为构造函数调用函数\n\n> 构造函数：关键字new建一个对象并调用一个函数（这个函数称作构造函数 Constructor）初始化新对象的属性\n> 如果函数调用前使用了new运算符，则是调用了构造函数\n> 这看起来就像创建了新的函数，但实际上JavaScript函数是重新创建的对象\n\n```javascript\n// 构造函数\nfunction myFunction(arg1, arg2) {\n  this.firstName = arg1;\n  this.lastName = arg2;\n}\nvar foo = new myFunction('Li', 'Cherry');\nfoo.lastName; // 'Cherry'\n```\n\nnew 的过程\n\n```javascript\nvar foo = new myFunction('Li', 'Cherry');\nnew myFunction {\n  var obj = {};\n  obj.__proto__ = myFunction.prototype;\n  var result = myFunction.call(obj, 'Li', 'Cherry');\n  return typeof result === 'object' ? result : obj;\n}\n```\n\n1、创建一个空对象obj；\n2、将新创建的空对象的隐式原型指向其构造函数的显示原型\n3、使用`call`改变`this`的指向\n4、如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；\n如果返回值是一个新对象的话那么直接直接返回该对象。\n\n可以看到，在new的过程中，使用`call`改变了this的指向\n\n### 通过它们的`call()`和`apply()`方法间接调用\n\n> JavaScript 中，函数是对象\n> JavaScript 函数有它的属性和方法。\n> `call()`和`apply()`是预定义的函数方法。两个方法可用于调用函数，两个方法的第一个参数必须是对象本身\n> JavaScript 严格模式（strict mode）下，在调用函数时第一个参数会成为`this`的值，即使该参数不是一个对象\n> JavaScript 非严格模式（non-strict mode）下，如果第一个参数的值是`null`或`undefined`，它将使用全局对象替代。\n\n**再来看例子6:**\n\n```javascript\nvar name = 'windowsName';\nfunction fn () {\n  var name = 'Br3ad';\n  innerFunction();\n  function innerFunction() {\n    console.log(this.name); // windowsName\n  };\n};\nfn();\n```\n\n这里的`innerFunction()`的调用属于第一种调用方式：作为一个函数调用（作为一个函数调用、没有挂载在任何对象上，所以对于没有挂载在任何对象的函数，在非严格模式（non-strict mode）下就是指向window的）\n\n**然后再看一下例7:**\n\n**例7：**\n\n```javascript\nvar name = 'windowsName';\nvar bar = {\n  name: 'Br3ad',\n  func1: function () {\n    console.log(this.name);\n  },\n  func2: function () {\n    setTimeout(function (){\n      this.func1()\n    }, 100)\n  }\n};\n\nbar.func2(); // this.func1 is not a function\n```\n\n得出结论，可以简单理解为：**匿名函数的`this`永远指向`window`**\n\n在这之前，我们得出结论：**`this`永远指向最后调用它的那个对象**，那么去找最后调用匿名函数的对象，\n但是因为匿名函数没有名字，所以没有办法被其他对象调用匿名函数的。所以：**匿名函数的 `this` 永远指向 `window`**\n\n那么问题来了，匿名函数是如何被定义的？匿名函数是自执行的，就是在匿名函数后面加`()`让其自执行。其次就是虽然匿名函数不能被其他对象调用，但是可以被其他函数调用，比如**例7**中的`setTimeout`\n\n---\n\n## 严格模式\n\n> 在严格版中的默认的`this`不再是`window`，而是`undefined。`\n\n**几条判断`this`指向的方法：**\n\n1、查看函数在哪被调用\n2、点左侧有没有对象？如果有，它就是 “`this`” 的引用。如果没有，继续往下。\n3、该函数是不是用 “`call`”、“`apply`” 或者 “`bind`” 调用的？如果是，它会显式地指明 “`this`” 的引用。如果没有，继续往下。\n4、该函数是不是用 “`new`” 调用的？如果是，“`this`” 指向的就是 `JavaScript` 解释器新创建的对象。如果没有，继续往下。\n5、是否在“严格模式”下？如果是，“`this`” 就是 `undefined`，如果不是\n6、JavaScript，“`this`” 会指向 “`window`” 对象\n\n## 参考链接\n\n> [稀土掘金-this、apply、call、bind](https://juejin.im/post/59bfe84351882531b730bac2)\n> [阮一峰-JavaScript 的 this 原理](https://www.ruanyifeng.com/blog/2018/06/javascript-this.html)\n> [javascript this指向](https://note.youdao.com/ynoteshare1/index.html?id=b2fab3b044aa90033395df0c8c9ca3a4&type=note)\n> [*How to use the apply(), call(), and bind() methods in JavaScript*](https://www.freecodecamp.org/news/how-to-use-the-apply-call-and-bind-methods-in-javascript-80a8e6096a90/)\n> [*Understanding This, Bind, Call, and Apply in JavaScript*](https://www.taniarascia.com/this-bind-call-apply-javascript/)\n> [*Function.prototype.apply()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n> [*Function.prototype.call()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n> [*Function.prototype.bind()*](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n> [*理解 JavaScript 中的 this、call、apply 和 bind*](https://juejin.im/post/5b9f176b6fb9a05d3827d03f)\n> [*Understanding the \"this\" keyword, call, apply, and bind in JavaScript*](https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/)\n> [*JavaScript 之 this 指南*](https://juejin.im/post/5c876ba96fb9a049ae08bc63)\n> [*javascript 基础之 call, apply, bind*](https://zhuanlan.zhihu.com/p/71553017)\n> [*JavaScript中的call、apply、bind深入理解*](https://www.jianshu.com/p/00dc4ad9b83f)\n> [*彻底弄清 this call apply bind 以及原生实现*](https://juejin.im/post/5c813aa5f265da2dd94cd7c2)\n> [*如何在 JavaScript 中使用 apply()，call()，bind()*](https://juejin.im/post/5c8617d86fb9a049e93d8e4a)\n> [JavaScript 函数调用](https://www.runoob.com/js/js-function-invocation.html)\n","slug":"谈谈对javascript中this关键字的理解","published":1,"updated":"2020-06-30T02:03:02.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcctyw6x00amm5sn2wbq0hia","content":"<h2 id=\"MDN\"><a href=\"#MDN\" class=\"headerlink\" title=\"MDN\"></a>MDN</h2><blockquote>\n<p><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><code>JavaScript this</code></a></em><br><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>JavaScript Function.prototype.call()</code></a></em><br><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>JavaScript Function.prototype.apply()</code></a></em><br><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>JavaScript Function.prototype.bind()</code></a></em></p>\n</blockquote>\n<h2 id=\"this的概念理解\"><a href=\"#this的概念理解\" class=\"headerlink\" title=\"this的概念理解\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><em><code>this</code>的概念</em></a>理解</h2><blockquote>\n<p><strong><em><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><code>this</code></a> 永远指向一个对象，并且指向最后调用它的那个对象；</em></strong><br><strong><em><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><code>this</code></a> 的指向完全取决于函数调用的位置；</em></strong></p>\n</blockquote>\n<h2 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><em><code>this</code></em></a>的指向</h2><blockquote>\n<p><em>在绝大多数情况下，函数的调用方式决定了<code>this</code>的值。<code>this</code>不能在执行期间被赋值，并且在每次函数被调用时this的值也可能会不同。ES5引入了bind方法来设置函数的this值，而不用考虑函数如何被调用的，ES2015 引入了支持this词法解析的箭头函数（它在闭合的执行环境内设置this的值）。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">(来自MDN)</a></em></p>\n</blockquote>\n<!-- > **`this` 永远指向最后调用它的那个对象**\n> **`this` 永远指向一个对象；**\n> **`this` 的指向完全取决于函数调用的位置；**\n> **`this` 会根据运行环境的改变而改变，同时，函数中的`this`也只能在运行时才能最终确定运行环境；**\n> **如果返回值是一个对象，那么`this`指向的就是那个返回的对象，如果返回值不是一个对象那么`this`还是指向函数的实例。** -->\n<h3 id=\"全局环境-Global-context\"><a href=\"#全局环境-Global-context\" class=\"headerlink\" title=\"全局环境(Global context)\"></a>全局环境(Global context)</h3><blockquote>\n<p><em>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）<code>this</code> 都指向全局对象 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">(来自MDN)</a></em></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conosole.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">a = <span class=\"number\">37</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 37</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.b = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数（运行内）环境-Function-context\"><a href=\"#函数（运行内）环境-Function-context\" class=\"headerlink\" title=\"函数（运行内）环境(Function context)\"></a>函数（运行内）环境(Function context)</h3><blockquote>\n<p><em>在函数内部，<code>this</code>的值取决于函数被调用的方式。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">(来自MDN)</a></em></p>\n</blockquote>\n<h4 id=\"简单调用\"><a href=\"#简单调用\" class=\"headerlink\" title=\"简单调用\"></a>简单调用</h4><p><strong>非严格模式下：</strong><br>因为下面的代码不在严格模式下，且 <code>this</code> 的值不是由该调用设置的，所以 <code>this</code> 的值默认指向全局对象(<code>window</code>)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// non-strict mode</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 在浏览器中：</span></span><br><span class=\"line\">func1() === <span class=\"built_in\">window</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 在node中：</span></span><br><span class=\"line\">func1() === global; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>严格模式下：</strong><br><code>this</code>将保持他进入执行环境时的值，所以下面的<code>this</code>将会默认为<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// strict mode</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">func2 === <span class=\"literal\">undefined</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>所以，可以得出结论在严格模式下，如果 <code>this</code> 没有被执行环境（execution context）定义，那它将保持为 <code>undefined</code>。</p>\n<p><strong>首先，来看下面一个简单的例子：</strong></p>\n<p><strong>例 1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inner: '</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// [Object Window]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outer: '</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// [Object Window]</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么这里<code>console.log</code>是 windowsName？</p>\n<p>因为<strong>“<code>this</code>永远指向最后调用它的那个对象”</strong>，调用<code>foo</code>的地方<code>foo()</code>，前面没有调用的对象那么就是指向全局对象 <code>Object window</code>，相当于<code>window.foo()</code></p>\n<p>这里没有使用严格模式，如果使用严格模式的情况下，全局对象就是<code>undefined</code>，那么就会报错<code>Uncaught TypeError: Cannot read property &#39;name&#39; of undefined</code></p>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例 2：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use Strict Mode</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inner: '</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// inner: undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Uncaught TypeError: Cannot read property 'name' of undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outer: '</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// [Object Window]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>再看下面的例子：</strong></p>\n<p><strong>例 3：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.fn(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，函数 <code>fn</code> 是对象 <code>bar</code> 调用的，所以打印的值就是 <code>bar</code> 中的 <code>name</code> 的值。</p>\n<p><strong>基于上面的例子，再做个改动：</strong></p>\n<p><strong>例 4：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.bar.fn(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<p>这里<code>console.log</code>为<code>Br3ad</code>，最后调用它的对象是<code>bar</code>,还是因为<strong>“<code>this</code> 永远指向最后调用它的那个对象”</strong></p>\n<p><strong>再来看下面这个例子：</strong></p>\n<p><strong>例 5：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// name: 'Br3ad',</span></span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.bar.fn(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么<code>console.log</code>会打印<code>undefined</code>呢？</p>\n<p>因为，如刚刚所描述的那样，调用<code>fn</code>的是<code>bar</code>这个对象，也就是说<code>fn</code>内部的<code>this</code>是对象<code>bar</code>，而对象<code>bar</code>中并没有对<code>name</code>字段进行定义，所以<code>console.log</code>的<code>this.name</code>的值为<code>undefined</code>。</p>\n<p>这个例子还是印证了刚才的结论：<strong>this 永远指向最后调用它的那个对象</strong>，因为最后调用<code>fn</code>的对象是<code>bar</code>，所以就算<code>bar</code>中没有<code>name</code>这个属性，也不会继续向上一个对象寻找<code>this.name</code>，而是直接输出<code>undefined</code>。</p>\n<p><strong>再来看一个复杂点的例子：</strong></p>\n<p><strong>例 6：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = bar.fn;</span><br><span class=\"line\">fun(); <span class=\"comment\">// windowsName</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么这里<code>console.log</code>打印出的不是<code>Br3ad</code>？因为虽然<code>bar</code>对象的<code>fn</code>方法赋值给了变量<code>fun</code>了，但是没有调用，回到之前我们的结论：<strong>“this 永远指向最后调用它的那个对象”</strong>，由于刚刚的<code>fun</code>并没有调用，所以<code>fn()</code>最后仍然是被<code>window</code>调用的。所以这里<code>this</code>指向的也就是<code>window</code>。</p>\n<p>以上的例子，不难发现<code>this</code>的指向并不是在创建的时候就可以确定的，在 <code>es5</code> 中，永远是：<strong><code>this</code> 永远指向最后调用它的那个对象</strong></p>\n<p><strong>再来看一个例子：</strong></p>\n<p><strong>例 7：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  innerFunction();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn(); <span class=\"comment\">// windowsName</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎么改变-this-的指向\"><a href=\"#怎么改变-this-的指向\" class=\"headerlink\" title=\"怎么改变 this 的指向?\"></a>怎么改变 <code>this</code> 的指向?</h2><p>改变this的指向主要有以下几种方法：</p>\n<ul>\n<li>使用<code>ES6</code>的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\"><code>箭头函数(Arrow function expressions)</code></a></li>\n<li>在函数内部使用<code>_this = this</code></li>\n<li>使用<code>apply()</code>、<code>call()</code>、<code>bind()</code></li>\n<li><code>new</code> 实例化一个对象</li>\n</ul>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例子8：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);  <span class=\"comment\">// this.func1 is not a function</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// this.func1 is not a function</span></span><br></pre></td></tr></table></figure>\n\n<p>在不使用箭头函数的情况下，是会报错的，因为最后调用<code>setTimeout</code>的对象是<code>window</code>，但是在<code>window</code>中并没有<code>func1</code>函数。</p>\n<p>在改变 <code>this</code> 指向这一节将把这个例子作为 <code>Demo</code> 进行改造</p>\n<p>那么，箭头函数是如何实现的？</p>\n<h3 id=\"箭头函数（Arrow-function-expressions）\"><a href=\"#箭头函数（Arrow-function-expressions）\" class=\"headerlink\" title=\"箭头函数（Arrow function expressions）\"></a>箭头函数（Arrow function expressions）</h3><hr>\n<p><strong>箭头函数的 <code>this</code> 始终指向函数定义时的 <code>this</code>，而非执行时。</strong>记住：“箭头函数没有单独的<code>this</code>绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 <code>this</code> 绑定的是最近一层非箭头函数的 <code>this</code>，否则，<code>this</code> 为 <code>undefined</code>(箭头函数会从自己的作用域链的上一层继承<code>this</code>)”。</p>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例9：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1(); <span class=\"comment\">// 箭头函数没有单独的this绑定，必须通过查找作用域链来决定其值</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在函数内部使用-that-this\"><a href=\"#在函数内部使用-that-this\" class=\"headerlink\" title=\"在函数内部使用_that = this\"></a>在函数内部使用<code>_that = this</code></h3><hr>\n<p>如果不使用ES6，那么这种方式应该是最简单的不会出错的方式，先将调用这个函数的对象保存在变量<code>_this</code>中，然后在函数中都是用这个<code>_that</code>，这样<code>_that</code>就不会改变了。</p>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例10：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 这里把对象bar的作用域保存起来给一个变量_that</span></span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      _that.func1();</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子中，在<code>func2</code>中，首先设置<code>var _that = this;</code>，这里的<code>this</code>是调用func2的对象<code>bar</code>，为了防止在<code>func2</code>中的<code>setTimeout</code>被<code>window</code>调用而导致的在<code>setTimeout</code>中的<code>this</code>为<code>window</code>。将<code>this(指向变量bar)</code>赋值给一个变量<code>_that</code>，这样，在<code>func2</code>中使用<code>_that</code>就是指向对象<code>bar</code>了。</p>\n<h3 id=\"使用-apply-、call-、bind\"><a href=\"#使用-apply-、call-、bind\" class=\"headerlink\" title=\"使用 apply()、call()、bind()\"></a>使用 <code>apply()</code>、<code>call()</code>、<code>bind()</code></h3><p>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>函数也是可以改变<code>this</code>的指向，先来看一下是怎么实现的：</p>\n<h4 id=\"使用apply\"><a href=\"#使用apply\" class=\"headerlink\" title=\"使用apply()\"></a>使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><em><code>apply()</code></em></a></h4><p>来看看MDN对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>的用法定义：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或类似数组对象）提供的参数</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">apply</span>(<span class=\"params\">thisArg, [argsArray]</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例11：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.apply()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1(); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">    &#125;.apply(bar), <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用call\"><a href=\"#使用call\" class=\"headerlink\" title=\"使用call()\"></a>使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><em><code>call()</code></em></a></h4><p>来看看MDN对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>的用法定义：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">call</span>(<span class=\"params\">thisArg, arg1, arg2, arg3, ar4, ...</span>);</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例子12：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.call()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">    &#125;.call(bar), <span class=\"number\">100</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用bind\"><a href=\"#使用bind\" class=\"headerlink\" title=\"使用bind()\"></a>使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><em><code>bind()</code></em></a></h4><p>来看看MDN对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>的用法定义：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">bind</span>(<span class=\"params\">thisArg[, arg1[, arg2[, ...]]]</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例子13</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.bind()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">    &#125;.bind(bar)(), <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaScript-中-call-、apply-、bind-的区别？\"><a href=\"#JavaScript-中-call-、apply-、bind-的区别？\" class=\"headerlink\" title=\"JavaScript 中 call()、apply()、bind()的区别？\"></a>JavaScript 中 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>的区别？</h2><p>现在，我们都知道使用<code>call()</code>、<code>apply()</code>、<code>bind()</code>函数都可以改变JavaScript中<code>this</code>的指向，但是这三个函数稍有不同。</p>\n<p>在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>MDN</code></a>中定义<code>apply()</code>如下：</p>\n<blockquote>\n<p><code>apply()</code> 方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或类似数组对象）提供的参数</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">apply</span>(<span class=\"params\">thisArg, [argsArray]</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>参数：</strong></p>\n<blockquote>\n<p><code>thisArg</code>(必须) 在 <code>func</code> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p>\n</blockquote>\n<blockquote>\n<p><code>argsArray</code>(可选) 一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <code>null</code> 或  <code>undefined</code>，则表示不需要传入任何参数。从<code>ECMAScript 5</code>开始可以使用类数组对象。</p>\n</blockquote>\n<h3 id=\"apply-和-call-的区别\"><a href=\"#apply-和-call-的区别\" class=\"headerlink\" title=\"apply() 和 call() 的区别\"></a><code>apply()</code> 和 <code>call()</code> 的区别</h3><p><code>apply()</code> 和 <code>call()</code> 基本类似，他们的区别只是传入的参数不同</p>\n<p>call()的语法为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">call</span>(<span class=\"params\">thisArg, arg1, arg2, ...</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>apply()</code>和<code>call()</code>的区别就是：</p>\n<blockquote>\n<p><strong><code>call()</code>方法接受的是若干个参数列表，而<code>apply()</code>接收的是一个包含多个参数的数组。</strong></p>\n</blockquote>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例子14：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.apply()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar.fn;</span><br><span class=\"line\">b.apply(bar, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>例子15：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.call()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar.fn;</span><br><span class=\"line\">b.call(bar, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bind-和apply-、call-的区别\"><a href=\"#bind-和apply-、call-的区别\" class=\"headerlink\" title=\"bind()和apply()、call()的区别\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>的区别</h3><p>现在，将刚刚的例子使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>试一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.bind()()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar.fn;</span><br><span class=\"line\">b.bind(bar, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 到这一步并没有输出，这是因为bind()方法创建了一个新函数，需要进一步调用才能执行</span></span><br></pre></td></tr></table></figure>\n\n<p>会发现并没有输出，这是为什么呢，我们来看一下 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>MDN</code></a> 上的文档说明：</p>\n<blockquote>\n<p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>\n</blockquote>\n<p>所以我们可以看出，<code>bind()</code> 是创建一个新的函数，我们必须要手动去调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar.fn; <span class=\"comment\">// 到这一步并没有输出，这是因为bind()方法创建了一个新函数，需要进一步调用才能执行</span></span><br><span class=\"line\">b.bind(bar, <span class=\"number\">1</span>, <span class=\"number\">2</span>)(); <span class=\"comment\">// 调用bind()方法创建的新函数，并正确输出了结果：3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"JavaScript-中的函数调用方式\"><a href=\"#JavaScript-中的函数调用方式\" class=\"headerlink\" title=\"JavaScript 中的函数调用方式\"></a>JavaScript 中的函数调用方式</h2><p><strong>例7：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  innerFunction();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunction</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure>\n\n<p><strong>例8：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Uncaught TypeError: this.func1 is not a function</span></span><br><span class=\"line\"><span class=\"comment\">// 这里调用setTimeout的是全局对象，this指向的也是全局对象，而全局对象中并没有`func1()`这个函数，所以这里会报错</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数调用的方法一共有 4 种</strong></p>\n<blockquote>\n<p><strong>作为一个函数调用</strong><br><strong>函数作为方法调用</strong><br><strong>使用构造函数调用函数</strong><br><strong>作为函数方法调用函数（<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>）</strong></p>\n</blockquote>\n<h3 id=\"作为函数调用\"><a href=\"#作为函数调用\" class=\"headerlink\" title=\"作为函数调用\"></a>作为函数调用</h3><p><strong>比如上面的例子1：</strong></p>\n<p><strong>例1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// non-strict mode</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inner:'</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// inner: [object Window]</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outer:'</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// outer: [object Window]</span></span><br></pre></td></tr></table></figure>\n\n<p>这是一个简单的函数，在浏览器运行环境中的非严格模式(non-strict mode)默认是属于全局对象 <code>window</code> 的，在严格模式(strict mode)，this指向的就是 <code>undefined</code>。<strong>这是一个全局的函数，很容易产生命名冲突，不建议这样使用。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// strict mode</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo(); <span class=\"comment\">// Uncaught TypeError: Cannot read property 'name' of undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 这里使用的是严格模式，this指向的全局对象，而全局对象没有被定义所以是undefined，所以这里会报错</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数作为方法调用\"><a href=\"#函数作为方法调用\" class=\"headerlink\" title=\"函数作为方法调用\"></a>函数作为方法调用</h3><p>将函数作为对象的方法使用。比如：</p>\n<p><strong>例2：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.fn(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<p>这里定义一个对象<code>foo</code>，对象<code>foo</code>有一个属性(<code>name</code>)和一个方法(<code>fn</code>)。</p>\n<p>然后，对象<code>foo</code>通过<code>.</code>方法调用了其中的<code>fn</code>方法</p>\n<p>还记得那句话<strong>“this永远指向最后调用它的那个对象”</strong>，所以在<code>fn</code>中的<code>this</code>就是指向 <code>foo</code> 的</p>\n<h3 id=\"作为构造函数调用函数\"><a href=\"#作为构造函数调用函数\" class=\"headerlink\" title=\"作为构造函数调用函数\"></a>作为构造函数调用函数</h3><blockquote>\n<p>构造函数：关键字new建一个对象并调用一个函数（这个函数称作构造函数 Constructor）初始化新对象的属性<br>如果函数调用前使用了new运算符，则是调用了构造函数<br>这看起来就像创建了新的函数，但实际上JavaScript函数是重新创建的对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.firstName = arg1;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lastName = arg2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> myFunction(<span class=\"string\">'Li'</span>, <span class=\"string\">'Cherry'</span>);</span><br><span class=\"line\">foo.lastName; <span class=\"comment\">// 'Cherry'</span></span><br></pre></td></tr></table></figure>\n\n<p>new 的过程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> myFunction(<span class=\"string\">'Li'</span>, <span class=\"string\">'Cherry'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> myFunction &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">  obj.__proto__ = myFunction.prototype;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = myFunction.call(obj, <span class=\"string\">'Li'</span>, <span class=\"string\">'Cherry'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span> ? result : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1、创建一个空对象obj；<br>2、将新创建的空对象的隐式原型指向其构造函数的显示原型<br>3、使用<code>call</code>改变<code>this</code>的指向<br>4、如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；<br>如果返回值是一个新对象的话那么直接直接返回该对象。</p>\n<p>可以看到，在new的过程中，使用<code>call</code>改变了this的指向</p>\n<h3 id=\"通过它们的call-和apply-方法间接调用\"><a href=\"#通过它们的call-和apply-方法间接调用\" class=\"headerlink\" title=\"通过它们的call()和apply()方法间接调用\"></a>通过它们的<code>call()</code>和<code>apply()</code>方法间接调用</h3><blockquote>\n<p>JavaScript 中，函数是对象<br>JavaScript 函数有它的属性和方法。<br><code>call()</code>和<code>apply()</code>是预定义的函数方法。两个方法可用于调用函数，两个方法的第一个参数必须是对象本身<br>JavaScript 严格模式（strict mode）下，在调用函数时第一个参数会成为<code>this</code>的值，即使该参数不是一个对象<br>JavaScript 非严格模式（non-strict mode）下，如果第一个参数的值是<code>null</code>或<code>undefined</code>，它将使用全局对象替代。</p>\n</blockquote>\n<p><strong>再来看例子6:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  innerFunction();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>innerFunction()</code>的调用属于第一种调用方式：作为一个函数调用（作为一个函数调用、没有挂载在任何对象上，所以对于没有挂载在任何对象的函数，在非严格模式（non-strict mode）下就是指向window的）</p>\n<p><strong>然后再看一下例7:</strong></p>\n<p><strong>例7：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1()</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// this.func1 is not a function</span></span><br></pre></td></tr></table></figure>\n\n<p>得出结论，可以简单理解为：<strong>匿名函数的<code>this</code>永远指向<code>window</code></strong></p>\n<p>在这之前，我们得出结论：<strong><code>this</code>永远指向最后调用它的那个对象</strong>，那么去找最后调用匿名函数的对象，<br>但是因为匿名函数没有名字，所以没有办法被其他对象调用匿名函数的。所以：<strong>匿名函数的 <code>this</code> 永远指向 <code>window</code></strong></p>\n<p>那么问题来了，匿名函数是如何被定义的？匿名函数是自执行的，就是在匿名函数后面加<code>()</code>让其自执行。其次就是虽然匿名函数不能被其他对象调用，但是可以被其他函数调用，比如<strong>例7</strong>中的<code>setTimeout</code></p>\n<hr>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><blockquote>\n<p>在严格版中的默认的<code>this</code>不再是<code>window</code>，而是<code>undefined。</code></p>\n</blockquote>\n<p><strong>几条判断<code>this</code>指向的方法：</strong></p>\n<p>1、查看函数在哪被调用<br>2、点左侧有没有对象？如果有，它就是 “<code>this</code>” 的引用。如果没有，继续往下。<br>3、该函数是不是用 “<code>call</code>”、“<code>apply</code>” 或者 “<code>bind</code>” 调用的？如果是，它会显式地指明 “<code>this</code>” 的引用。如果没有，继续往下。<br>4、该函数是不是用 “<code>new</code>” 调用的？如果是，“<code>this</code>” 指向的就是 <code>JavaScript</code> 解释器新创建的对象。如果没有，继续往下。<br>5、是否在“严格模式”下？如果是，“<code>this</code>” 就是 <code>undefined</code>，如果不是<br>6、JavaScript，“<code>this</code>” 会指向 “<code>window</code>” 对象</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://juejin.im/post/59bfe84351882531b730bac2\" target=\"_blank\" rel=\"noopener\">稀土掘金-this、apply、call、bind</a><br><a href=\"https://www.ruanyifeng.com/blog/2018/06/javascript-this.html\" target=\"_blank\" rel=\"noopener\">阮一峰-JavaScript 的 this 原理</a><br><a href=\"https://note.youdao.com/ynoteshare1/index.html?id=b2fab3b044aa90033395df0c8c9ca3a4&type=note\" target=\"_blank\" rel=\"noopener\">javascript this指向</a><br><a href=\"https://www.freecodecamp.org/news/how-to-use-the-apply-call-and-bind-methods-in-javascript-80a8e6096a90/\" target=\"_blank\" rel=\"noopener\"><em>How to use the apply(), call(), and bind() methods in JavaScript</em></a><br><a href=\"https://www.taniarascia.com/this-bind-call-apply-javascript/\" target=\"_blank\" rel=\"noopener\"><em>Understanding This, Bind, Call, and Apply in JavaScript</em></a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><em>Function.prototype.apply()</em></a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><em>Function.prototype.call()</em></a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><em>Function.prototype.bind()</em></a><br><a href=\"https://juejin.im/post/5b9f176b6fb9a05d3827d03f\" target=\"_blank\" rel=\"noopener\"><em>理解 JavaScript 中的 this、call、apply 和 bind</em></a><br><a href=\"https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/\" target=\"_blank\" rel=\"noopener\"><em>Understanding the “this” keyword, call, apply, and bind in JavaScript</em></a><br><a href=\"https://juejin.im/post/5c876ba96fb9a049ae08bc63\" target=\"_blank\" rel=\"noopener\"><em>JavaScript 之 this 指南</em></a><br><a href=\"https://zhuanlan.zhihu.com/p/71553017\" target=\"_blank\" rel=\"noopener\"><em>javascript 基础之 call, apply, bind</em></a><br><a href=\"https://www.jianshu.com/p/00dc4ad9b83f\" target=\"_blank\" rel=\"noopener\"><em>JavaScript中的call、apply、bind深入理解</em></a><br><a href=\"https://juejin.im/post/5c813aa5f265da2dd94cd7c2\" target=\"_blank\" rel=\"noopener\"><em>彻底弄清 this call apply bind 以及原生实现</em></a><br><a href=\"https://juejin.im/post/5c8617d86fb9a049e93d8e4a\" target=\"_blank\" rel=\"noopener\"><em>如何在 JavaScript 中使用 apply()，call()，bind()</em></a><br><a href=\"https://www.runoob.com/js/js-function-invocation.html\" target=\"_blank\" rel=\"noopener\">JavaScript 函数调用</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MDN\"><a href=\"#MDN\" class=\"headerlink\" title=\"MDN\"></a>MDN</h2><blockquote>\n<p><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><code>JavaScript this</code></a></em><br><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>JavaScript Function.prototype.call()</code></a></em><br><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>JavaScript Function.prototype.apply()</code></a></em><br><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>JavaScript Function.prototype.bind()</code></a></em></p>\n</blockquote>\n<h2 id=\"this的概念理解\"><a href=\"#this的概念理解\" class=\"headerlink\" title=\"this的概念理解\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><em><code>this</code>的概念</em></a>理解</h2><blockquote>\n<p><strong><em><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><code>this</code></a> 永远指向一个对象，并且指向最后调用它的那个对象；</em></strong><br><strong><em><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><code>this</code></a> 的指向完全取决于函数调用的位置；</em></strong></p>\n</blockquote>\n<h2 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\"><em><code>this</code></em></a>的指向</h2><blockquote>\n<p><em>在绝大多数情况下，函数的调用方式决定了<code>this</code>的值。<code>this</code>不能在执行期间被赋值，并且在每次函数被调用时this的值也可能会不同。ES5引入了bind方法来设置函数的this值，而不用考虑函数如何被调用的，ES2015 引入了支持this词法解析的箭头函数（它在闭合的执行环境内设置this的值）。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">(来自MDN)</a></em></p>\n</blockquote>\n<!-- > **`this` 永远指向最后调用它的那个对象**\n> **`this` 永远指向一个对象；**\n> **`this` 的指向完全取决于函数调用的位置；**\n> **`this` 会根据运行环境的改变而改变，同时，函数中的`this`也只能在运行时才能最终确定运行环境；**\n> **如果返回值是一个对象，那么`this`指向的就是那个返回的对象，如果返回值不是一个对象那么`this`还是指向函数的实例。** -->\n<h3 id=\"全局环境-Global-context\"><a href=\"#全局环境-Global-context\" class=\"headerlink\" title=\"全局环境(Global context)\"></a>全局环境(Global context)</h3><blockquote>\n<p><em>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）<code>this</code> 都指向全局对象 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">(来自MDN)</a></em></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conosole.log(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">a = <span class=\"number\">37</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 37</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.b = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数（运行内）环境-Function-context\"><a href=\"#函数（运行内）环境-Function-context\" class=\"headerlink\" title=\"函数（运行内）环境(Function context)\"></a>函数（运行内）环境(Function context)</h3><blockquote>\n<p><em>在函数内部，<code>this</code>的值取决于函数被调用的方式。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">(来自MDN)</a></em></p>\n</blockquote>\n<h4 id=\"简单调用\"><a href=\"#简单调用\" class=\"headerlink\" title=\"简单调用\"></a>简单调用</h4><p><strong>非严格模式下：</strong><br>因为下面的代码不在严格模式下，且 <code>this</code> 的值不是由该调用设置的，所以 <code>this</code> 的值默认指向全局对象(<code>window</code>)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// non-strict mode</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 在浏览器中：</span></span><br><span class=\"line\">func1() === <span class=\"built_in\">window</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 在node中：</span></span><br><span class=\"line\">func1() === global; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>严格模式下：</strong><br><code>this</code>将保持他进入执行环境时的值，所以下面的<code>this</code>将会默认为<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// strict mode</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">func2 === <span class=\"literal\">undefined</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>所以，可以得出结论在严格模式下，如果 <code>this</code> 没有被执行环境（execution context）定义，那它将保持为 <code>undefined</code>。</p>\n<p><strong>首先，来看下面一个简单的例子：</strong></p>\n<p><strong>例 1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inner: '</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// [Object Window]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outer: '</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// [Object Window]</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么这里<code>console.log</code>是 windowsName？</p>\n<p>因为<strong>“<code>this</code>永远指向最后调用它的那个对象”</strong>，调用<code>foo</code>的地方<code>foo()</code>，前面没有调用的对象那么就是指向全局对象 <code>Object window</code>，相当于<code>window.foo()</code></p>\n<p>这里没有使用严格模式，如果使用严格模式的情况下，全局对象就是<code>undefined</code>，那么就会报错<code>Uncaught TypeError: Cannot read property &#39;name&#39; of undefined</code></p>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例 2：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use Strict Mode</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inner: '</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// inner: undefined</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Uncaught TypeError: Cannot read property 'name' of undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outer: '</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// [Object Window]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>再看下面的例子：</strong></p>\n<p><strong>例 3：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.fn(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，函数 <code>fn</code> 是对象 <code>bar</code> 调用的，所以打印的值就是 <code>bar</code> 中的 <code>name</code> 的值。</p>\n<p><strong>基于上面的例子，再做个改动：</strong></p>\n<p><strong>例 4：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.bar.fn(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<p>这里<code>console.log</code>为<code>Br3ad</code>，最后调用它的对象是<code>bar</code>,还是因为<strong>“<code>this</code> 永远指向最后调用它的那个对象”</strong></p>\n<p><strong>再来看下面这个例子：</strong></p>\n<p><strong>例 5：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// name: 'Br3ad',</span></span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.bar.fn(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么<code>console.log</code>会打印<code>undefined</code>呢？</p>\n<p>因为，如刚刚所描述的那样，调用<code>fn</code>的是<code>bar</code>这个对象，也就是说<code>fn</code>内部的<code>this</code>是对象<code>bar</code>，而对象<code>bar</code>中并没有对<code>name</code>字段进行定义，所以<code>console.log</code>的<code>this.name</code>的值为<code>undefined</code>。</p>\n<p>这个例子还是印证了刚才的结论：<strong>this 永远指向最后调用它的那个对象</strong>，因为最后调用<code>fn</code>的对象是<code>bar</code>，所以就算<code>bar</code>中没有<code>name</code>这个属性，也不会继续向上一个对象寻找<code>this.name</code>，而是直接输出<code>undefined</code>。</p>\n<p><strong>再来看一个复杂点的例子：</strong></p>\n<p><strong>例 6：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = bar.fn;</span><br><span class=\"line\">fun(); <span class=\"comment\">// windowsName</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么这里<code>console.log</code>打印出的不是<code>Br3ad</code>？因为虽然<code>bar</code>对象的<code>fn</code>方法赋值给了变量<code>fun</code>了，但是没有调用，回到之前我们的结论：<strong>“this 永远指向最后调用它的那个对象”</strong>，由于刚刚的<code>fun</code>并没有调用，所以<code>fn()</code>最后仍然是被<code>window</code>调用的。所以这里<code>this</code>指向的也就是<code>window</code>。</p>\n<p>以上的例子，不难发现<code>this</code>的指向并不是在创建的时候就可以确定的，在 <code>es5</code> 中，永远是：<strong><code>this</code> 永远指向最后调用它的那个对象</strong></p>\n<p><strong>再来看一个例子：</strong></p>\n<p><strong>例 7：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  innerFunction();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn(); <span class=\"comment\">// windowsName</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎么改变-this-的指向\"><a href=\"#怎么改变-this-的指向\" class=\"headerlink\" title=\"怎么改变 this 的指向?\"></a>怎么改变 <code>this</code> 的指向?</h2><p>改变this的指向主要有以下几种方法：</p>\n<ul>\n<li>使用<code>ES6</code>的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\"><code>箭头函数(Arrow function expressions)</code></a></li>\n<li>在函数内部使用<code>_this = this</code></li>\n<li>使用<code>apply()</code>、<code>call()</code>、<code>bind()</code></li>\n<li><code>new</code> 实例化一个对象</li>\n</ul>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例子8：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);  <span class=\"comment\">// this.func1 is not a function</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// this.func1 is not a function</span></span><br></pre></td></tr></table></figure>\n\n<p>在不使用箭头函数的情况下，是会报错的，因为最后调用<code>setTimeout</code>的对象是<code>window</code>，但是在<code>window</code>中并没有<code>func1</code>函数。</p>\n<p>在改变 <code>this</code> 指向这一节将把这个例子作为 <code>Demo</code> 进行改造</p>\n<p>那么，箭头函数是如何实现的？</p>\n<h3 id=\"箭头函数（Arrow-function-expressions）\"><a href=\"#箭头函数（Arrow-function-expressions）\" class=\"headerlink\" title=\"箭头函数（Arrow function expressions）\"></a>箭头函数（Arrow function expressions）</h3><hr>\n<p><strong>箭头函数的 <code>this</code> 始终指向函数定义时的 <code>this</code>，而非执行时。</strong>记住：“箭头函数没有单独的<code>this</code>绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 <code>this</code> 绑定的是最近一层非箭头函数的 <code>this</code>，否则，<code>this</code> 为 <code>undefined</code>(箭头函数会从自己的作用域链的上一层继承<code>this</code>)”。</p>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例9：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1(); <span class=\"comment\">// 箭头函数没有单独的this绑定，必须通过查找作用域链来决定其值</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在函数内部使用-that-this\"><a href=\"#在函数内部使用-that-this\" class=\"headerlink\" title=\"在函数内部使用_that = this\"></a>在函数内部使用<code>_that = this</code></h3><hr>\n<p>如果不使用ES6，那么这种方式应该是最简单的不会出错的方式，先将调用这个函数的对象保存在变量<code>_this</code>中，然后在函数中都是用这个<code>_that</code>，这样<code>_that</code>就不会改变了。</p>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例10：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 这里把对象bar的作用域保存起来给一个变量_that</span></span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      _that.func1();</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<p>这个例子中，在<code>func2</code>中，首先设置<code>var _that = this;</code>，这里的<code>this</code>是调用func2的对象<code>bar</code>，为了防止在<code>func2</code>中的<code>setTimeout</code>被<code>window</code>调用而导致的在<code>setTimeout</code>中的<code>this</code>为<code>window</code>。将<code>this(指向变量bar)</code>赋值给一个变量<code>_that</code>，这样，在<code>func2</code>中使用<code>_that</code>就是指向对象<code>bar</code>了。</p>\n<h3 id=\"使用-apply-、call-、bind\"><a href=\"#使用-apply-、call-、bind\" class=\"headerlink\" title=\"使用 apply()、call()、bind()\"></a>使用 <code>apply()</code>、<code>call()</code>、<code>bind()</code></h3><p>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>函数也是可以改变<code>this</code>的指向，先来看一下是怎么实现的：</p>\n<h4 id=\"使用apply\"><a href=\"#使用apply\" class=\"headerlink\" title=\"使用apply()\"></a>使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><em><code>apply()</code></em></a></h4><p>来看看MDN对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>的用法定义：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或类似数组对象）提供的参数</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">apply</span>(<span class=\"params\">thisArg, [argsArray]</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例11：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.apply()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1(); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">    &#125;.apply(bar), <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用call\"><a href=\"#使用call\" class=\"headerlink\" title=\"使用call()\"></a>使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><em><code>call()</code></em></a></h4><p>来看看MDN对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>的用法定义：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">call</span>(<span class=\"params\">thisArg, arg1, arg2, arg3, ar4, ...</span>);</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例子12：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.call()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">    &#125;.call(bar), <span class=\"number\">100</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用bind\"><a href=\"#使用bind\" class=\"headerlink\" title=\"使用bind()\"></a>使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><em><code>bind()</code></em></a></h4><p>来看看MDN对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>的用法定义：</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">bind</span>(<span class=\"params\">thisArg[, arg1[, arg2[, ...]]]</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例子13</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.bind()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">    &#125;.bind(bar)(), <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaScript-中-call-、apply-、bind-的区别？\"><a href=\"#JavaScript-中-call-、apply-、bind-的区别？\" class=\"headerlink\" title=\"JavaScript 中 call()、apply()、bind()的区别？\"></a>JavaScript 中 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>的区别？</h2><p>现在，我们都知道使用<code>call()</code>、<code>apply()</code>、<code>bind()</code>函数都可以改变JavaScript中<code>this</code>的指向，但是这三个函数稍有不同。</p>\n<p>在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>MDN</code></a>中定义<code>apply()</code>如下：</p>\n<blockquote>\n<p><code>apply()</code> 方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或类似数组对象）提供的参数</p>\n</blockquote>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">apply</span>(<span class=\"params\">thisArg, [argsArray]</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>参数：</strong></p>\n<blockquote>\n<p><code>thisArg</code>(必须) 在 <code>func</code> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p>\n</blockquote>\n<blockquote>\n<p><code>argsArray</code>(可选) 一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <code>null</code> 或  <code>undefined</code>，则表示不需要传入任何参数。从<code>ECMAScript 5</code>开始可以使用类数组对象。</p>\n</blockquote>\n<h3 id=\"apply-和-call-的区别\"><a href=\"#apply-和-call-的区别\" class=\"headerlink\" title=\"apply() 和 call() 的区别\"></a><code>apply()</code> 和 <code>call()</code> 的区别</h3><p><code>apply()</code> 和 <code>call()</code> 基本类似，他们的区别只是传入的参数不同</p>\n<p>call()的语法为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">call</span>(<span class=\"params\">thisArg, arg1, arg2, ...</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>apply()</code>和<code>call()</code>的区别就是：</p>\n<blockquote>\n<p><strong><code>call()</code>方法接受的是若干个参数列表，而<code>apply()</code>接收的是一个包含多个参数的数组。</strong></p>\n</blockquote>\n<p><strong>请看下面的例子：</strong></p>\n<p><strong>例子14：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.apply()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar.fn;</span><br><span class=\"line\">b.apply(bar, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>例子15：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.call()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar.fn;</span><br><span class=\"line\">b.call(bar, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bind-和apply-、call-的区别\"><a href=\"#bind-和apply-、call-的区别\" class=\"headerlink\" title=\"bind()和apply()、call()的区别\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>的区别</h3><p>现在，将刚刚的例子使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>bind()</code></a>试一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function.bind()()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar.fn;</span><br><span class=\"line\">b.bind(bar, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 到这一步并没有输出，这是因为bind()方法创建了一个新函数，需要进一步调用才能执行</span></span><br></pre></td></tr></table></figure>\n\n<p>会发现并没有输出，这是为什么呢，我们来看一下 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><code>MDN</code></a> 上的文档说明：</p>\n<blockquote>\n<p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>\n</blockquote>\n<p>所以我们可以看出，<code>bind()</code> 是创建一个新的函数，我们必须要手动去调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b); <span class=\"comment\">// 3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = bar.fn; <span class=\"comment\">// 到这一步并没有输出，这是因为bind()方法创建了一个新函数，需要进一步调用才能执行</span></span><br><span class=\"line\">b.bind(bar, <span class=\"number\">1</span>, <span class=\"number\">2</span>)(); <span class=\"comment\">// 调用bind()方法创建的新函数，并正确输出了结果：3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"JavaScript-中的函数调用方式\"><a href=\"#JavaScript-中的函数调用方式\" class=\"headerlink\" title=\"JavaScript 中的函数调用方式\"></a>JavaScript 中的函数调用方式</h2><p><strong>例7：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  innerFunction();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunction</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure>\n\n<p><strong>例8：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// Uncaught TypeError: this.func1 is not a function</span></span><br><span class=\"line\"><span class=\"comment\">// 这里调用setTimeout的是全局对象，this指向的也是全局对象，而全局对象中并没有`func1()`这个函数，所以这里会报错</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数调用的方法一共有 4 种</strong></p>\n<blockquote>\n<p><strong>作为一个函数调用</strong><br><strong>函数作为方法调用</strong><br><strong>使用构造函数调用函数</strong><br><strong>作为函数方法调用函数（<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a>）</strong></p>\n</blockquote>\n<h3 id=\"作为函数调用\"><a href=\"#作为函数调用\" class=\"headerlink\" title=\"作为函数调用\"></a>作为函数调用</h3><p><strong>比如上面的例子1：</strong></p>\n<p><strong>例1：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// non-strict mode</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'inner:'</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// inner: [object Window]</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'outer:'</span> + <span class=\"keyword\">this</span>); <span class=\"comment\">// outer: [object Window]</span></span><br></pre></td></tr></table></figure>\n\n<p>这是一个简单的函数，在浏览器运行环境中的非严格模式(non-strict mode)默认是属于全局对象 <code>window</code> 的，在严格模式(strict mode)，this指向的就是 <code>undefined</code>。<strong>这是一个全局的函数，很容易产生命名冲突，不建议这样使用。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// strict mode</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo(); <span class=\"comment\">// Uncaught TypeError: Cannot read property 'name' of undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 这里使用的是严格模式，this指向的全局对象，而全局对象没有被定义所以是undefined，所以这里会报错</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数作为方法调用\"><a href=\"#函数作为方法调用\" class=\"headerlink\" title=\"函数作为方法调用\"></a>函数作为方法调用</h3><p>将函数作为对象的方法使用。比如：</p>\n<p><strong>例2：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// Br3ad</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.fn(); <span class=\"comment\">// Br3ad</span></span><br></pre></td></tr></table></figure>\n\n<p>这里定义一个对象<code>foo</code>，对象<code>foo</code>有一个属性(<code>name</code>)和一个方法(<code>fn</code>)。</p>\n<p>然后，对象<code>foo</code>通过<code>.</code>方法调用了其中的<code>fn</code>方法</p>\n<p>还记得那句话<strong>“this永远指向最后调用它的那个对象”</strong>，所以在<code>fn</code>中的<code>this</code>就是指向 <code>foo</code> 的</p>\n<h3 id=\"作为构造函数调用函数\"><a href=\"#作为构造函数调用函数\" class=\"headerlink\" title=\"作为构造函数调用函数\"></a>作为构造函数调用函数</h3><blockquote>\n<p>构造函数：关键字new建一个对象并调用一个函数（这个函数称作构造函数 Constructor）初始化新对象的属性<br>如果函数调用前使用了new运算符，则是调用了构造函数<br>这看起来就像创建了新的函数，但实际上JavaScript函数是重新创建的对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.firstName = arg1;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lastName = arg2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> myFunction(<span class=\"string\">'Li'</span>, <span class=\"string\">'Cherry'</span>);</span><br><span class=\"line\">foo.lastName; <span class=\"comment\">// 'Cherry'</span></span><br></pre></td></tr></table></figure>\n\n<p>new 的过程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> myFunction(<span class=\"string\">'Li'</span>, <span class=\"string\">'Cherry'</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> myFunction &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">  obj.__proto__ = myFunction.prototype;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = myFunction.call(obj, <span class=\"string\">'Li'</span>, <span class=\"string\">'Cherry'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span> ? result : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1、创建一个空对象obj；<br>2、将新创建的空对象的隐式原型指向其构造函数的显示原型<br>3、使用<code>call</code>改变<code>this</code>的指向<br>4、如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；<br>如果返回值是一个新对象的话那么直接直接返回该对象。</p>\n<p>可以看到，在new的过程中，使用<code>call</code>改变了this的指向</p>\n<h3 id=\"通过它们的call-和apply-方法间接调用\"><a href=\"#通过它们的call-和apply-方法间接调用\" class=\"headerlink\" title=\"通过它们的call()和apply()方法间接调用\"></a>通过它们的<code>call()</code>和<code>apply()</code>方法间接调用</h3><blockquote>\n<p>JavaScript 中，函数是对象<br>JavaScript 函数有它的属性和方法。<br><code>call()</code>和<code>apply()</code>是预定义的函数方法。两个方法可用于调用函数，两个方法的第一个参数必须是对象本身<br>JavaScript 严格模式（strict mode）下，在调用函数时第一个参数会成为<code>this</code>的值，即使该参数不是一个对象<br>JavaScript 非严格模式（non-strict mode）下，如果第一个参数的值是<code>null</code>或<code>undefined</code>，它将使用全局对象替代。</p>\n</blockquote>\n<p><strong>再来看例子6:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Br3ad'</span>;</span><br><span class=\"line\">  innerFunction();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// windowsName</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>innerFunction()</code>的调用属于第一种调用方式：作为一个函数调用（作为一个函数调用、没有挂载在任何对象上，所以对于没有挂载在任何对象的函数，在非严格模式（non-strict mode）下就是指向window的）</p>\n<p><strong>然后再看一下例7:</strong></p>\n<p><strong>例7：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'windowsName'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Br3ad'</span>,</span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.func1()</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bar.func2(); <span class=\"comment\">// this.func1 is not a function</span></span><br></pre></td></tr></table></figure>\n\n<p>得出结论，可以简单理解为：<strong>匿名函数的<code>this</code>永远指向<code>window</code></strong></p>\n<p>在这之前，我们得出结论：<strong><code>this</code>永远指向最后调用它的那个对象</strong>，那么去找最后调用匿名函数的对象，<br>但是因为匿名函数没有名字，所以没有办法被其他对象调用匿名函数的。所以：<strong>匿名函数的 <code>this</code> 永远指向 <code>window</code></strong></p>\n<p>那么问题来了，匿名函数是如何被定义的？匿名函数是自执行的，就是在匿名函数后面加<code>()</code>让其自执行。其次就是虽然匿名函数不能被其他对象调用，但是可以被其他函数调用，比如<strong>例7</strong>中的<code>setTimeout</code></p>\n<hr>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><blockquote>\n<p>在严格版中的默认的<code>this</code>不再是<code>window</code>，而是<code>undefined。</code></p>\n</blockquote>\n<p><strong>几条判断<code>this</code>指向的方法：</strong></p>\n<p>1、查看函数在哪被调用<br>2、点左侧有没有对象？如果有，它就是 “<code>this</code>” 的引用。如果没有，继续往下。<br>3、该函数是不是用 “<code>call</code>”、“<code>apply</code>” 或者 “<code>bind</code>” 调用的？如果是，它会显式地指明 “<code>this</code>” 的引用。如果没有，继续往下。<br>4、该函数是不是用 “<code>new</code>” 调用的？如果是，“<code>this</code>” 指向的就是 <code>JavaScript</code> 解释器新创建的对象。如果没有，继续往下。<br>5、是否在“严格模式”下？如果是，“<code>this</code>” 就是 <code>undefined</code>，如果不是<br>6、JavaScript，“<code>this</code>” 会指向 “<code>window</code>” 对象</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://juejin.im/post/59bfe84351882531b730bac2\" target=\"_blank\" rel=\"noopener\">稀土掘金-this、apply、call、bind</a><br><a href=\"https://www.ruanyifeng.com/blog/2018/06/javascript-this.html\" target=\"_blank\" rel=\"noopener\">阮一峰-JavaScript 的 this 原理</a><br><a href=\"https://note.youdao.com/ynoteshare1/index.html?id=b2fab3b044aa90033395df0c8c9ca3a4&type=note\" target=\"_blank\" rel=\"noopener\">javascript this指向</a><br><a href=\"https://www.freecodecamp.org/news/how-to-use-the-apply-call-and-bind-methods-in-javascript-80a8e6096a90/\" target=\"_blank\" rel=\"noopener\"><em>How to use the apply(), call(), and bind() methods in JavaScript</em></a><br><a href=\"https://www.taniarascia.com/this-bind-call-apply-javascript/\" target=\"_blank\" rel=\"noopener\"><em>Understanding This, Bind, Call, and Apply in JavaScript</em></a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><em>Function.prototype.apply()</em></a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><em>Function.prototype.call()</em></a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\"><em>Function.prototype.bind()</em></a><br><a href=\"https://juejin.im/post/5b9f176b6fb9a05d3827d03f\" target=\"_blank\" rel=\"noopener\"><em>理解 JavaScript 中的 this、call、apply 和 bind</em></a><br><a href=\"https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/\" target=\"_blank\" rel=\"noopener\"><em>Understanding the “this” keyword, call, apply, and bind in JavaScript</em></a><br><a href=\"https://juejin.im/post/5c876ba96fb9a049ae08bc63\" target=\"_blank\" rel=\"noopener\"><em>JavaScript 之 this 指南</em></a><br><a href=\"https://zhuanlan.zhihu.com/p/71553017\" target=\"_blank\" rel=\"noopener\"><em>javascript 基础之 call, apply, bind</em></a><br><a href=\"https://www.jianshu.com/p/00dc4ad9b83f\" target=\"_blank\" rel=\"noopener\"><em>JavaScript中的call、apply、bind深入理解</em></a><br><a href=\"https://juejin.im/post/5c813aa5f265da2dd94cd7c2\" target=\"_blank\" rel=\"noopener\"><em>彻底弄清 this call apply bind 以及原生实现</em></a><br><a href=\"https://juejin.im/post/5c8617d86fb9a049e93d8e4a\" target=\"_blank\" rel=\"noopener\"><em>如何在 JavaScript 中使用 apply()，call()，bind()</em></a><br><a href=\"https://www.runoob.com/js/js-function-invocation.html\" target=\"_blank\" rel=\"noopener\">JavaScript 函数调用</a></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcctyvrr0001m5snb42m8hg9","category_id":"ckcctyvsm0007m5sngoe82plg","_id":"ckcctyvu2000km5sne6722ujh"},{"post_id":"ckcctyvua000rm5sn9mrv95yk","category_id":"ckcctyvsm0007m5sngoe82plg","_id":"ckcctyvux0010m5snhbu1ajkt"},{"post_id":"ckcctyvve0018m5sne8peewk4","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvw0001lm5sn3t975lxd"},{"post_id":"ckcctyvve0018m5sne8peewk4","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvw5001qm5sn6phnaow3"},{"post_id":"ckcctyvtz000jm5sn14pnfv63","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvwc001tm5sn50f66v3y"},{"post_id":"ckcctyvtz000jm5sn14pnfv63","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvwf001xm5sn0yg40wem"},{"post_id":"ckcctyvsi0006m5snfyn69380","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvwl0020m5sn2w798bgd"},{"post_id":"ckcctyvsi0006m5snfyn69380","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvwr0023m5sn91th1d6t"},{"post_id":"ckcctyvvv001im5sn28491gup","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvx00026m5snccqfhdtp"},{"post_id":"ckcctyvvv001im5sn28491gup","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvx20028m5snextw9r0n"},{"post_id":"ckcctyvu7000qm5snclv3fc6d","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvx4002am5sn4cvpedqt"},{"post_id":"ckcctyvu7000qm5snclv3fc6d","category_id":"ckcctyvwc001um5sngfe811lg","_id":"ckcctyvxa002cm5sngft3btvo"},{"post_id":"ckcctyvss0009m5snclqp7i94","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvxb002em5sn4z805q34"},{"post_id":"ckcctyvss0009m5snclqp7i94","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvxd002hm5snh29b8nkx"},{"post_id":"ckcctyvuj000um5snaoci922g","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvxe002km5sn6gls2f03"},{"post_id":"ckcctyvuj000um5snaoci922g","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvxg002nm5sn0a9s4lan"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvxi002pm5sn16268spf"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvxm002tm5snep5jddx3"},{"post_id":"ckcctyvur000xm5sn82ah28fd","category_id":"ckcctyvxc002fm5snde1ucoc2","_id":"ckcctyvxn002vm5snfxrjdevz"},{"post_id":"ckcctyvuo000vm5snge631zev","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvxr002ym5sngb7paytl"},{"post_id":"ckcctyvuo000vm5snge631zev","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvxs002zm5sngeal3uaf"},{"post_id":"ckcctyvtn000fm5sner013smn","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvxv0032m5snhq0z7xp2"},{"post_id":"ckcctyvtn000fm5sner013smn","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvxv0033m5sn1m0xf4nl"},{"post_id":"ckcctyvuv000zm5snex7behqd","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvxy0036m5snc1yu7dop"},{"post_id":"ckcctyvuv000zm5snex7behqd","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvxy0037m5sna7jd68hi"},{"post_id":"ckcctyvuz0012m5sncrv7d577","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvy1003bm5sn67m9asyr"},{"post_id":"ckcctyvuz0012m5sncrv7d577","category_id":"ckcctyvw1001mm5sn51tg7yed","_id":"ckcctyvy8003dm5snfgdf93e3"},{"post_id":"ckcctyvuz0012m5sncrv7d577","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvya003fm5snfwv238cl"},{"post_id":"ckcctyvtr000gm5sn5bfheqcu","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvyb003hm5sn31nbhh7g"},{"post_id":"ckcctyvtr000gm5sn5bfheqcu","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvyd003jm5sn2vehcwat"},{"post_id":"ckcctyvv60016m5sn48h89s8n","category_id":"ckcctyvxc002fm5snde1ucoc2","_id":"ckcctyvye003nm5snckpi2wi8"},{"post_id":"ckcctyvv60016m5sn48h89s8n","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvyg003pm5sng5wug5tq"},{"post_id":"ckcctyvv20014m5sng56z1dqa","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvyh003sm5sne86f1anb"},{"post_id":"ckcctyvv20014m5sng56z1dqa","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyvyj003vm5sn7wn218xq"},{"post_id":"ckcctyvs40003m5sn697dgc1o","category_id":"ckcctyvtl000dm5sn8s1e3du4","_id":"ckcctyvyk003ym5snczut7te6"},{"post_id":"ckcctyvs40003m5sn697dgc1o","category_id":"ckcctyvv50015m5sne2a021od","_id":"ckcctyvym0041m5sn8rqk2zuf"},{"post_id":"ckcctyvs40003m5sn697dgc1o","category_id":"ckcctyvyd003km5sn7qrngvtk","_id":"ckcctyvyo0044m5sn9ihsh9lc"},{"post_id":"ckcctyvvq001em5sn6qbjgdxn","category_id":"ckcctyvyg003qm5sn10k58xrq","_id":"ckcctyvyq0047m5snhx8p0mpg"},{"post_id":"ckcctyvvq001em5sn6qbjgdxn","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvyr004am5sn4h6j8yjw"},{"post_id":"ckcctyvw3001om5sn4j7gc828","category_id":"ckcctyvyj003xm5sn77jjhogi","_id":"ckcctyvys004bm5snhtxu3gvi"},{"post_id":"ckcctyvwd001wm5sn4oem1hia","category_id":"ckcctyvyq0048m5sn830jhsi6","_id":"ckcctyvz0004im5sn2xltdusc"},{"post_id":"ckcctyvwi001zm5sn0eam8h15","category_id":"ckcctyvy9003em5sn4ac42ft6","_id":"ckcctyvzg0053m5sn86ra6o4i"},{"post_id":"ckcctyvwi001zm5sn0eam8h15","category_id":"ckcctyvz2004lm5sn1rjq5gmr","_id":"ckcctyvzh0055m5snacpybrs8"},{"post_id":"ckcctyvwt0025m5sncf6b6bts","category_id":"ckcctyvyy004gm5sncnu1ff1k","_id":"ckcctyvzm0059m5sn2ogn6kez"},{"post_id":"ckcctyvwt0025m5sncf6b6bts","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyvzo005bm5snfr8tblfn"},{"post_id":"ckcctyvwt0025m5sncf6b6bts","category_id":"ckcctyvzc004ym5sn9iaw8sho","_id":"ckcctyvzr005dm5sn58nfdlpx"},{"post_id":"ckcctyvvh0019m5snhzlmdcgo","category_id":"ckcctyvy9003em5sn4ac42ft6","_id":"ckcctyvzs005em5sna3zefhqj"},{"post_id":"ckcctyvvh0019m5snhzlmdcgo","category_id":"ckcctyvz2004lm5sn1rjq5gmr","_id":"ckcctyvzu005hm5sn4jsk0gak"},{"post_id":"ckcctyvvh0019m5snhzlmdcgo","category_id":"ckcctyvzf0051m5sn84du1zjx","_id":"ckcctyvzw005im5sn1hv8dw0m"},{"post_id":"ckcctyvu3000mm5snging2sfi","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyw04005lm5sn48rh1tff"},{"post_id":"ckcctyvu3000mm5snging2sfi","category_id":"ckcctyvw1001mm5sn51tg7yed","_id":"ckcctyw05005mm5sn8pyk9p6u"},{"post_id":"ckcctyvu3000mm5snging2sfi","category_id":"ckcctyvyn0043m5sndvq9b4mu","_id":"ckcctyw05005om5snbl436jxx"},{"post_id":"ckcctyvu3000mm5snging2sfi","category_id":"ckcctyvz6004qm5sn5ui8bmou","_id":"ckcctyw06005pm5sn8sswehcg"},{"post_id":"ckcctyvu3000mm5snging2sfi","category_id":"ckcctyvzi0057m5sn883uccr4","_id":"ckcctyw06005rm5sn4vqmc3rb"},{"post_id":"ckcctyvu3000mm5snging2sfi","category_id":"ckcctyvzu005gm5sn59z2a6tf","_id":"ckcctyw06005sm5sn8ehs62b0"},{"post_id":"ckcctyw3p009wm5sn5hfdaewk","category_id":"ckcctyvsm0007m5sngoe82plg","_id":"ckcctyw3v00a1m5snhfir889j"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","category_id":"ckcctyvxc002fm5snde1ucoc2","_id":"ckcctyw3v00a3m5sn29yp5txm"},{"post_id":"ckcctyw6x00amm5sn2wbq0hia","category_id":"ckcctyvtw000im5sn8mnt72zw","_id":"ckcctyw7000apm5snhcmkhbuj"},{"post_id":"ckcctyw6x00amm5sn2wbq0hia","category_id":"ckcctyvvk001am5sn65b0fz8e","_id":"ckcctyw7100aqm5sn937la1w9"}],"PostTag":[{"post_id":"ckcctyvrr0001m5snb42m8hg9","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyvu2000lm5snhp9l9pxp"},{"post_id":"ckcctyvrr0001m5snb42m8hg9","tag_id":"ckcctyvtj000cm5snc5sb1xfn","_id":"ckcctyvu5000nm5sng47p9kla"},{"post_id":"ckcctyvs40003m5sn697dgc1o","tag_id":"ckcctyvtu000hm5sn5srd56o7","_id":"ckcctyvvp001dm5sngidu49jp"},{"post_id":"ckcctyvs40003m5sn697dgc1o","tag_id":"ckcctyvu6000om5sn07vj2gdk","_id":"ckcctyvvt001gm5sn4omm8bkh"},{"post_id":"ckcctyvs40003m5sn697dgc1o","tag_id":"ckcctyvuj000tm5sn924r0c72","_id":"ckcctyvvx001jm5sndxdxhekx"},{"post_id":"ckcctyvs40003m5sn697dgc1o","tag_id":"ckcctyvut000ym5sn9mu63q46","_id":"ckcctyvw2001nm5sngfoz7ma7"},{"post_id":"ckcctyvs40003m5sn697dgc1o","tag_id":"ckcctyvv10013m5sn715j89id","_id":"ckcctyvw6001rm5snh2vuaw9d"},{"post_id":"ckcctyvs40003m5sn697dgc1o","tag_id":"ckcctyvv80017m5sn8bnp6g8h","_id":"ckcctyvwd001vm5sn4ze31ebz"},{"post_id":"ckcctyvsi0006m5snfyn69380","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyvxc002gm5sn0cj92njh"},{"post_id":"ckcctyvsi0006m5snfyn69380","tag_id":"ckcctyvvu001hm5sneeac1d1p","_id":"ckcctyvxd002im5snbv4uggqf"},{"post_id":"ckcctyvsi0006m5snfyn69380","tag_id":"ckcctyvw4001pm5sndeese28a","_id":"ckcctyvxf002lm5snbax46x63"},{"post_id":"ckcctyvsi0006m5snfyn69380","tag_id":"ckcctyvwf001ym5sng70j9bnq","_id":"ckcctyvxh002om5sn8z4d6viy"},{"post_id":"ckcctyvsi0006m5snfyn69380","tag_id":"ckcctyvws0024m5sn55uihjp5","_id":"ckcctyvxl002rm5sn90r47j3u"},{"post_id":"ckcctyvsi0006m5snfyn69380","tag_id":"ckcctyvx30029m5snbnzt2tk5","_id":"ckcctyvxn002um5sncz8c3rtn"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyvyc003im5sna2pmdwre"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvw4001pm5sndeese28a","_id":"ckcctyvye003lm5sn7zlh6h08"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvxd002jm5sn25bwdedv","_id":"ckcctyvyf003om5snf6xr79pz"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvxi002qm5snbiglcc3v","_id":"ckcctyvyh003rm5snf34qf0ja"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvxn002wm5sn0xfmedb7","_id":"ckcctyvyi003um5sn3xiy4wme"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvxs0030m5sn7o642h0n","_id":"ckcctyvyj003wm5sndaa8afcx"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyvym0040m5sn5bpsfmc8"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvy00039m5snbifx4rgo","_id":"ckcctyvyn0042m5sng6ou17u2"},{"post_id":"ckcctyvss0009m5snclqp7i94","tag_id":"ckcctyvy2003cm5sn69ojcfsl","_id":"ckcctyvyp0046m5sn9q0n0d57"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyvyx004em5snfvup7gsq"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","tag_id":"ckcctyvw4001pm5sndeese28a","_id":"ckcctyvyy004fm5snb3r4e1s9"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","tag_id":"ckcctyvye003mm5sn32gy3d9n","_id":"ckcctyvz1004jm5sn7xplap4v"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","tag_id":"ckcctyvyh003tm5sn0vsn8zey","_id":"ckcctyvz2004km5sn44nr2ecx"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyvz4004nm5sne8s0994k"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","tag_id":"ckcctyvyo0045m5snb7cp82dp","_id":"ckcctyvz5004om5sn5fg86lsa"},{"post_id":"ckcctyvtc000bm5sn6kfl8al5","tag_id":"ckcctyvy2003cm5sn69ojcfsl","_id":"ckcctyvz7004rm5sn8jyogyhd"},{"post_id":"ckcctyvtn000fm5sner013smn","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyvz8004sm5snf0vhdq8z"},{"post_id":"ckcctyvtn000fm5sner013smn","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyvza004vm5sn1t962v1i"},{"post_id":"ckcctyvtn000fm5sner013smn","tag_id":"ckcctyvyz004hm5sn3rxzefyf","_id":"ckcctyvzb004wm5sn80srbfax"},{"post_id":"ckcctyvtn000fm5sner013smn","tag_id":"ckcctyvy2003cm5sn69ojcfsl","_id":"ckcctyvzd004zm5snb2ov43wj"},{"post_id":"ckcctyvtr000gm5sn5bfheqcu","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyvzg0052m5sn4rl1fpy6"},{"post_id":"ckcctyvtr000gm5sn5bfheqcu","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyvzh0054m5snepilc9w3"},{"post_id":"ckcctyvtr000gm5sn5bfheqcu","tag_id":"ckcctyvz8004tm5sn6u3x2qlz","_id":"ckcctyvzl0058m5sn2ufi7dcr"},{"post_id":"ckcctyvtr000gm5sn5bfheqcu","tag_id":"ckcctyvy2003cm5sn69ojcfsl","_id":"ckcctyvzn005am5sn5c0s9j5a"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyw0c005vm5sn3xhrh4lw"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyvze0050m5sn500ca86m","_id":"ckcctyw0c005wm5sndw16cx1g"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyvzh0056m5sn3ki8di61","_id":"ckcctyw0d005ym5snhi5zbxp0"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyvvu001hm5sneeac1d1p","_id":"ckcctyw0e005zm5snda6ncuzz"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyvzt005fm5sn18a12u8z","_id":"ckcctyw0h0061m5sn8aww8pyb"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyvzy005jm5sn7gr813v7","_id":"ckcctyw0m0062m5sncfmi6o3x"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyw03005km5snfhayd4qp","_id":"ckcctyw0n0064m5snajsu0ebm"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyw05005nm5snf6apacdb","_id":"ckcctyw0o0065m5snc38x7lpf"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyw06005qm5sn65my44t8","_id":"ckcctyw0o0066m5sn02cbf6to"},{"post_id":"ckcctyvu3000mm5snging2sfi","tag_id":"ckcctyw07005tm5sn8mwsewc4","_id":"ckcctyw0p0068m5sneiikhk42"},{"post_id":"ckcctyvu7000qm5snclv3fc6d","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw0p0069m5sn44liaa1q"},{"post_id":"ckcctyvu7000qm5snclv3fc6d","tag_id":"ckcctyw0d005xm5sncxkb2ax5","_id":"ckcctyw0r006bm5sn4h8ifr7f"},{"post_id":"ckcctyvu7000qm5snclv3fc6d","tag_id":"ckcctyw0f0060m5sn5cpj0lwq","_id":"ckcctyw0r006cm5sn4w34acrf"},{"post_id":"ckcctyvua000rm5sn9mrv95yk","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyw0s006em5sn64v88mkv"},{"post_id":"ckcctyvua000rm5sn9mrv95yk","tag_id":"ckcctyvtj000cm5snc5sb1xfn","_id":"ckcctyw0t006fm5sn1erpdo92"},{"post_id":"ckcctyvua000rm5sn9mrv95yk","tag_id":"ckcctyw0n0063m5sn8qwxbqap","_id":"ckcctyw0t006hm5sn0a605h8v"},{"post_id":"ckcctyvua000rm5sn9mrv95yk","tag_id":"ckcctyw0o0067m5sn4hkc4tq9","_id":"ckcctyw0u006im5sn1s81b4r1"},{"post_id":"ckcctyvuj000um5snaoci922g","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw0y006nm5snc1vhcrqw"},{"post_id":"ckcctyvuj000um5snaoci922g","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyw0y006om5sncvef6zy9"},{"post_id":"ckcctyvuj000um5snaoci922g","tag_id":"ckcctyw0t006gm5sn7jb5d6ka","_id":"ckcctyw10006qm5sneq2k9h1m"},{"post_id":"ckcctyvuj000um5snaoci922g","tag_id":"ckcctyw0u006jm5sncvoie9hu","_id":"ckcctyw10006rm5sn5wtz0ss2"},{"post_id":"ckcctyvuj000um5snaoci922g","tag_id":"ckcctyw0v006km5sn5lbdhj7f","_id":"ckcctyw12006tm5snggpp8bcf"},{"post_id":"ckcctyvuj000um5snaoci922g","tag_id":"ckcctyw0v006lm5sn6nax9hku","_id":"ckcctyw13006um5sn7ba4at78"},{"post_id":"ckcctyvuo000vm5snge631zev","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw14006wm5sn2f3jhb85"},{"post_id":"ckcctyvuo000vm5snge631zev","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyw15006xm5snbt9ihhbe"},{"post_id":"ckcctyvur000xm5sn82ah28fd","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyw190071m5snbd1u0utt"},{"post_id":"ckcctyvur000xm5sn82ah28fd","tag_id":"ckcctyw10006sm5sngqlcesl6","_id":"ckcctyw1a0072m5snci4d51m9"},{"post_id":"ckcctyvur000xm5sn82ah28fd","tag_id":"ckcctyw14006vm5sn0e53gqjh","_id":"ckcctyw1g0074m5sn70cxehag"},{"post_id":"ckcctyvur000xm5sn82ah28fd","tag_id":"ckcctyw15006ym5sndc0n83an","_id":"ckcctyw1h0075m5snce502yfu"},{"post_id":"ckcctyvur000xm5sn82ah28fd","tag_id":"ckcctyw16006zm5sn533h9f1d","_id":"ckcctyw1i0077m5sn1oygg8sq"},{"post_id":"ckcctyvuv000zm5snex7behqd","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw1r007dm5sn1gtl5jxl"},{"post_id":"ckcctyvuv000zm5snex7behqd","tag_id":"ckcctyw1a0073m5snc3i181td","_id":"ckcctyw1r007em5sn7x4p542l"},{"post_id":"ckcctyvuv000zm5snex7behqd","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyw1s007gm5sn94s27hq1"},{"post_id":"ckcctyvuv000zm5snex7behqd","tag_id":"ckcctyw1i0078m5sn4sda5351","_id":"ckcctyw1t007hm5sn6675gnh0"},{"post_id":"ckcctyvuv000zm5snex7behqd","tag_id":"ckcctyw1j0079m5sn58bt3kp7","_id":"ckcctyw1t007jm5sne9d90h3z"},{"post_id":"ckcctyvuv000zm5snex7behqd","tag_id":"ckcctyw1l007am5sn1qa14w46","_id":"ckcctyw1t007km5sn7e9g95ev"},{"post_id":"ckcctyvuv000zm5snex7behqd","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyw1u007mm5sng6pk5i94"},{"post_id":"ckcctyvuz0012m5sncrv7d577","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw1w007pm5sn8owl2j1u"},{"post_id":"ckcctyvuz0012m5sncrv7d577","tag_id":"ckcctyw1a0073m5snc3i181td","_id":"ckcctyw1x007qm5snafpwho4b"},{"post_id":"ckcctyvuz0012m5sncrv7d577","tag_id":"ckcctyw1j0079m5sn58bt3kp7","_id":"ckcctyw1y007sm5snhawa4ihh"},{"post_id":"ckcctyvuz0012m5sncrv7d577","tag_id":"ckcctyvx30029m5snbnzt2tk5","_id":"ckcctyw1y007tm5sneui82eph"},{"post_id":"ckcctyvuz0012m5sncrv7d577","tag_id":"ckcctyw1i0078m5sn4sda5351","_id":"ckcctyw1z007vm5sn12ir5os8"},{"post_id":"ckcctyvv20014m5sng56z1dqa","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw23007ym5sn342k1fl3"},{"post_id":"ckcctyvv20014m5sng56z1dqa","tag_id":"ckcctyvw4001pm5sndeese28a","_id":"ckcctyw23007zm5sndzu01979"},{"post_id":"ckcctyvv20014m5sng56z1dqa","tag_id":"ckcctyw1y007um5snho223xof","_id":"ckcctyw250081m5sng6pt2vu0"},{"post_id":"ckcctyvv20014m5sng56z1dqa","tag_id":"ckcctyw1z007wm5sn39y5di12","_id":"ckcctyw250082m5snd2vudzgr"},{"post_id":"ckcctyvv60016m5sn48h89s8n","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyw270087m5sndbkw36tv"},{"post_id":"ckcctyvv60016m5sn48h89s8n","tag_id":"ckcctyw10006sm5sngqlcesl6","_id":"ckcctyw280088m5snhkv1gt5k"},{"post_id":"ckcctyvv60016m5sn48h89s8n","tag_id":"ckcctyw240080m5snesuba73g","_id":"ckcctyw29008am5sngms24xdh"},{"post_id":"ckcctyvv60016m5sn48h89s8n","tag_id":"ckcctyw250083m5snap4q1gri","_id":"ckcctyw29008bm5sneeyrgfqs"},{"post_id":"ckcctyvv60016m5sn48h89s8n","tag_id":"ckcctyw260084m5sn1culbliu","_id":"ckcctyw29008dm5sn4t0pdk15"},{"post_id":"ckcctyvv60016m5sn48h89s8n","tag_id":"ckcctyw260085m5snc2123jb7","_id":"ckcctyw2a008em5sn588qhvch"},{"post_id":"ckcctyvve0018m5sne8peewk4","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw2c008im5sn23cb7sgr"},{"post_id":"ckcctyvve0018m5sne8peewk4","tag_id":"ckcctyw1a0073m5snc3i181td","_id":"ckcctyw2c008jm5sn5gojfiti"},{"post_id":"ckcctyvve0018m5sne8peewk4","tag_id":"ckcctyvxw0035m5snej3idxau","_id":"ckcctyw2c008lm5snepuuhm2n"},{"post_id":"ckcctyvve0018m5sne8peewk4","tag_id":"ckcctyw1i0078m5sn4sda5351","_id":"ckcctyw2c008mm5snafpbhps5"},{"post_id":"ckcctyvve0018m5sne8peewk4","tag_id":"ckcctyw2b008gm5sn5hmo6l5b","_id":"ckcctyw2d008om5sn4nurayln"},{"post_id":"ckcctyvvh0019m5snhzlmdcgo","tag_id":"ckcctyw2b008hm5sn7cxlbe25","_id":"ckcctyw2d008qm5sn9arn94ja"},{"post_id":"ckcctyvvh0019m5snhzlmdcgo","tag_id":"ckcctyw2c008km5snayxg90m5","_id":"ckcctyw2d008rm5sne3k1eicy"},{"post_id":"ckcctyvvh0019m5snhzlmdcgo","tag_id":"ckcctyw2c008nm5sn2od3c0iv","_id":"ckcctyw2e008tm5sn4v81ekj5"},{"post_id":"ckcctyvvq001em5sn6qbjgdxn","tag_id":"ckcctyw2d008pm5snha9edxsd","_id":"ckcctyw2f008xm5sn4ajq9n7p"},{"post_id":"ckcctyvvq001em5sn6qbjgdxn","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw2f008ym5sn46nvcqxp"},{"post_id":"ckcctyvvq001em5sn6qbjgdxn","tag_id":"ckcctyw2e008um5sn6vbdb9bl","_id":"ckcctyw2g0090m5sngh4d8g2d"},{"post_id":"ckcctyvvq001em5sn6qbjgdxn","tag_id":"ckcctyw2e008vm5sn1mn3fkck","_id":"ckcctyw2g0091m5sneysqbdhu"},{"post_id":"ckcctyvvv001im5sn28491gup","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw2j0097m5sn0xqg0ngs"},{"post_id":"ckcctyvvv001im5sn28491gup","tag_id":"ckcctyvw4001pm5sndeese28a","_id":"ckcctyw2j0098m5snb81xa8yl"},{"post_id":"ckcctyvvv001im5sn28491gup","tag_id":"ckcctyw2g0092m5sna2fjarpu","_id":"ckcctyw2j009am5sn90rgapu2"},{"post_id":"ckcctyvvv001im5sn28491gup","tag_id":"ckcctyw2g0093m5sn42qx6fbx","_id":"ckcctyw2j009bm5sngx0ze96r"},{"post_id":"ckcctyvvv001im5sn28491gup","tag_id":"ckcctyw2h0094m5sncozfelkf","_id":"ckcctyw2k009dm5snfg0lgilc"},{"post_id":"ckcctyvvv001im5sn28491gup","tag_id":"ckcctyw2i0095m5sn87lb4v3s","_id":"ckcctyw2l009em5sneyi0a0e5"},{"post_id":"ckcctyvwd001wm5sn4oem1hia","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw2m009gm5sn8czbe1dt"},{"post_id":"ckcctyvwd001wm5sn4oem1hia","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw2m009hm5sncopy2am0"},{"post_id":"ckcctyvwi001zm5sn0eam8h15","tag_id":"ckcctyw2b008hm5sn7cxlbe25","_id":"ckcctyw2o009lm5sn2oi07atv"},{"post_id":"ckcctyvwi001zm5sn0eam8h15","tag_id":"ckcctyw2c008km5snayxg90m5","_id":"ckcctyw2o009mm5sncctfcan6"},{"post_id":"ckcctyvwi001zm5sn0eam8h15","tag_id":"ckcctyw2m009im5sn3c8j5d1a","_id":"ckcctyw2p009om5sn0zbdaeo6"},{"post_id":"ckcctyvwi001zm5sn0eam8h15","tag_id":"ckcctyw2c008nm5sn2od3c0iv","_id":"ckcctyw2p009pm5sn2fnhdzfc"},{"post_id":"ckcctyvwt0025m5sncf6b6bts","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw2u009sm5sn37462rh8"},{"post_id":"ckcctyvwt0025m5sncf6b6bts","tag_id":"ckcctyw2o009nm5snc1hk9v03","_id":"ckcctyw2u009tm5sn9liqg2kt"},{"post_id":"ckcctyvwt0025m5sncf6b6bts","tag_id":"ckcctyw2q009qm5sn5mdu4bxj","_id":"ckcctyw2u009um5sn9d908qjj"},{"post_id":"ckcctyvwt0025m5sncf6b6bts","tag_id":"ckcctyw2r009rm5sndhea4crd","_id":"ckcctyw2u009vm5sn4iai0agk"},{"post_id":"ckcctyw3p009wm5sn5hfdaewk","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyw3u009ym5sn8ten7e9b"},{"post_id":"ckcctyw3p009wm5sn5hfdaewk","tag_id":"ckcctyvtj000cm5snc5sb1xfn","_id":"ckcctyw3v00a0m5snc3t2cge9"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyvsb0004m5sn8vpeax6q","_id":"ckcctyw3z00abm5sn53joap16"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw10006sm5sngqlcesl6","_id":"ckcctyw3z00acm5snb8gvd6u9"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3u009zm5sn2p5hc182","_id":"ckcctyw3z00adm5sngeuj8sx5"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3v00a2m5snbs633sbq","_id":"ckcctyw3z00aem5sn4vq29d8l"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3w00a4m5sngbhudfxn","_id":"ckcctyw3z00afm5snfiifb749"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3w00a5m5sna20c7jmj","_id":"ckcctyw3z00agm5sn3962gywi"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3x00a6m5sn1uuvflo8","_id":"ckcctyw3z00ahm5sn1og1e5xq"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3x00a7m5sn4k2s4z6l","_id":"ckcctyw3z00aim5sn7vmy18mj"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3x00a8m5snblxbcgs5","_id":"ckcctyw3z00ajm5sncza49c77"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3y00a9m5sn9l7i5hy4","_id":"ckcctyw3z00akm5sneo4n6eig"},{"post_id":"ckcctyw3s009xm5sn9d6scz4m","tag_id":"ckcctyw3y00aam5sna63u5eib","_id":"ckcctyw3z00alm5sneckq6e9c"},{"post_id":"ckcctyw6x00amm5sn2wbq0hia","tag_id":"ckcctyw0a005um5sn5gfk4hig","_id":"ckcctyw7100arm5sng6to8l7r"},{"post_id":"ckcctyw6x00amm5sn2wbq0hia","tag_id":"ckcctyvw4001pm5sndeese28a","_id":"ckcctyw7100asm5snbhn0hyzc"},{"post_id":"ckcctyw6x00amm5sn2wbq0hia","tag_id":"ckcctyw6y00anm5sn3ceh9fgj","_id":"ckcctyw7100atm5sn0ygk70bt"},{"post_id":"ckcctyw6x00amm5sn2wbq0hia","tag_id":"ckcctyw6z00aom5sn2yi2ecak","_id":"ckcctyw7100aum5sn96za5zqr"}],"Tag":[{"name":"前端开发","_id":"ckcctyvsb0004m5sn8vpeax6q"},{"name":"Git相关","_id":"ckcctyvtj000cm5snc5sb1xfn"},{"name":"数据结构","_id":"ckcctyvtu000hm5sn5srd56o7"},{"name":"大话数据结构","_id":"ckcctyvu6000om5sn07vj2gdk"},{"name":"计算机科学","_id":"ckcctyvuj000tm5sn924r0c72"},{"name":"Data Structure","_id":"ckcctyvut000ym5sn9mu63q46"},{"name":"阅读","_id":"ckcctyvv10013m5sn715j89id"},{"name":"读书笔记","_id":"ckcctyvv80017m5sn8bnp6g8h"},{"name":"前端算法","_id":"ckcctyvvu001hm5sneeac1d1p"},{"name":"前端面试题","_id":"ckcctyvw4001pm5sndeese28a"},{"name":"前端算法面试题","_id":"ckcctyvwf001ym5sng70j9bnq"},{"name":"JavaScript 字符串回文","_id":"ckcctyvws0024m5sn55uihjp5"},{"name":"JavaScript 算法","_id":"ckcctyvx30029m5snbnzt2tk5"},{"name":"var","_id":"ckcctyvxd002jm5sn25bwdedv"},{"name":"let","_id":"ckcctyvxi002qm5snbiglcc3v"},{"name":"const","_id":"ckcctyvxn002wm5sn0xfmedb7"},{"name":"变量作用域","_id":"ckcctyvxs0030m5sn7o642h0n"},{"name":"JavaScript","_id":"ckcctyvxw0035m5snej3idxau"},{"name":"JavaScript变量","_id":"ckcctyvy00039m5snbifx4rgo"},{"name":"JavaScript 基础知识","_id":"ckcctyvy2003cm5sn69ojcfsl"},{"name":"function","_id":"ckcctyvye003mm5sn32gy3d9n"},{"name":"函数","_id":"ckcctyvyh003tm5sn0vsn8zey"},{"name":"JavaScript 函数","_id":"ckcctyvyo0045m5snb7cp82dp"},{"name":"JavaScript 隐式转换","_id":"ckcctyvyz004hm5sn3rxzefyf"},{"name":"JavaScript 检测数据类型","_id":"ckcctyvz8004tm5sn6u3x2qlz"},{"name":"算法","_id":"ckcctyvze0050m5sn500ca86m"},{"name":"算法面试题","_id":"ckcctyvzh0056m5sn3ki8di61"},{"name":"Leetcode","_id":"ckcctyvzt005fm5sn18a12u8z"},{"name":"VS Code","_id":"ckcctyvzy005jm5sn7gr813v7"},{"name":"Visual Studio Code","_id":"ckcctyw03005km5snfhayd4qp"},{"name":"algorithms","_id":"ckcctyw05005nm5snf6apacdb"},{"name":"Leetcode算法题","_id":"ckcctyw06005qm5sn65my44t8"},{"name":"Leetcode algorithms","_id":"ckcctyw07005tm5sn8mwsewc4"},{"name":"前端","_id":"ckcctyw0a005um5sn5gfk4hig"},{"name":"npm","_id":"ckcctyw0d005xm5sncxkb2ax5"},{"name":"node","_id":"ckcctyw0f0060m5sn5cpj0lwq"},{"name":"commits","_id":"ckcctyw0n0063m5sn8qwxbqap"},{"name":"git-commits","_id":"ckcctyw0o0067m5sn4hkc4tq9"},{"name":"Function","_id":"ckcctyw0t006gm5sn7jb5d6ka"},{"name":"IIFE","_id":"ckcctyw0u006jm5sncvoie9hu"},{"name":"立即执行函数","_id":"ckcctyw0v006km5sn5lbdhj7f"},{"name":"JavaScript 函数作用域","_id":"ckcctyw0v006lm5sn6nax9hku"},{"name":"CSS","_id":"ckcctyw10006sm5sngqlcesl6"},{"name":"CSS 文本换行","_id":"ckcctyw14006vm5sn0e53gqjh"},{"name":"CSS 不换行","_id":"ckcctyw15006ym5sndc0n83an"},{"name":"CSS 超出部分显示省略号","_id":"ckcctyw16006zm5sn533h9f1d"},{"name":"前端基础","_id":"ckcctyw1a0073m5snc3i181td"},{"name":"JavaScript 基础","_id":"ckcctyw1i0078m5sn4sda5351"},{"name":"ES6","_id":"ckcctyw1j0079m5sn58bt3kp7"},{"name":"arrow function expressions","_id":"ckcctyw1l007am5sn1qa14w46"},{"name":"JavaScript 执行机制","_id":"ckcctyw1y007um5snho223xof"},{"name":"JavaScript event loop","_id":"ckcctyw1z007wm5sn39y5di12"},{"name":"CSS BFC","_id":"ckcctyw240080m5snesuba73g"},{"name":"CSS Layout","_id":"ckcctyw250083m5snap4q1gri"},{"name":"CSS 布局","_id":"ckcctyw260084m5sn1culbliu"},{"name":"CSS 块级格式上下文","_id":"ckcctyw260085m5snc2123jb7"},{"name":"JavaScript 时间戳","_id":"ckcctyw2b008gm5sn5hmo6l5b"},{"name":"Mac","_id":"ckcctyw2b008hm5sn7cxlbe25"},{"name":"MacBook Pro","_id":"ckcctyw2c008km5snayxg90m5"},{"name":"macOS Catalina","_id":"ckcctyw2c008nm5sn2od3c0iv"},{"name":"Vue","_id":"ckcctyw2d008pm5snha9edxsd"},{"name":"Vue生命周期","_id":"ckcctyw2e008um5sn6vbdb9bl"},{"name":"VueLifeClcle","_id":"ckcctyw2e008vm5sn1mn3fkck"},{"name":"Object","_id":"ckcctyw2g0092m5sna2fjarpu"},{"name":"Create object","_id":"ckcctyw2g0093m5sn42qx6fbx"},{"name":"JavaScript object","_id":"ckcctyw2h0094m5sncozfelkf"},{"name":"创建对象","_id":"ckcctyw2i0095m5sn87lb4v3s"},{"name":"Terminal","_id":"ckcctyw2m009im5sn3c8j5d1a"},{"name":"跨域","_id":"ckcctyw2o009nm5snc1hk9v03"},{"name":"浏览器跨域","_id":"ckcctyw2q009qm5sn5mdu4bxj"},{"name":"CORS","_id":"ckcctyw2r009rm5sndhea4crd"},{"name":"CSS 特殊性","_id":"ckcctyw3u009zm5sn2p5hc182"},{"name":"CSS 继承","_id":"ckcctyw3v00a2m5snbs633sbq"},{"name":"CSS 层叠","_id":"ckcctyw3w00a4m5sngbhudfxn"},{"name":"CSS 结构","_id":"ckcctyw3w00a5m5sna20c7jmj"},{"name":"CSS 特殊性计算","_id":"ckcctyw3x00a6m5sn1uuvflo8"},{"name":"CSS Specificity","_id":"ckcctyw3x00a7m5sn4k2s4z6l"},{"name":"CSS Inheritance","_id":"ckcctyw3x00a8m5snblxbcgs5"},{"name":"CSS Cascading","_id":"ckcctyw3y00a9m5sn9l7i5hy4"},{"name":"CSS Structure","_id":"ckcctyw3y00aam5sna63u5eib"},{"name":"JavaScript this","_id":"ckcctyw6y00anm5sn3ceh9fgj"},{"name":"JavaScript 作用域问题","_id":"ckcctyw6z00aom5sn2yi2ecak"}]}}